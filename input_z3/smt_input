
(declare-sort _S1)(declare-fun turn(_S1) Bool)
(declare-fun numStone() Int)(declare-const p2 _S1)
(declare-const p1 _S1)
(declare-const True Bool)
(declare-const False Bool)(set-option :timeout 10000) (assert (>= numStone 0) )  (assert  (not (= p1 p2))) (assert (or (and (turn p1) (not (  turn p2)) ) (and (turn p2) (not (turn p1)))) ) (assert (not   (=> (and (=> (= numStone 0) (and (= numStone 0) (not (turn p1)))) (not (exists ((G0 Int) (G1 Int)) (and (and (and (and (and (>= G0 0) (>= G1 0)) (= numStone G0)) (> G0 0)) (= G1 2)) (not (> numStone G1)))))) (forall ((K22 Int)) (=> (and (and (>= numStone K22) (or (or (= K22 1) (= K22 2)) (= K22 3))) (turn p2)) (and (and (=> (= numStone (+ 0 K22)) (and (= numStone (+ 0 K22)) (not (not (turn p1))))) (not (exists ((G0 Int) (G1 Int)) (and (and (and (and (and (>= G0 0) (>= G1 0)) (not (= numStone (+ G0 K22)))) (not (turn p2))) (> G1 1)) (not (= numStone (+ G1 K22))))))) (not (exists ((G0 Int) (G1 Int)) (exists ((K23 Int)) (and (= numStone (+ K23 K22)) (and (and (and (and (and (>= G0 0) (>= G1 0)) (= numStone (+ G0 K22))) (> G0 3)) (> G1 1)) (not (>= K23 G1)))))))))))  ))
(check-sat)
(get-model)