
(declare-sort _S1)(declare-fun xlen() Int)
(declare-fun ylen() Int)
(declare-fun Ch(Int Int) Bool)
(declare-fun turn(_S1) Bool)(declare-const p2 _S1)
(declare-const p1 _S1)
(declare-const True Bool)
(declare-const False Bool)(set-option :timeout 4000)(assert (<= xlen 4)) (assert (<= ylen 4))(assert (= xlen ylen) ) (assert (> xlen 1) ) (assert (> ylen 1) ) (assert  (not (= p1 p2))) (assert (or (and (turn p1) (not (turn p2)) ) (and (turn p2) (not (turn p1)))) )(assert (forall ((X Int) (Y Int)) (=> (not (and (>= X 0) (< X xlen) (>= Y 0) (< Y ylen) )) (= (Ch X Y) false)))) (assert (not    (=> (and (and (and (and (and (=> (not (Ch 0 0)) (and (not (Ch 0 0)) (turn p1))) (not (and (Ch 1 0) (not (Ch 0 1))))) (not (exists ((G0 Int)) (and (and (>= G0 0) (not (= G0 0))) (Ch G0 G0))))) (not (exists ((G0 Int) (G1 Int)) (and (and (and (and (>= G0 0) (>= G1 0)) (not (Ch G0 0))) (>= G1 0)) (Ch G1 G0))))) (not (exists ((G0 Int)) (and (and (>= G0 0) (not (= G0 0))) (Ch G0 1))))) (not (exists ((G0 Int) (G1 Int)) (and (and (and (and (>= G0 0) (>= G1 0)) (Ch G0 0)) (>= G0 G1)) (not (Ch G1 0)))))) (forall ((K326 Int) (K327 Int)) (=> (and (and (and (and (and (Ch K326 K327) (turn p2)) (>= K326 0)) (< K326 xlen)) (>= K327 0)) (< K327 ylen)) (and (and (and (and (and (and (and (=> (not (and (Ch 0 0) (or (> K326 0) (> K327 0)))) (and (not (and (Ch 0 0) (or (> K326 0) (> K327 0)))) (not (turn p1)))) (not (exists ((G0 Int)) (and (and (>= G0 0) (= xlen G0)) (not (turn p2)))))) (not (not (turn p2)))) (not (and (and (and (Ch 0 0) (or (> K326 0) (> K327 0))) (not (and (Ch 1 0) (or (> K326 1) (> K327 0))))) (not (and (Ch 0 1) (or (> K326 0) (> K327 1))))))) (not (exists ((G0 Int)) (and (and (and (>= G0 0) (and (Ch 1 G0) (or (> K326 1) (> K327 G0)))) (and (Ch 0 1) (or (> K326 0) (> K327 1)))) (not (and (Ch 1 1) (or (> K326 1) (> K327 1)))))))) (not (exists ((G0 Int)) (and (and (>= G0 0) (and (Ch G0 1) (or (> K326 G0) (> K327 1)))) (not (and (Ch 0 G0) (or (> K326 0) (> K327 G0)))))))) (not (exists ((G0 Int)) (and (and (and (>= G0 0) (> G0 1)) (not (and (Ch 1 1) (or (> K326 1) (> K327 1))))) (and (Ch 0 G0) (or (> K326 0) (> K327 G0))))))) (not (exists ((G0 Int) (G1 Int) (G2 Int)) (and (and (and (and (and (>= G0 0) (>= G1 0)) (>= G2 0)) (and (Ch G0 G1) (or (> K326 G0) (> K327 G1)))) (> G0 G2)) (not (and (Ch 0 G2) (or (> K326 0) (> K327 G2)))))))))))  ))
(check-sat)
(get-model)