
(declare-sort _S1)(declare-fun xlen() Int)
(declare-fun ylen() Int)
(declare-fun Ch(Int Int) Bool)
(declare-fun turn(_S1) Bool)(declare-const p2 _S1)
(declare-const p1 _S1)
(declare-const True Bool)
(declare-const False Bool)(set-option :timeout 10000)(assert (= xlen ylen) ) (assert (> xlen 1) ) (assert (> ylen 1) ) (assert  (not (= p1 p2))) (assert (or (and (turn p1) (not (turn p2)) ) (and (turn p2) (not (turn p1)))) ) (assert (not    (=> (and (and (=> (not (Ch 0 0)) (and (not (Ch 0 0)) (turn p1))) (not (exists ((G0 Int)) (and (and (>= G0 0) (Ch G0 G0)) (= xlen G0))))) (not (exists ((G0 Int) (G1 Int)) (and (and (and (>= G0 0) (>= G1 0)) (not (Ch G0 G1))) (not (>= xlen G0)))))) (forall ((K531 Int) (K532 Int)) (=> (and (and (and (and (and (Ch K531 K532) (turn p2)) (>= K531 0)) (< K531 xlen)) (>= K532 0)) (< K532 ylen)) (and (and (=> (not (and (Ch 0 0) (or (> K531 0) (> K532 0)))) (and (not (and (Ch 0 0) (or (> K531 0) (> K532 0)))) (not (turn p1)))) (not (exists ((G0 Int)) (and (and (>= G0 0) (not (and (Ch G0 0) (or (> K531 G0) (> K532 0))))) (not (not (turn p2))))))) (not (exists ((G0 Int) (G1 Int)) (and (and (and (>= G0 0) (>= G1 0)) (and (Ch G0 G1) (or (> K531 G0) (> K532 G1)))) (not (turn p2)))))))))  ))
(check-sat)
(get-model)