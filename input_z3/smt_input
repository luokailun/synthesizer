
(declare-sort _S1)(declare-fun xlen() Int)
(declare-fun ylen() Int)
(declare-fun Ch(Int Int) Bool)
(declare-fun turn(_S1) Bool)(declare-const p2 _S1)
(declare-const p1 _S1)
(declare-const True Bool)
(declare-const False Bool)(set-option :timeout 10000)(assert (= xlen ylen) ) (assert (> xlen 1) ) (assert (> ylen 1) ) (assert  (not (= p1 p2))) (assert (or (and (turn p1) (not (turn p2)) ) (and (turn p2) (not (turn p1)))) )(assert (forall ((X Int) (Y Int)) (=> (not (and (>= X 0) (< X xlen) (>= Y 0) (< Y ylen) )) (= (Ch X Y) false)))) (assert (not    (=> (and (and (and (and (and (=> (not (Ch 0 0)) (and (not (Ch 0 0)) (turn p1))) (not (exists ((G0 Int)) (and (and (>= G0 0) (= xlen G0)) (turn p2))))) (not (turn p2))) (not (exists ((G0 Int) (G1 Int) (G2 Int)) (and (and (and (and (and (and (>= G0 0) (>= G1 0)) (>= G2 0)) (Ch 0 G0)) (not (Ch 1 G0))) (Ch G1 G2)) (not (Ch G1 1)))))) (not (exists ((G0 Int)) (and (and (>= G0 0) (> G0 1)) (Ch 0 G0))))) (not (exists ((G0 Int) (Y11 Int)) (and (and (and (>= G0 0) (>= Y11 0)) (not (Ch G0 0))) (Ch G0 Y11))))) (=> (not (not (Ch 0 0))) (exists ((K501 Int) (K502 Int)) (and (and (and (and (and (and (Ch K501 K502) (turn p1)) (>= K501 0)) (< K501 xlen)) (>= K502 0)) (< K502 ylen)) (and (and (and (and (=> (not (and (Ch 0 0) (or (> K501 0) (> K502 0)))) (and (not (and (Ch 0 0) (or (> K501 0) (> K502 0)))) (not (turn p1)))) (not (and (and (Ch 1 0) (or (> K501 1) (> K502 0))) (not (and (Ch 0 1) (or (> K501 0) (> K502 1))))))) (not (exists ((G0 Int)) (and (and (>= G0 0) (not (= G0 0))) (and (Ch G0 1) (or (> K501 G0) (> K502 1))))))) (not (exists ((G0 Int) (G1 Int)) (and (and (and (>= G0 0) (>= G1 0)) (and (Ch G0 G1) (or (> K501 G0) (> K502 G1)))) (not (and (Ch G1 0) (or (> K501 G1) (> K502 0)))))))) (not (exists ((G0 Int) (Y11 Int)) (and (and (and (and (>= G0 0) (>= Y11 0)) (not (= G0 0))) (not (= G0 1))) (and (Ch G0 Y11) (or (> K501 G0) (> K502 Y11)))))))))))  ))
(check-sat)
(get-model)