--------------------------
[Structure1]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  

#conjuncts:


[Structure2]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  

#conjuncts:


[Formula1]: ( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
[Formula2]:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:


Checking E model: ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})

Checking A model: ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '2', 'turn(p2)': 'True'}, {})

State q1: N models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})]

****** Generate new conjuncts
------Step 1: number of mappings (15)
------Step 1: number of mappings after filter (15)
------Step 1: number of conjunct (15)
------Step 1: number of conjunct after free-var filter (15)
------Step 1: number of conjunct after MC (15)
------Step 1: number of sub-conjunct (91)
------Step 1: number of sub-conjunct after MC (91)
------Step 2: number of mappings (2753)
------Step 2: number of mappings after filter (2753)
------Step 2: number of conjunct (2753)
------Step 2: number of conjunct after free-var filter (817)
------Step 2: number of conjunct after MC (667)
***** Change  ---> exists(X0:_S1)[turn(X0)] 

State q2: N models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '2', 'turn(p2)': 'True'}, {})]

****** Generate new conjuncts
------Step 1: number of mappings (15)
------Step 1: number of mappings after filter (15)
------Step 1: number of conjunct (15)
------Step 1: number of conjunct after free-var filter (15)
------Step 1: number of conjunct after MC (15)
------Step 1: number of sub-conjunct (91)
------Step 1: number of sub-conjunct after MC (91)
------Step 2: number of mappings (2753)
------Step 2: number of mappings after filter (2753)
------Step 2: number of conjunct (2753)
------Step 2: number of conjunct after free-var filter (817)
------Step 2: number of conjunct after MC (677)
***** Change  ---> exists(X0:_S1)[turn(X0)] 


***************** Convergence Update Structure *****************:

--------------------------
[Structure1]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  

#conjuncts:
(0):(['X0'], ['_S1'], ['turn(X0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})


[Structure2]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  

#conjuncts:
(0):(['X0'], ['_S1'], ['turn(X0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '2', 'turn(p2)': 'True'}, {})


[Formula1]: (( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(X0:_S1)[turn(X0)])
[Formula2]:(( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(X0:_S1)[turn(X0)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '1', 'turn(p2)': 'False'}, {})

DS0 progressed updated model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '0', 'turn(p2)': 'True'}, {})

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '1', 'turn(p2)': 'False'}, {})]

****** Generate adjacent conjuncts for  exists(X0:_S1)[turn(X0)]
------Number of sub-conjunct (1)

(B0)-----Generate conjuncts for 
------Step 1: number of sub-conjunct (91)
------Step 1: number of sub-conjunct after MC (91)
------Step 2: number of mappings (2753)
------Step 2: number of mappings after filter (2753)
------Step 2: number of conjunct (2753)
------Step 2: number of conjunct after free-var filter (817)
------Step 2: number of conjunct after MC (667)

****** Change exists(X0:_S1)[turn(X0)] ---> exists(G0:_S1)[turn(G0)&turn(p2)] 

State q2: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '0', 'turn(p2)': 'True'}, {})]

****** Generate adjacent conjuncts for  exists(X0:_S1)[turn(X0)]
------Number of sub-conjunct (1)

(B0)-----Generate conjuncts for 
------Step 1: number of sub-conjunct (91)
------Step 1: number of sub-conjunct after MC (91)
------Step 2: number of mappings (2753)
------Step 2: number of mappings after filter (2753)
------Step 2: number of conjunct (2753)
------Step 2: number of conjunct after free-var filter (817)
------Step 2: number of conjunct after MC (677)

****** Change exists(X0:_S1)[turn(X0)] ---> exists(G0:Int)[G0>=0&G0 > 1&numStone() = G0] 


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '1', 'turn(p2)': 'False'}, {})

#conjuncts:
(0):(['G0'], ['_S1'], ['turn(G0)', 'turn(p2)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})


[Structure2]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '0', 'turn(p2)': 'True'}, {})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 > 1', 'numStone() = G0'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '2', 'turn(p2)': 'True'}, {})


[Formula1]: (( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:_S1)[turn(G0)&turn(p2)])
[Formula2]:(( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 1&numStone() = G0])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:


Checking E model: ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '6', 'turn(p2)': 'False'}, {})

Checking A model: ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})

State q2: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '4', 'turn(p2)': 'True'}, {})]

****** Change exists(G0:Int)[G0>=0&G0 > 1&numStone() = G0] ---> exists(G0:Int)[G0>=0&G0 = 2&numStone() = G0] 


***************** Convergence Update Structure *****************:

--------------------------
[Structure1]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '1', 'turn(p2)': 'False'}, {})

#conjuncts:
(0):(['G0'], ['_S1'], ['turn(G0)', 'turn(p2)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})


[Structure2]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '0', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '4', 'turn(p2)': 'True'}, {})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 2', 'numStone() = G0'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '2', 'turn(p2)': 'True'}, {})


[Formula1]: (( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:_S1)[turn(G0)&turn(p2)])
[Formula2]:(( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 2&numStone() = G0])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:


Checking A model: ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})

State q2: N models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})]

****** Generate new conjuncts
------Step 1: number of mappings (15)
------Step 1: number of mappings after filter (15)
------Step 1: number of conjunct (15)
------Step 1: number of conjunct after free-var filter (15)
------Step 1: number of conjunct after MC (1)
------Step 1: number of sub-conjunct (91)
------Step 1: number of sub-conjunct after MC (91)
------Step 2: number of mappings (2753)
------Step 2: number of mappings after filter (2753)
------Step 2: number of conjunct (2753)
------Step 2: number of conjunct after free-var filter (817)
------Step 2: number of conjunct after MC (43)
***** Change  ---> numStone() = 1 


***************** Convergence Update Structure *****************:

--------------------------
[Structure1]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '1', 'turn(p2)': 'False'}, {})

#conjuncts:
(0):(['G0'], ['_S1'], ['turn(G0)', 'turn(p2)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})


[Structure2]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '0', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '4', 'turn(p2)': 'True'}, {})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 2', 'numStone() = G0'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '2', 'turn(p2)': 'True'}, {})

(1):([], [], ['numStone() = 1'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})


[Formula1]: (( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:_S1)[turn(G0)&turn(p2)])
[Formula2]:(( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 2&numStone() = G0])&!(numStone() = 1)
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:


Checking A model: ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '3', 'turn(p2)': 'True'}, {})

State q2: N models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '3', 'turn(p2)': 'True'}, {})]

****** Generate adjacent conjuncts for  numStone() = 1
------Number of sub-conjunct (1)

(B0)-----Generate conjuncts for 
------Step 1: number of sub-conjunct (91)
------Step 1: number of sub-conjunct after MC (91)
------Step 2: number of mappings (2753)
------Step 2: number of mappings after filter (2753)
------Step 2: number of conjunct (2753)
------Step 2: number of conjunct after free-var filter (817)
------Step 2: number of conjunct after MC (43)

****** Generate new conjuncts
------Step 1: number of mappings (15)
------Step 1: number of mappings after filter (15)
------Step 1: number of conjunct (15)
------Step 1: number of conjunct after free-var filter (15)
------Step 1: number of conjunct after MC (1)
------Step 1: number of sub-conjunct (91)
------Step 1: number of sub-conjunct after MC (91)
------Step 2: number of mappings (2753)
------Step 2: number of mappings after filter (2753)
------Step 2: number of conjunct (2753)
------Step 2: number of conjunct after free-var filter (817)
------Step 2: number of conjunct after MC (43)
***** Change  ---> numStone() = 3 


***************** Convergence Update Structure *****************:

--------------------------
[Structure1]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '1', 'turn(p2)': 'False'}, {})

#conjuncts:
(0):(['G0'], ['_S1'], ['turn(G0)', 'turn(p2)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})


[Structure2]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '0', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '4', 'turn(p2)': 'True'}, {})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 2', 'numStone() = G0'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '2', 'turn(p2)': 'True'}, {})

(1):([], [], ['numStone() = 1'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})

(2):([], [], ['numStone() = 3'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '3', 'turn(p2)': 'True'}, {})


[Formula1]: (( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:_S1)[turn(G0)&turn(p2)])
[Formula2]:(( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 2&numStone() = G0])&!(numStone() = 1)&!(numStone() = 3)
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:


Checking E model: ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '4', 'turn(p2)': 'False'}, {})

State q1: N models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '4', 'turn(p2)': 'False'}, {})]

****** Generate new conjuncts
------Step 1: number of mappings (14)
------Step 1: number of mappings after filter (14)
------Step 1: number of conjunct (14)
------Step 1: number of conjunct after free-var filter (14)
------Step 1: number of conjunct after MC (2)
------Step 1: number of sub-conjunct (90)
------Step 1: number of sub-conjunct after MC (90)
------Step 2: number of mappings (2349)
------Step 2: number of mappings after filter (2349)
------Step 2: number of conjunct (2349)
------Step 2: number of conjunct after free-var filter (685)
------Step 2: number of conjunct after MC (142)
***** Change  ---> numStone() = 4 


***************** Convergence Update Structure *****************:

--------------------------
[Structure1]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '1', 'turn(p2)': 'False'}, {})

#conjuncts:
(0):(['G0'], ['_S1'], ['turn(G0)', 'turn(p2)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})

(1):([], [], ['numStone() = 4'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '4', 'turn(p2)': 'False'}, {})


[Structure2]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '0', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '4', 'turn(p2)': 'True'}, {})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 2', 'numStone() = G0'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '2', 'turn(p2)': 'True'}, {})

(1):([], [], ['numStone() = 1'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})

(2):([], [], ['numStone() = 3'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '3', 'turn(p2)': 'True'}, {})


[Formula1]: (( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:_S1)[turn(G0)&turn(p2)])&!(numStone() = 4)
[Formula2]:(( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 2&numStone() = G0])&!(numStone() = 1)&!(numStone() = 3)
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:


Checking A model: ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '6', 'turn(p2)': 'True'}, {})

State q2: N models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '6', 'turn(p2)': 'True'}, {})]

****** Generate adjacent conjuncts for  numStone() = 3
------Number of sub-conjunct (1)

(B0)-----Generate conjuncts for 
------Step 1: number of sub-conjunct (91)
------Step 1: number of sub-conjunct after MC (91)
------Step 2: number of mappings (2753)
------Step 2: number of mappings after filter (2753)
------Step 2: number of conjunct (2753)
------Step 2: number of conjunct after free-var filter (817)
------Step 2: number of conjunct after MC (43)

****** Generate new conjuncts
------Step 1: number of mappings (14)
------Step 1: number of mappings after filter (14)
------Step 1: number of conjunct (14)
------Step 1: number of conjunct after free-var filter (14)
------Step 1: number of conjunct after MC (0)
------Step 1: number of sub-conjunct (91)
------Step 1: number of sub-conjunct after MC (91)
------Step 2: number of mappings (2373)
------Step 2: number of mappings after filter (2373)
------Step 2: number of conjunct (2373)
------Step 2: number of conjunct after free-var filter (695)
------Step 2: number of conjunct after MC (20)
***** Change exists(G0:Int)[G0>=0&G0 = 2&numStone() = G0] ---> exists(G0:Int)[G0>=0&G0 % 4 = 2&numStone() = G0] 


***************** Convergence Update Structure *****************:

--------------------------
[Structure1]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '1', 'turn(p2)': 'False'}, {})

#conjuncts:
(0):(['G0'], ['_S1'], ['turn(G0)', 'turn(p2)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})

(1):([], [], ['numStone() = 4'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '4', 'turn(p2)': 'False'}, {})


[Structure2]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '0', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '4', 'turn(p2)': 'True'}, {})

#conjuncts:
(0):([], [], ['numStone() = 1'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})

(1):([], [], ['numStone() = 3'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '3', 'turn(p2)': 'True'}, {})

(2):(['G0'], ['Int'], ['G0 % 4 = 2', 'numStone() = G0'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '6', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '2', 'turn(p2)': 'True'}, {})


[Formula1]: (( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:_S1)[turn(G0)&turn(p2)])&!(numStone() = 4)
[Formula2]:(( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(numStone() = 1)&!(numStone() = 3)&!(exists(G0:Int)[G0>=0&G0 % 4 = 2&numStone() = G0])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:


Checking A model: ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '5', 'turn(p2)': 'True'}, {})

State q2: N models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '5', 'turn(p2)': 'True'}, {})]

****** Generate adjacent conjuncts for  exists(G0:Int)[G0>=0&G0 % 4 = 2&numStone() = G0]
------Number of sub-conjunct (3)

(B0)-----Generate conjuncts for exists(G0:Int)[G0>=0&numStone() = G0]
------Step 1: number of sub-conjunct (200)
------Step 1: number of sub-conjunct after MC (149)
------Step 2: number of mappings (9098)
------Step 2: number of mappings after filter (7232)
------Step 2: number of conjunct (7232)
------Step 2: number of conjunct after free-var filter (1978)
------Step 2: number of conjunct after MC (170)

(B1)-----Generate conjuncts for exists(G0:Int)[G0>=0&G0 % 4 = 2]
------Step 1: number of sub-conjunct (200)
------Step 1: number of sub-conjunct after MC (169)
------Step 2: number of mappings (3266)
------Step 2: number of mappings after filter (2841)
------Step 2: number of conjunct (2841)
------Step 2: number of conjunct after free-var filter (231)
------Step 2: number of conjunct after MC (67)

(B2)-----Generate conjuncts for 
------Step 1: number of sub-conjunct (89)
------Step 1: number of sub-conjunct after MC (89)
------Step 2: number of mappings (2322)
------Step 2: number of mappings after filter (2322)
------Step 2: number of conjunct (2322)
------Step 2: number of conjunct after free-var filter (658)
------Step 2: number of conjunct after MC (8)

****** Generate new conjuncts
------Step 1: number of mappings (14)
------Step 1: number of mappings after filter (14)
------Step 1: number of conjunct (14)
------Step 1: number of conjunct after free-var filter (14)
------Step 1: number of conjunct after MC (0)
------Step 1: number of sub-conjunct (91)
------Step 1: number of sub-conjunct after MC (91)
------Step 2: number of mappings (2373)
------Step 2: number of mappings after filter (2373)
------Step 2: number of conjunct (2373)
------Step 2: number of conjunct after free-var filter (695)
------Step 2: number of conjunct after MC (24)
***** Change numStone() = 1 and numStone() = 3 ---> exists(G0:Int)[G0>=0&G0 % 2 = 1&numStone() = G0] 


***************** Convergence Update Structure *****************:

--------------------------
[Structure1]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '1', 'turn(p2)': 'False'}, {})

#conjuncts:
(0):(['G0'], ['_S1'], ['turn(G0)', 'turn(p2)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})

(1):([], [], ['numStone() = 4'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '4', 'turn(p2)': 'False'}, {})


[Structure2]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '0', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '4', 'turn(p2)': 'True'}, {})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 % 4 = 2', 'numStone() = G0'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '6', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '2', 'turn(p2)': 'True'}, {})

(1):(['G0'], ['Int'], ['G0 % 2 = 1', 'numStone() = G0'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '5', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '3', 'turn(p2)': 'True'}, {})


[Formula1]: (( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:_S1)[turn(G0)&turn(p2)])&!(numStone() = 4)
[Formula2]:(( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 % 4 = 2&numStone() = G0])&!(exists(G0:Int)[G0>=0&G0 % 2 = 1&numStone() = G0])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:


Checking E model: ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6', '7', '8'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '8', 'turn(p2)': 'False'}, {})

State q1: N models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6', '7', '8'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '8', 'turn(p2)': 'False'}, {})]

****** Generate adjacent conjuncts for  numStone() = 4
------Number of sub-conjunct (1)

(B0)-----Generate conjuncts for 
------Step 1: number of sub-conjunct (90)
------Step 1: number of sub-conjunct after MC (90)
------Step 2: number of mappings (2349)
------Step 2: number of mappings after filter (2349)
------Step 2: number of conjunct (2349)
------Step 2: number of conjunct after free-var filter (685)
------Step 2: number of conjunct after MC (142)

****** Generate new conjuncts
------Step 1: number of mappings (14)
------Step 1: number of mappings after filter (14)
------Step 1: number of conjunct (14)
------Step 1: number of conjunct after free-var filter (14)
------Step 1: number of conjunct after MC (1)
------Step 1: number of sub-conjunct (91)
------Step 1: number of sub-conjunct after MC (91)
------Step 2: number of mappings (2373)
------Step 2: number of mappings after filter (2373)
------Step 2: number of conjunct (2373)
------Step 2: number of conjunct after free-var filter (695)
------Step 2: number of conjunct after MC (135)
***** Change  ---> ! numStone() = 1 


***************** Convergence Update Structure *****************:

--------------------------
[Structure1]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '1', 'turn(p2)': 'False'}, {})

#conjuncts:
(0):(['G0'], ['_S1'], ['turn(G0)', 'turn(p2)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})

(1):([], [], ['numStone() = 4'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '4', 'turn(p2)': 'False'}, {})

(2):([], [], ['! numStone() = 1'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6', '7', '8'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '8', 'turn(p2)': 'False'}, {})


[Structure2]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '0', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '4', 'turn(p2)': 'True'}, {})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 % 4 = 2', 'numStone() = G0'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '6', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '2', 'turn(p2)': 'True'}, {})

(1):(['G0'], ['Int'], ['G0 % 2 = 1', 'numStone() = G0'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '5', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '3', 'turn(p2)': 'True'}, {})


[Formula1]: (( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:_S1)[turn(G0)&turn(p2)])&!(numStone() = 4)&!(! numStone() = 1)
[Formula2]:(( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 % 4 = 2&numStone() = G0])&!(exists(G0:Int)[G0>=0&G0 % 2 = 1&numStone() = G0])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:


Checking A model: ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '4', 'turn(p2)': 'True'}, {})

State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '3', 'turn(p2)': 'False'}, {}), ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '2', 'turn(p2)': 'False'}, {}), ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '1', 'turn(p2)': 'False'}, {})]

****** Generate adjacent conjuncts for  ! numStone() = 1
------Number of sub-conjunct (1)

(B0)-----Generate conjuncts for 
------Step 1: number of sub-conjunct (91)
------Step 1: number of sub-conjunct after MC (91)
------Step 2: number of mappings (2373)
------Step 2: number of mappings after filter (2373)
------Step 2: number of conjunct (2373)
------Step 2: number of conjunct after free-var filter (695)
------Step 2: number of conjunct after MC (135)

****** Change ! numStone() = 1 ---> exists(G0:Int)[G0>=0&G0 > 3&numStone() = G0] 


***************** Convergence Update Structure *****************:

--------------------------
[Structure1]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '1', 'turn(p2)': 'False'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '3', 'turn(p2)': 'False'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '2', 'turn(p2)': 'False'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '1', 'turn(p2)': 'False'}, {})

#conjuncts:
(0):(['G0'], ['_S1'], ['turn(G0)', 'turn(p2)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})

(1):([], [], ['numStone() = 4'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '4', 'turn(p2)': 'False'}, {})

(2):(['G0'], ['Int'], ['G0 > 3', 'numStone() = G0'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6', '7', '8'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '8', 'turn(p2)': 'False'}, {})


[Structure2]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '0', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '4', 'turn(p2)': 'True'}, {})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 % 4 = 2', 'numStone() = G0'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '6', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '2', 'turn(p2)': 'True'}, {})

(1):(['G0'], ['Int'], ['G0 % 2 = 1', 'numStone() = G0'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '5', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '3', 'turn(p2)': 'True'}, {})


[Formula1]: (( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:_S1)[turn(G0)&turn(p2)])&!(numStone() = 4)&!(exists(G0:Int)[G0>=0&G0 > 3&numStone() = G0])
[Formula2]:(( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 % 4 = 2&numStone() = G0])&!(exists(G0:Int)[G0>=0&G0 % 2 = 1&numStone() = G0])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:


Checking A model: ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6', '7', '8'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '8', 'turn(p2)': 'True'}, {})

State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6', '7', '8'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '7', 'turn(p2)': 'False'}, {}), ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6', '7', '8'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '6', 'turn(p2)': 'False'}, {}), ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6', '7', '8'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '5', 'turn(p2)': 'False'}, {})]

****** Change exists(G0:Int)[G0>=0&G0 > 3&numStone() = G0] ---> exists(G0:Int)[G0>=0&G0 % 4 = 0&numStone() = G0] 


***************** Convergence Update Structure *****************:

--------------------------
[Structure1]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '1', 'turn(p2)': 'False'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '3', 'turn(p2)': 'False'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '2', 'turn(p2)': 'False'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '1', 'turn(p2)': 'False'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6', '7', '8'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '7', 'turn(p2)': 'False'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6', '7', '8'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '6', 'turn(p2)': 'False'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6', '7', '8'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '5', 'turn(p2)': 'False'}, {})

#conjuncts:
(0):(['G0'], ['_S1'], ['turn(G0)', 'turn(p2)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})

(1):([], [], ['numStone() = 4'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '4', 'turn(p2)': 'False'}, {})

(2):(['G0'], ['Int'], ['G0 % 4 = 0', 'numStone() = G0'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6', '7', '8'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '8', 'turn(p2)': 'False'}, {})


[Structure2]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '0', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '4', 'turn(p2)': 'True'}, {})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 % 4 = 2', 'numStone() = G0'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '6', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '2', 'turn(p2)': 'True'}, {})

(1):(['G0'], ['Int'], ['G0 % 2 = 1', 'numStone() = G0'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '5', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '3', 'turn(p2)': 'True'}, {})


[Formula1]: (( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:_S1)[turn(G0)&turn(p2)])&!(numStone() = 4)&!(exists(G0:Int)[G0>=0&G0 % 4 = 0&numStone() = G0])
[Formula2]:(( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 % 4 = 2&numStone() = G0])&!(exists(G0:Int)[G0>=0&G0 % 2 = 1&numStone() = G0])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:


backtrack
try backtrack....
****** Change exists(G0:Int)[G0>=0&G0 > 3&numStone() = G0] ---> exists(G0:Int)[G0>=0&numStone() = G0&G0 % 4 = 0] 

q2 does not need to backtrack

***************** Convergence Update Structure *****************:

--------------------------
[Structure1]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '1', 'turn(p2)': 'False'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '3', 'turn(p2)': 'False'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '2', 'turn(p2)': 'False'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '1', 'turn(p2)': 'False'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6', '7', '8'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '7', 'turn(p2)': 'False'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6', '7', '8'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '6', 'turn(p2)': 'False'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6', '7', '8'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '5', 'turn(p2)': 'False'}, {})

#conjuncts:
(0):(['G0'], ['_S1'], ['turn(G0)', 'turn(p2)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})

(1):([], [], ['numStone() = 4'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '4', 'turn(p2)': 'False'}, {})

(2):(['G0'], ['Int'], ['numStone() = G0', 'G0 % 4 = 0'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6', '7', '8'], 'Bool': ['True', 'False']}, {'turn(p1)': 'True', 'numStone()': '8', 'turn(p2)': 'False'}, {})


[Structure2]
#Goal:( numStone()=0 ) => ( numStone()=0&!(turn(p1)) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '0', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '4', 'turn(p2)': 'True'}, {})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 % 4 = 2', 'numStone() = G0'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5', '6'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '6', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '2', 'turn(p2)': 'True'}, {})

(1):(['G0'], ['Int'], ['G0 % 2 = 1', 'numStone() = G0'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4', '5'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '5', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '1', 'turn(p2)': 'True'}, {})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '3', 'turn(p2)': 'True'}, {})


[Formula1]: (( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:_S1)[turn(G0)&turn(p2)])&!(numStone() = 4)&!(exists(G0:Int)[G0>=0&numStone() = G0&G0 % 4 = 0])
[Formula2]:(( numStone()=0 ) => ( numStone()=0&!(turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 % 4 = 2&numStone() = G0])&!(exists(G0:Int)[G0>=0&G0 % 2 = 1&numStone() = G0])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


#success~~~~~:
[Finished in 18.0s]