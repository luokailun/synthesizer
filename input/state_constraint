{
     "takeaway": {
        "sc": " (assert (>= numStone 0) )  (assert  (not (= p1 p2))) (assert (or (and (turn p1) (not (  turn p2)) ) (and (turn p2) (not (turn p1)))) )"
    },

     "takeaway134": {
        "sc": " (assert (>= numStone 0) )  (assert  (not (= p1 p2))) (assert (or (and (turn p1) (not (  turn p2)) ) (and (turn p2) (not (turn p1)))) )"
    },

    "two_Nim": {
        "sc": " (assert (>= spile 0) ) (assert (>= fpile 0) )  (assert  (not (= p1 p2))) (assert (or (and (turn p1) (not (  turn p2)) ) (and (turn p2) (not (turn p1)))) )"
    },

    "chompNN": {
        "sc": "(assert (= xlen ylen) ) (assert (> xlen 1) ) (assert (> ylen 1) ) (assert  (not (= p1 p2))) (assert (or (and (turn p1) (not (turn p2)) ) (and (turn p2) (not (turn p1)))) )(assert (forall ((X Int) (Y Int)) (=> (not (and (>= X 0) (< X xlen) (>= Y 0) (< Y ylen) )) (= (Ch X Y) false))))"
    },


    "chomp2N": {
        "sc": "(assert (= xlen 2) ) (assert (> ylen 0) ) (assert (>= lastx 0) ) (assert (<= lastx xlen) ) (assert (>= lasty 0) ) (assert (<= lasty ylen) ) (assert  (not (= p1 p2))) (assert (or (and (turn p1) (not (turn p2)) ) (and (turn p2) (not (turn p1)))) ) (assert (forall ((X Int) (Y Int)) (=> (not (and (> X 0) (<= X xlen) (> Y 0) (<= Y ylen) )) (= (Ch X Y) false))))(assert (forall ((X Int) (Y Int) (W Int) (Z Int)) (=> (and (and (and (and (not (Ch X Y)) (> X 0)) (> Y 0)) (>= W X)) (>= Z Y)) (not (Ch W Z)))))(assert (forall ((X Int) (Y Int)) (=> (and (= X lastx) (= Y lasty)) (not (Ch X Y)))))"
    },
    

    "clobber": {
        "sc": " (assert (> len 0) ) (assert  (not (= p1 p2))) (assert (or (and (turn p1) (not (turn p2)) ) (and (turn p2) (not (turn p1)))) )(assert (forall ((X _S1)) (or (= X p1) (= X p2) (= X empty) (= X unknown) ) ))(assert  (not (= p1 empty))) (assert  (not (= p2 empty)))(assert  (not (= p1 unknown)))(assert  (not (= p2 unknown)))(assert  (not (= empty unknown)))(assert (not (turn empty))) (assert (not (turn unknown)))(assert (= (mod len 2) 0) )(assert (forall ((X Int) (Y Int)) (=> (or (not (and (> X 0) (<= X 2))) (not (and (> Y 0) (<= Y len))))  (= (cell X Y) unknown))))(assert (forall ((X Int) (Y Int)) (=> ( and (> X 0) (<= X 2) (> Y 0) (<= Y len))  (not (= (cell X Y) unknown)))))"
    },


    "m_coloring": {
        "sc": "(assert (> len 1) ) (assert  (not (= p1 p2))) (assert (or (and (turn p1) (not (turn p2)) ) (and (turn p2) (not (turn p1)))) ) (assert  (and  (not (= red empty)) (not (= red blue))  (not (= red unknown)) (not (= red green)) (not (= unknown blue)) (not (= green blue)) (not (= empty blue)) (not (= empty unknown)) (not (= empty green))  (not (= unknown green)) )) (assert (forall ((X _S3)) (or (= X red) (= X empty) (= X blue) (= X green) (= X unknown))))(assert (forall ((X Int)) (=> (not (and (> X 0) (<= X len))) (= (cell X) unknown))))(assert (forall ((X Int)) (=> (and (> X 0) (<= X len)) (not (= (cell X) unknown)))))"
    }


}