--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:


[Formula1]: ( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
[Formula2]:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:


Checking E model: ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

State q1: N models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]

****** Generate new conjuncts
------Step 1: number of mappings (32)
------Step 1: number of mappings after filter (32)
------Step 1: number of conjunct (32)
------Step 1: number of conjunct after free-var filter (32)
------Step 1: number of conjunct after MC (32)
------Step 1: number of sub-conjunct (49)
------Step 1: number of sub-conjunct after MC (49)
------Step 2: number of mappings (3300)
------Step 2: number of mappings after filter (3300)
------Step 2: number of conjunct (3300)
------Step 2: number of conjunct after free-var filter (2048)
------Step 2: number of conjunct after MC (1812)
***** Change  ---> exists(X1:Int)[X1>=0&Ch(0,X1)] 


***************** Convergence Update Structure *****************:

--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
[Formula2]:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:


Checking A model: ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

State q2: N models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]

****** Generate new conjuncts
------Step 1: number of mappings (34)
------Step 1: number of mappings after filter (34)
------Step 1: number of conjunct (34)
------Step 1: number of conjunct after free-var filter (34)
------Step 1: number of conjunct after MC (34)
------Step 1: number of sub-conjunct (51)
------Step 1: number of sub-conjunct after MC (51)
------Step 2: number of mappings (3684)
------Step 2: number of mappings after filter (3684)
------Step 2: number of conjunct (3684)
------Step 2: number of conjunct after free-var filter (2316)
------Step 2: number of conjunct after MC (2044)
***** Change  ---> exists(X1:Int)[X1>=0&Ch(1,X1)] 


***************** Convergence Update Structure *****************:

--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:


Checking A model: ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

State q2: N models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]

****** Generate adjacent conjuncts for  exists(X1:Int)[X1>=0&Ch(1,X1)]
------Number of sub-conjunct (1)

(B0)-----Generate conjuncts for 
------Step 1: number of sub-conjunct (51)
------Step 1: number of sub-conjunct after MC (51)
------Step 2: number of mappings (3684)
------Step 2: number of mappings after filter (3684)
------Step 2: number of conjunct (3684)
------Step 2: number of conjunct after free-var filter (2316)
------Step 2: number of conjunct after MC (2044)

****** Generate new conjuncts
------Step 1: number of mappings (33)
------Step 1: number of mappings after filter (33)
------Step 1: number of conjunct (33)
------Step 1: number of conjunct after free-var filter (33)
------Step 1: number of conjunct after MC (33)
------Step 1: number of sub-conjunct (50)
------Step 1: number of sub-conjunct after MC (50)
------Step 2: number of mappings (3490)
------Step 2: number of mappings after filter (3490)
------Step 2: number of conjunct (3490)
------Step 2: number of conjunct after free-var filter (2180)
------Step 2: number of conjunct after MC (1928)
***** Change  ---> exists(X1:Int)[X1>=0&Ch(0,X1)] 


***************** Convergence Update Structure *****************:

--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]

****** Generate adjacent conjuncts for  exists(X1:Int)[X1>=0&Ch(0,X1)]
------Number of sub-conjunct (1)

(B0)-----Generate conjuncts for 
------Step 1: number of sub-conjunct (49)
------Step 1: number of sub-conjunct after MC (49)
------Step 2: number of mappings (3300)
------Step 2: number of mappings after filter (3300)
------Step 2: number of conjunct (3300)
------Step 2: number of conjunct after free-var filter (2048)
------Step 2: number of conjunct after MC (1812)

****** Change exists(X1:Int)[X1>=0&Ch(0,X1)] ---> exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)] 


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


['sat\n', '(model \n', '  ;; universe for _S1:\n', '  ;;   _S1!val!1 _S1!val!0 \n', '  ;; -----------\n', '  ;; definitions for universe elements:\n', '  (declare-fun _S1!val!1 () _S1)\n', '  
(declare-fun _S1!val!0 () _S1)\n', '  ;; cardinality constraint:\n', '  
(forall ((x _S1)) (or (= x _S1!val!1) (= x _S1!val!0)))\n', '  ;; -----------\n', '  
(define-fun p1 () _S1\n', '    _S1!val!0)\n', '  
(define-fun p2 () _S1\n', '    _S1!val!1)\n', '  
(define-fun xlen () Int\n', '    2)\n', '  
(define-fun ylen () Int\n', '    2)\n', '  
(define-fun True () Bool\n', '    false)\n', '  
(define-fun False () Bool\n', '    false)\n', '  

(define-fun Ch ((x!0 Int) (x!1 Int)) Bool\n', '    
(let ((a!1 
(ite (<= 0 x!0) (ite (<= 1 x!0) (ite (<= 2 x!0) 2 1) 0) (- 1))
)\n', '          
(a!2 (ite (<= 0 x!1) (ite (<= 1 x!1) (ite (<= 2 x!1) 2 1) 0) (- 1))))\n', '      
(or 
(and (= a!1 0) (= a!2 1)) 
(and (= a!1 1) (= a!2 0))
)
)
)


Ch=lambda x0,x1: 
(
((2 if 2 <= x0 else 1 if 1 <= x0 else 0 if 0 <= x0 else -1) == (0)) 
and 
((2 if 2 <= x1 else 1 if 1 <= x1 else 0 if 0 <= x1 else -1) == (1))

) or 

(((2 if 2 <= x0 else 1 if 1 <= x0 else 0 if 0 <= x0 else -1) == (1)) and ((2 if 2 <= x1 else 1 if 1 <= x1 else 0 if 0 <= x1 else -1) == (0)))


\n', '  (define-fun turn ((x!0 _S1)) Bool\n', '    (= x!0 _S1!val!0))\n', ')\n']



***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]


***************** P Update Structure *****************:


--------------------------
[Structure1]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

#conjuncts:
(0):(['G0'], ['Int'], ['G0 = 0', 'Ch(0,G0)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Structure2]
#Goal:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
#(+)model:
  

#conjuncts:
(0):(['X1'], ['Int'], ['Ch(1,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'True', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'False'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

(1):(['X1'], ['Int'], ['Ch(0,X1)'])
  ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'False', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(0,0)': 'True', 'xlen()': '2', 'turn(p1)': 'False', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})


[Formula1]: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
[Formula2]:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
~~~~~~~~~~~~~~~~~~~~~~~~~~


***************** Checking Convergence *****************:



***************** Checking DS0 *****************:


DS0 model:({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

DS0 progressed updated model:

---------------------------------------------------
State q1: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2'], 'Bool': ['True', 'False']}, {'Ch(1,1)': 'False', 'Ch(1,0)': 'True', 'Ch(0,2)': 'False', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(0,0)': 'False', 'xlen()': '2', 'turn(p1)': 'True', 'Ch(2,0)': 'False', 'Ch(2,2)': 'False', 'ylen()': '2', 'Ch(1,2)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]

[Finished in 15.5s with exit code -9]
[shell_cmd: python -u "/Users/luokailun/Documents/GitHub3/synthesizer/test.py"]
[dir: /Users/luokailun/Documents/GitHub3/synthesizer]
[path: /Library/Frameworks/Python.framework/Versions/3.7/bin:/Users/luokailun/install/Gcc/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin]2019-10-12 14:18:57,975 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:!Ch(1,1)&Ch(1,0)&!Ch(2,0)&!Ch(2,1)&!turn(p2)&!Ch(2,2)&turn(p1)&ylen()=2&!Ch(1,2)&!Ch(0,2)&!Ch(0,0)&xlen()=2&Ch(0,1)
 f2: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
2019-10-12 14:19:08,125 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:!Ch(1,1)&Ch(1,0)&!Ch(2,0)&!Ch(2,1)&!turn(p2)&!Ch(2,2)&turn(p1)&ylen()=2&!Ch(1,2)&!Ch(0,2)&!Ch(0,0)&xlen()=2&Ch(0,1)
 f2: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
2019-10-12 14:20:37,307 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:!Ch(1,1)&Ch(1,0)&!Ch(2,0)&!Ch(2,1)&!turn(p2)&!Ch(2,2)&turn(p1)&ylen()=2&!Ch(1,2)&!Ch(0,2)&!Ch(0,0)&xlen()=2&Ch(0,1)
 f2: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
2019-10-12 14:21:44,515 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:!Ch(1,1)&Ch(1,0)&!Ch(2,0)&!Ch(2,1)&!turn(p2)&!Ch(2,2)&turn(p1)&ylen()=2&!Ch(1,2)&!Ch(0,2)&!Ch(0,0)&xlen()=2&Ch(0,1)
 f2: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
2019-10-12 14:24:40,809 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
2019-10-12 14:25:11,363 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:!Ch(1,1)&Ch(1,0)&!Ch(2,0)&!Ch(2,1)&!turn(p2)&!Ch(2,2)&turn(p1)&ylen()=2&!Ch(1,2)&!Ch(0,2)&!Ch(0,0)&xlen()=2&Ch(0,1)
 f2:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
2019-10-12 14:25:11,401 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
2019-10-12 14:27:01,196 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:!Ch(1,1)&Ch(1,0)&!Ch(2,0)&!Ch(2,1)&!turn(p2)&!Ch(2,2)&turn(p1)&ylen()=2&!Ch(1,2)&!Ch(0,2)&!Ch(0,0)&xlen()=2&Ch(0,1)
 f2:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
2019-10-12 14:27:01,240 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
2019-10-12 14:27:03,867 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:!Ch(1,1)&Ch(1,0)&!Ch(2,0)&!Ch(2,1)&!turn(p2)&!Ch(2,2)&turn(p1)&ylen()=2&!Ch(1,2)&!Ch(0,2)&!Ch(0,0)&xlen()=2&Ch(0,1)
 f2:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
2019-10-12 14:27:03,921 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
2019-10-12 15:01:01,302 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:!Ch(1,1)&Ch(1,0)&!Ch(2,0)&!Ch(2,1)&!turn(p2)&!Ch(2,2)&turn(p1)&ylen()=2&!Ch(1,2)&!Ch(0,2)&!Ch(0,0)&xlen()=2&Ch(0,1)
 f2:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
2019-10-12 15:01:20,321 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:!Ch(1,1)&Ch(1,0)&!Ch(2,0)&!Ch(2,1)&!turn(p2)&!Ch(2,2)&turn(p1)&ylen()=2&!Ch(1,2)&!Ch(0,2)&!Ch(0,0)&xlen()=2&Ch(0,1)
 f2:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
2019-10-12 15:01:30,688 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:!Ch(1,1)&Ch(1,0)&!Ch(2,0)&!Ch(2,1)&!turn(p2)&!Ch(2,2)&turn(p1)&ylen()=2&!Ch(1,2)&!Ch(0,2)&!Ch(0,0)&xlen()=2&Ch(0,1)
 f2:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
2019-10-12 15:02:02,902 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:!Ch(1,1)&Ch(1,0)&!Ch(2,0)&!Ch(2,1)&!turn(p2)&!Ch(2,2)&turn(p1)&ylen()=2&!Ch(1,2)&!Ch(0,2)&!Ch(0,0)&xlen()=2&Ch(0,1)
 f2:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
2019-10-12 15:02:02,944 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
2019-10-12 15:04:43,564 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:!Ch(1,1)&Ch(1,0)&!Ch(2,0)&!Ch(2,1)&!turn(p2)&!Ch(2,2)&turn(p1)&ylen()=2&!Ch(1,2)&!Ch(0,2)&!Ch(0,0)&xlen()=2&Ch(0,1)
 f2:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
2019-10-12 15:04:43,601 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
2019-10-12 15:08:09,502 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
2019-10-12 15:13:13,607 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2: (( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&Ch(0,G0)])
2019-10-12 15:43:48,353 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K21:Int,K22:Int)[ (Ch(K21,K22)&turn(p1)&K21>=0&K21<xlen()&K22>=0&K22<ylen())&(( !(Ch(0,0)&(K21>0|K22>0)) ) => ( !(Ch(0,0)&(K21>0|K22>0))&(!turn(p1)) )) ])
2019-10-12 15:43:48,404 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K19:Int,K20:Int)[ Ch(K19,K20)&turn(p2)&K19>=0&K19<xlen()&K20>=0&K20<ylen()=>(( !(Ch(0,0)&(K19>0|K20>0)) ) => ( !(Ch(0,0)&(K19>0|K20>0))&(!turn(p1)) )) ]
2019-10-12 15:43:48,603 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
 f2:!(!Ch(0,0))=>(exists(K25:Int,K26:Int)[ (Ch(K25,K26)&turn(p1)&K25>=0&K25<xlen()&K26>=0&K26<ylen())&(( !(Ch(0,0)&(K25>0|K26>0)) ) => ( !(Ch(0,0)&(K25>0|K26>0))&(!turn(p1)) )) ])
2019-10-12 15:43:48,637 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K23:Int,K24:Int)[ Ch(K23,K24)&turn(p2)&K23>=0&K23<xlen()&K24>=0&K24<ylen()=>((( !(Ch(0,0)&(K23>0|K24>0)) ) => ( !(Ch(0,0)&(K23>0|K24>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(0,X1)&(K23>0|K24>X1))])) ]
2019-10-12 15:43:49,005 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
 f2:!(!Ch(0,0))=>(exists(K29:Int,K30:Int)[ (Ch(K29,K30)&turn(p1)&K29>=0&K29<xlen()&K30>=0&K30<ylen())&((( !(Ch(0,0)&(K29>0|K30>0)) ) => ( !(Ch(0,0)&(K29>0|K30>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(1,X1)&(K29>1|K30>X1))])) ])
2019-10-12 15:43:49,040 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])
 f2:forall(K27:Int,K28:Int)[ Ch(K27,K28)&turn(p2)&K27>=0&K27<xlen()&K28>=0&K28<ylen()=>((( !(Ch(0,0)&(K27>0|K28>0)) ) => ( !(Ch(0,0)&(K27>0|K28>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(0,X1)&(K27>0|K28>X1))])) ]
2019-10-12 15:43:49,087 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])
 f2:forall(K27:Int,K28:Int)[ Ch(K27,K28)&turn(p2)&K27>=0&K27<xlen()&K28>=0&K28<ylen()=>((( !(Ch(0,0)&(K27>0|K28>0)) ) => ( !(Ch(0,0)&(K27>0|K28>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(0,X1)&(K27>0|K28>X1))])) ]
2019-10-12 15:43:49,682 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
 f2:!(!Ch(0,0))=>(exists(K33:Int,K34:Int)[ (Ch(K33,K34)&turn(p1)&K33>=0&K33<xlen()&K34>=0&K34<ylen())&((( !(Ch(0,0)&(K33>0|K34>0)) ) => ( !(Ch(0,0)&(K33>0|K34>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(1,X1)&(K33>1|K34>X1))])&!(exists(X1:Int)[X1>=0&(Ch(0,X1)&(K33>0|K34>X1))])) ])
2019-10-12 15:43:49,718 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
 f2:forall(K31:Int,K32:Int)[ Ch(K31,K32)&turn(p2)&K31>=0&K31<xlen()&K32>=0&K32<ylen()=>((( !(Ch(0,0)&(K31>0|K32>0)) ) => ( !(Ch(0,0)&(K31>0|K32>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(0,X1)&(K31>0|K32>X1))])) ]
2019-10-12 15:43:49,747 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
2019-10-12 15:43:50,818 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! Ch(1,G0)])
 f2:!(!Ch(0,0))=>(exists(K37:Int,K38:Int)[ (Ch(K37,K38)&turn(p1)&K37>=0&K37<xlen()&K38>=0&K38<ylen())&((( !(Ch(0,0)&(K37>0|K38>0)) ) => ( !(Ch(0,0)&(K37>0|K38>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(1,G0)&(K37>1|K38>G0))])&!(exists(G0:Int)[G0>=0&G0 = 0&! (Ch(1,G0)&(K37>1|K38>G0))])) ])
2019-10-12 15:43:50,865 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(1,G0)])&!(exists(G0:Int)[G0>=0&G0 = 0&! Ch(1,G0)])
 f2:forall(K35:Int,K36:Int)[ Ch(K35,K36)&turn(p2)&K35>=0&K35<xlen()&K36>=0&K36<ylen()=>((( !(Ch(0,0)&(K35>0|K36>0)) ) => ( !(Ch(0,0)&(K35>0|K36>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! (Ch(1,G0)&(K35>1|K36>G0))])) ]
2019-10-12 15:43:51,508 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! Ch(1,G0)])
 f2:!(!Ch(0,0))=>(exists(K41:Int,K42:Int)[ (Ch(K41,K42)&turn(p1)&K41>=0&K41<xlen()&K42>=0&K42<ylen())&((( !(Ch(0,0)&(K41>0|K42>0)) ) => ( !(Ch(0,0)&(K41>0|K42>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(1,G0)&(K41>1|K42>G0))])&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K41>0|K42>G0))&! (Ch(G0,0)&(K41>G0|K42>0))])) ])
2019-10-12 15:43:51,572 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! Ch(1,G0)])
 f2:!(!Ch(0,0))=>(exists(K41:Int,K42:Int)[ (Ch(K41,K42)&turn(p1)&K41>=0&K41<xlen()&K42>=0&K42<ylen())&((( !(Ch(0,0)&(K41>0|K42>0)) ) => ( !(Ch(0,0)&(K41>0|K42>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(1,G0)&(K41>1|K42>G0))])&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K41>0|K42>G0))&! (Ch(G0,0)&(K41>G0|K42>0))])) ])
2019-10-12 15:43:51,610 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(1,G0)])&!(exists(G0:Int)[G0>=0&Ch(0,G0)&! Ch(G0,0)])
 f2:forall(K39:Int,K40:Int)[ Ch(K39,K40)&turn(p2)&K39>=0&K39<xlen()&K40>=0&K40<ylen()=>((( !(Ch(0,0)&(K39>0|K40>0)) ) => ( !(Ch(0,0)&(K39>0|K40>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! (Ch(1,G0)&(K39>1|K40>G0))])) ]
2019-10-12 15:43:52,665 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! Ch(1,G0)])&!(turn(p2))
 f2:!(!Ch(0,0))=>(exists(K45:Int,K46:Int)[ (Ch(K45,K46)&turn(p1)&K45>=0&K45<xlen()&K46>=0&K46<ylen())&((( !(Ch(0,0)&(K45>0|K46>0)) ) => ( !(Ch(0,0)&(K45>0|K46>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K45>0|K46>G0))&! (Ch(G0,0)&(K45>G0|K46>0))])&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K45>1|K46>G0))&! (Ch(0,1)&(K45>0|K46>1))])) ])
2019-10-12 15:43:52,979 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! Ch(1,G0)])&!(turn(p2))
 f2:!(!Ch(0,0))=>(exists(K45:Int,K46:Int)[ (Ch(K45,K46)&turn(p1)&K45>=0&K45<xlen()&K46>=0&K46<ylen())&((( !(Ch(0,0)&(K45>0|K46>0)) ) => ( !(Ch(0,0)&(K45>0|K46>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K45>0|K46>G0))&! (Ch(G0,0)&(K45>G0|K46>0))])&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K45>1|K46>G0))&! (Ch(0,1)&(K45>0|K46>1))])) ])
2019-10-12 15:43:53,032 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&Ch(0,G0)&! Ch(G0,0)])&!(exists(G0:Int)[G0>=0&Ch(1,G0)&! Ch(0,1)])
 f2:forall(K43:Int,K44:Int)[ Ch(K43,K44)&turn(p2)&K43>=0&K43<xlen()&K44>=0&K44<ylen()=>((( !(Ch(0,0)&(K43>0|K44>0)) ) => ( !(Ch(0,0)&(K43>0|K44>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! (Ch(1,G0)&(K43>1|K44>G0))])&!((!turn(p2)))) ]
2019-10-12 15:43:53,742 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(turn(p2))&!(exists(G0:Int)[G0>=0&Ch(0,G0)&turn(p2)])
 f2:!(!Ch(0,0))=>(exists(K49:Int,K50:Int)[ (Ch(K49,K50)&turn(p1)&K49>=0&K49<xlen()&K50>=0&K50<ylen())&((( !(Ch(0,0)&(K49>0|K50>0)) ) => ( !(Ch(0,0)&(K49>0|K50>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K49>0|K50>G0))&! (Ch(G0,0)&(K49>G0|K50>0))])&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K49>1|K50>G0))&! (Ch(0,1)&(K49>0|K50>1))])) ])
2019-10-12 15:43:53,781 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&Ch(0,G0)&! Ch(G0,0)])&!(exists(G0:Int)[G0>=0&Ch(1,G0)&! Ch(0,1)])
 f2:forall(K47:Int,K48:Int)[ Ch(K47,K48)&turn(p2)&K47>=0&K47<xlen()&K48>=0&K48<ylen()=>((( !(Ch(0,0)&(K47>0|K48>0)) ) => ( !(Ch(0,0)&(K47>0|K48>0))&(!turn(p1)) ))&!((!turn(p2)))&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K47>0|K48>G0))&(!turn(p2))])) ]
2019-10-12 15:43:55,698 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K53:Int,K54:Int)[ (Ch(K53,K54)&turn(p1)&K53>=0&K53<xlen()&K54>=0&K54<ylen())&(( !(Ch(0,0)&(K53>0|K54>0)) ) => ( !(Ch(0,0)&(K53>0|K54>0))&(!turn(p1)) )) ])
2019-10-12 15:43:55,745 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K51:Int,K52:Int)[ Ch(K51,K52)&turn(p2)&K51>=0&K51<xlen()&K52>=0&K52<ylen()=>(( !(Ch(0,0)&(K51>0|K52>0)) ) => ( !(Ch(0,0)&(K51>0|K52>0))&(!turn(p1)) )) ]
2019-10-12 15:43:55,918 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(X1,0)])
 f2:!(!Ch(0,0))=>(exists(K57:Int,K58:Int)[ (Ch(K57,K58)&turn(p1)&K57>=0&K57<xlen()&K58>=0&K58<ylen())&(( !(Ch(0,0)&(K57>0|K58>0)) ) => ( !(Ch(0,0)&(K57>0|K58>0))&(!turn(p1)) )) ])
2019-10-12 15:43:55,952 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K55:Int,K56:Int)[ Ch(K55,K56)&turn(p2)&K55>=0&K55<xlen()&K56>=0&K56<ylen()=>((( !(Ch(0,0)&(K55>0|K56>0)) ) => ( !(Ch(0,0)&(K55>0|K56>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(X1,0)&(K55>X1|K56>0))])) ]
2019-10-12 15:43:56,337 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(X1,0)])
 f2:!(!Ch(0,0))=>(exists(K61:Int,K62:Int)[ (Ch(K61,K62)&turn(p1)&K61>=0&K61<xlen()&K62>=0&K62<ylen())&((( !(Ch(0,0)&(K61>0|K62>0)) ) => ( !(Ch(0,0)&(K61>0|K62>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(X1,1)&(K61>X1|K62>1))])) ])
2019-10-12 15:43:56,371 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(X1,1)])
 f2:forall(K59:Int,K60:Int)[ Ch(K59,K60)&turn(p2)&K59>=0&K59<xlen()&K60>=0&K60<ylen()=>((( !(Ch(0,0)&(K59>0|K60>0)) ) => ( !(Ch(0,0)&(K59>0|K60>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(X1,0)&(K59>X1|K60>0))])) ]
2019-10-12 15:43:56,416 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(X1,1)])
 f2:forall(K59:Int,K60:Int)[ Ch(K59,K60)&turn(p2)&K59>=0&K59<xlen()&K60>=0&K60<ylen()=>((( !(Ch(0,0)&(K59>0|K60>0)) ) => ( !(Ch(0,0)&(K59>0|K60>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(X1,0)&(K59>X1|K60>0))])) ]
2019-10-12 15:43:57,044 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(X1,0)])
 f2:!(!Ch(0,0))=>(exists(K65:Int,K66:Int)[ (Ch(K65,K66)&turn(p1)&K65>=0&K65<xlen()&K66>=0&K66<ylen())&((( !(Ch(0,0)&(K65>0|K66>0)) ) => ( !(Ch(0,0)&(K65>0|K66>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(X1,1)&(K65>X1|K66>1))])&!(exists(X1:Int)[X1>=0&(Ch(X1,0)&(K65>X1|K66>0))])) ])
2019-10-12 15:43:57,081 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(X1,1)])&!(exists(X1:Int)[X1>=0&Ch(X1,0)])
 f2:forall(K63:Int,K64:Int)[ Ch(K63,K64)&turn(p2)&K63>=0&K63<xlen()&K64>=0&K64<ylen()=>((( !(Ch(0,0)&(K63>0|K64>0)) ) => ( !(Ch(0,0)&(K63>0|K64>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(X1,0)&(K63>X1|K64>0))])) ]
2019-10-12 15:43:57,112 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(X1,0)])
2019-10-12 15:43:58,070 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])
 f2:!(!Ch(0,0))=>(exists(K69:Int,K70:Int)[ (Ch(K69,K70)&turn(p1)&K69>=0&K69<xlen()&K70>=0&K70<ylen())&((( !(Ch(0,0)&(K69>0|K70>0)) ) => ( !(Ch(0,0)&(K69>0|K70>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&(Ch(G0,1)&(K69>G0|K70>1))])&!(exists(G0:Int)[G0>=0&G0 = 1&! (Ch(0,G0)&(K69>0|K70>G0))])) ])
2019-10-12 15:43:58,120 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])
 f2:!(!Ch(0,0))=>(exists(K69:Int,K70:Int)[ (Ch(K69,K70)&turn(p1)&K69>=0&K69<xlen()&K70>=0&K70<ylen())&((( !(Ch(0,0)&(K69>0|K70>0)) ) => ( !(Ch(0,0)&(K69>0|K70>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&(Ch(G0,1)&(K69>G0|K70>1))])&!(exists(G0:Int)[G0>=0&G0 = 1&! (Ch(0,G0)&(K69>0|K70>G0))])) ])
2019-10-12 15:43:58,159 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&Ch(G0,1)])&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])
 f2:forall(K67:Int,K68:Int)[ Ch(K67,K68)&turn(p2)&K67>=0&K67<xlen()&K68>=0&K68<ylen()=>((( !(Ch(0,0)&(K67>0|K68>0)) ) => ( !(Ch(0,0)&(K67>0|K68>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! (Ch(0,G0)&(K67>0|K68>G0))])) ]
2019-10-12 15:43:58,757 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])
 f2:!(!Ch(0,0))=>(exists(K73:Int,K74:Int)[ (Ch(K73,K74)&turn(p1)&K73>=0&K73<xlen()&K74>=0&K74<ylen())&((( !(Ch(0,0)&(K73>0|K74>0)) ) => ( !(Ch(0,0)&(K73>0|K74>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&(Ch(G0,1)&(K73>G0|K74>1))])&!(exists(G0:Int)[G0>=0&(Ch(G0,0)&(K73>G0|K74>0))&! (Ch(0,G0)&(K73>0|K74>G0))])) ])
2019-10-12 15:43:58,803 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])
 f2:!(!Ch(0,0))=>(exists(K73:Int,K74:Int)[ (Ch(K73,K74)&turn(p1)&K73>=0&K73<xlen()&K74>=0&K74<ylen())&((( !(Ch(0,0)&(K73>0|K74>0)) ) => ( !(Ch(0,0)&(K73>0|K74>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&(Ch(G0,1)&(K73>G0|K74>1))])&!(exists(G0:Int)[G0>=0&(Ch(G0,0)&(K73>G0|K74>0))&! (Ch(0,G0)&(K73>0|K74>G0))])) ])
2019-10-12 15:43:58,843 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&Ch(G0,1)])&!(exists(G0:Int)[G0>=0&Ch(G0,0)&! Ch(0,G0)])
 f2:forall(K71:Int,K72:Int)[ Ch(K71,K72)&turn(p2)&K71>=0&K71<xlen()&K72>=0&K72<ylen()=>((( !(Ch(0,0)&(K71>0|K72>0)) ) => ( !(Ch(0,0)&(K71>0|K72>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! (Ch(0,G0)&(K71>0|K72>G0))])) ]
2019-10-12 15:43:59,856 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])&!(! Ch(1,1))
 f2:!(!Ch(0,0))=>(exists(K77:Int,K78:Int)[ (Ch(K77,K78)&turn(p1)&K77>=0&K77<xlen()&K78>=0&K78<ylen())&((( !(Ch(0,0)&(K77>0|K78>0)) ) => ( !(Ch(0,0)&(K77>0|K78>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(Ch(G0,0)&(K77>G0|K78>0))&! (Ch(0,G0)&(K77>0|K78>G0))])&!(exists(G0:Int)[G0>=0&(Ch(G0,1)&(K77>G0|K78>1))&! (Ch(1,0)&(K77>1|K78>0))])) ])
2019-10-12 15:44:00,180 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])&!(! Ch(1,1))
 f2:!(!Ch(0,0))=>(exists(K77:Int,K78:Int)[ (Ch(K77,K78)&turn(p1)&K77>=0&K77<xlen()&K78>=0&K78<ylen())&((( !(Ch(0,0)&(K77>0|K78>0)) ) => ( !(Ch(0,0)&(K77>0|K78>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(Ch(G0,0)&(K77>G0|K78>0))&! (Ch(0,G0)&(K77>0|K78>G0))])&!(exists(G0:Int)[G0>=0&(Ch(G0,1)&(K77>G0|K78>1))&! (Ch(1,0)&(K77>1|K78>0))])) ])
2019-10-12 15:44:00,224 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&Ch(G0,0)&! Ch(0,G0)])&!(exists(G0:Int)[G0>=0&Ch(G0,1)&! Ch(1,0)])
 f2:forall(K75:Int,K76:Int)[ Ch(K75,K76)&turn(p2)&K75>=0&K75<xlen()&K76>=0&K76<ylen()=>((( !(Ch(0,0)&(K75>0|K76>0)) ) => ( !(Ch(0,0)&(K75>0|K76>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! (Ch(0,G0)&(K75>0|K76>G0))])&!(! (Ch(1,1)&(K75>1|K76>1)))) ]
2019-10-12 15:44:00,973 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&Ch(G0,0)&! turn(p1)])&!(exists(G0:Int)[G0>=0&Ch(G0,1)&! turn(p1)])
 f2:!(!Ch(0,0))=>(exists(K81:Int,K82:Int)[ (Ch(K81,K82)&turn(p1)&K81>=0&K81<xlen()&K82>=0&K82<ylen())&((( !(Ch(0,0)&(K81>0|K82>0)) ) => ( !(Ch(0,0)&(K81>0|K82>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(Ch(G0,0)&(K81>G0|K82>0))&! (Ch(0,G0)&(K81>0|K82>G0))])&!(exists(G0:Int)[G0>=0&(Ch(G0,1)&(K81>G0|K82>1))&! (Ch(1,0)&(K81>1|K82>0))])) ])
2019-10-12 15:44:01,016 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&Ch(G0,0)&! Ch(0,G0)])&!(exists(G0:Int)[G0>=0&Ch(G0,1)&! Ch(1,0)])
 f2:forall(K79:Int,K80:Int)[ Ch(K79,K80)&turn(p2)&K79>=0&K79<xlen()&K80>=0&K80<ylen()=>((( !(Ch(0,0)&(K79>0|K80>0)) ) => ( !(Ch(0,0)&(K79>0|K80>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(Ch(G0,0)&(K79>G0|K80>0))&! (!turn(p1))])&!(exists(G0:Int)[G0>=0&(Ch(G0,1)&(K79>G0|K80>1))&! (!turn(p1))])) ]
2019-10-12 15:44:02,614 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K85:Int,K86:Int)[ (Ch(K85,K86)&turn(p1)&K85>=0&K85<xlen()&K86>=0&K86<ylen())&(( !(Ch(0,0)&(K85>0|K86>0)) ) => ( !(Ch(0,0)&(K85>0|K86>0))&(!turn(p1)) )) ])
2019-10-12 15:44:02,659 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K83:Int,K84:Int)[ Ch(K83,K84)&turn(p2)&K83>=0&K83<xlen()&K84>=0&K84<ylen()=>(( !(Ch(0,0)&(K83>0|K84>0)) ) => ( !(Ch(0,0)&(K83>0|K84>0))&(!turn(p1)) )) ]
2019-10-12 15:44:02,846 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(Y10:Int,Y11:Int)[Y10>=0&Y11>=0&Ch(Y10,Y11)])
 f2:!(!Ch(0,0))=>(exists(K89:Int,K90:Int)[ (Ch(K89,K90)&turn(p1)&K89>=0&K89<xlen()&K90>=0&K90<ylen())&(( !(Ch(0,0)&(K89>0|K90>0)) ) => ( !(Ch(0,0)&(K89>0|K90>0))&(!turn(p1)) )) ])
2019-10-12 15:44:02,880 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K87:Int,K88:Int)[ Ch(K87,K88)&turn(p2)&K87>=0&K87<xlen()&K88>=0&K88<ylen()=>((( !(Ch(0,0)&(K87>0|K88>0)) ) => ( !(Ch(0,0)&(K87>0|K88>0))&(!turn(p1)) ))&!(exists(Y10:Int,Y11:Int)[Y10>=0&Y11>=0&(Ch(Y10,Y11)&(K87>Y10|K88>Y11))])) ]
2019-10-12 15:44:03,262 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(Y10:Int,Y11:Int)[Y10>=0&Y11>=0&Ch(Y10,Y11)])
 f2:!(!Ch(0,0))=>(exists(K93:Int,K94:Int)[ (Ch(K93,K94)&turn(p1)&K93>=0&K93<xlen()&K94>=0&K94<ylen())&((( !(Ch(0,0)&(K93>0|K94>0)) ) => ( !(Ch(0,0)&(K93>0|K94>0))&(!turn(p1)) ))&!(exists(Y10:Int,Y11:Int)[Y10>=0&Y11>=0&(Ch(Y10,Y11)&(K93>Y10|K94>Y11))])) ])
2019-10-12 15:44:03,297 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(Y10:Int,Y11:Int)[Y10>=0&Y11>=0&Ch(Y10,Y11)])
 f2:forall(K91:Int,K92:Int)[ Ch(K91,K92)&turn(p2)&K91>=0&K91<xlen()&K92>=0&K92<ylen()=>((( !(Ch(0,0)&(K91>0|K92>0)) ) => ( !(Ch(0,0)&(K91>0|K92>0))&(!turn(p1)) ))&!(exists(Y10:Int,Y11:Int)[Y10>=0&Y11>=0&(Ch(Y10,Y11)&(K91>Y10|K92>Y11))])) ]
2019-10-12 15:44:03,326 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(Y10:Int,Y11:Int)[Y10>=0&Y11>=0&Ch(Y10,Y11)])
2019-10-12 15:44:03,400 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(Y10:Int,Y11:Int)[Y10>=0&Y11>=0&Ch(Y10,Y11)])
2019-10-12 15:44:04,282 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(G0,1)])
 f2:!(!Ch(0,0))=>(exists(K97:Int,K98:Int)[ (Ch(K97,K98)&turn(p1)&K97>=0&K97<xlen()&K98>=0&K98<ylen())&((( !(Ch(0,0)&(K97>0|K98>0)) ) => ( !(Ch(0,0)&(K97>0|K98>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 >= 1&(Ch(G0,G0)&(K97>G0|K98>G0))])) ])
2019-10-12 15:44:04,338 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(G0,1)])
 f2:!(!Ch(0,0))=>(exists(K97:Int,K98:Int)[ (Ch(K97,K98)&turn(p1)&K97>=0&K97<xlen()&K98>=0&K98<ylen())&((( !(Ch(0,0)&(K97>0|K98>0)) ) => ( !(Ch(0,0)&(K97>0|K98>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 >= 1&(Ch(G0,G0)&(K97>G0|K98>G0))])) ])
2019-10-12 15:44:04,376 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 >= 1&Ch(G0,G0)])
 f2:forall(K95:Int,K96:Int)[ Ch(K95,K96)&turn(p2)&K95>=0&K95<xlen()&K96>=0&K96<ylen()=>((( !(Ch(0,0)&(K95>0|K96>0)) ) => ( !(Ch(0,0)&(K95>0|K96>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! (Ch(G0,1)&(K95>G0|K96>1))])) ]
2019-10-12 15:44:05,377 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(G0,1)])&!(! Ch(1,0))
 f2:!(!Ch(0,0))=>(exists(K101:Int,K102:Int)[ (Ch(K101,K102)&turn(p1)&K101>=0&K101<xlen()&K102>=0&K102<ylen())&((( !(Ch(0,0)&(K101>0|K102>0)) ) => ( !(Ch(0,0)&(K101>0|K102>0))&(!turn(p1)) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K101>G0|K102>G1))&! (Ch(G1,G0)&(K101>G1|K102>G0))])) ])
2019-10-12 15:44:05,510 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(G0,1)])&!(! Ch(1,0))
 f2:!(!Ch(0,0))=>(exists(K101:Int,K102:Int)[ (Ch(K101,K102)&turn(p1)&K101>=0&K101<xlen()&K102>=0&K102<ylen())&((( !(Ch(0,0)&(K101>0|K102>0)) ) => ( !(Ch(0,0)&(K101>0|K102>0))&(!turn(p1)) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K101>G0|K102>G1))&! (Ch(G1,G0)&(K101>G1|K102>G0))])) ])
2019-10-12 15:44:05,569 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,G0)])
 f2:forall(K99:Int,K100:Int)[ Ch(K99,K100)&turn(p2)&K99>=0&K99<xlen()&K100>=0&K100<ylen()=>((( !(Ch(0,0)&(K99>0|K100>0)) ) => ( !(Ch(0,0)&(K99>0|K100>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! (Ch(G0,1)&(K99>G0|K100>1))])&!(! (Ch(1,0)&(K99>1|K100>0)))) ]
2019-10-12 15:44:14,508 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(G0,1)])&!(! Ch(1,0))&!(turn(p2))
 f2:!(!Ch(0,0))=>(exists(K105:Int,K106:Int)[ (Ch(K105,K106)&turn(p1)&K105>=0&K105<xlen()&K106>=0&K106<ylen())&((( !(Ch(0,0)&(K105>0|K106>0)) ) => ( !(Ch(0,0)&(K105>0|K106>0))&(!turn(p1)) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K105>G0|K106>G1))&! (Ch(G1,G0)&(K105>G1|K106>G0))])&!((Ch(1,1)&(K105>1|K106>1)))) ])
2019-10-12 15:44:14,632 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(G0,1)])&!(! Ch(1,0))&!(turn(p2))
 f2:!(!Ch(0,0))=>(exists(K105:Int,K106:Int)[ (Ch(K105,K106)&turn(p1)&K105>=0&K105<xlen()&K106>=0&K106<ylen())&((( !(Ch(0,0)&(K105>0|K106>0)) ) => ( !(Ch(0,0)&(K105>0|K106>0))&(!turn(p1)) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K105>G0|K106>G1))&! (Ch(G1,G0)&(K105>G1|K106>G0))])&!((Ch(1,1)&(K105>1|K106>1)))) ])
2019-10-12 15:44:14,672 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(G0,1)])&!(! Ch(1,0))&!(turn(p2))
 f2:!(!Ch(0,0))=>(exists(K105:Int,K106:Int)[ (Ch(K105,K106)&turn(p1)&K105>=0&K105<xlen()&K106>=0&K106<ylen())&((( !(Ch(0,0)&(K105>0|K106>0)) ) => ( !(Ch(0,0)&(K105>0|K106>0))&(!turn(p1)) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K105>G0|K106>G1))&! (Ch(G1,G0)&(K105>G1|K106>G0))])&!((Ch(1,1)&(K105>1|K106>1)))) ])
2019-10-12 15:44:14,735 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,G0)])&!(Ch(1,1))
 f2:forall(K103:Int,K104:Int)[ Ch(K103,K104)&turn(p2)&K103>=0&K103<xlen()&K104>=0&K104<ylen()=>((( !(Ch(0,0)&(K103>0|K104>0)) ) => ( !(Ch(0,0)&(K103>0|K104>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! (Ch(G0,1)&(K103>G0|K104>1))])&!(! (Ch(1,0)&(K103>1|K104>0)))&!((!turn(p2)))) ]
2019-10-12 15:44:14,769 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,G0)])&!(Ch(1,1))
 f2:forall(K103:Int,K104:Int)[ Ch(K103,K104)&turn(p2)&K103>=0&K103<xlen()&K104>=0&K104<ylen()=>((( !(Ch(0,0)&(K103>0|K104>0)) ) => ( !(Ch(0,0)&(K103>0|K104>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! (Ch(G0,1)&(K103>G0|K104>1))])&!(! (Ch(1,0)&(K103>1|K104>0)))&!((!turn(p2)))) ]
2019-10-12 15:44:20,866 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(turn(p2))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&turn(p2)])&!(exists(G0:Int)[G0>=0&Ch(1,G0)&! Ch(G0,0)])
 f2:!(!Ch(0,0))=>(exists(K109:Int,K110:Int)[ (Ch(K109,K110)&turn(p1)&K109>=0&K109<xlen()&K110>=0&K110<ylen())&((( !(Ch(0,0)&(K109>0|K110>0)) ) => ( !(Ch(0,0)&(K109>0|K110>0))&(!turn(p1)) ))&!((Ch(1,1)&(K109>1|K110>1)))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&! (Ch(G1,G0)&(K109>G1|K110>G0))&! G1 > 1&(Ch(G0,G0)&(K109>G0|K110>G0))])) ])
2019-10-12 15:44:20,910 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(Ch(1,1))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&! Ch(G1,G0)&! G1 > 1&Ch(G0,G0)])
 f2:forall(K107:Int,K108:Int)[ Ch(K107,K108)&turn(p2)&K107>=0&K107<xlen()&K108>=0&K108<ylen()=>((( !(Ch(0,0)&(K107>0|K108>0)) ) => ( !(Ch(0,0)&(K107>0|K108>0))&(!turn(p1)) ))&!((!turn(p2)))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K107>G0|K108>G1))&(!turn(p2))])&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K107>1|K108>G0))&! (Ch(G0,0)&(K107>G0|K108>0))])) ]
2019-10-12 15:44:20,951 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(Ch(1,1))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&! Ch(G1,G0)&! G1 > 1&Ch(G0,G0)])
 f2:forall(K107:Int,K108:Int)[ Ch(K107,K108)&turn(p2)&K107>=0&K107<xlen()&K108>=0&K108<ylen()=>((( !(Ch(0,0)&(K107>0|K108>0)) ) => ( !(Ch(0,0)&(K107>0|K108>0))&(!turn(p1)) ))&!((!turn(p2)))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K107>G0|K108>G1))&(!turn(p2))])&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K107>1|K108>G0))&! (Ch(G0,0)&(K107>G0|K108>0))])) ]
2019-10-12 15:44:20,982 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(Ch(1,1))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&! Ch(G1,G0)&! G1 > 1&Ch(G0,G0)])
 f2:forall(K107:Int,K108:Int)[ Ch(K107,K108)&turn(p2)&K107>=0&K107<xlen()&K108>=0&K108<ylen()=>((( !(Ch(0,0)&(K107>0|K108>0)) ) => ( !(Ch(0,0)&(K107>0|K108>0))&(!turn(p1)) ))&!((!turn(p2)))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K107>G0|K108>G1))&(!turn(p2))])&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K107>1|K108>G0))&! (Ch(G0,0)&(K107>G0|K108>0))])) ]
2019-10-12 15:44:24,897 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K113:Int,K114:Int)[ (Ch(K113,K114)&turn(p1)&K113>=0&K113<xlen()&K114>=0&K114<ylen())&(( !(Ch(0,0)&(K113>0|K114>0)) ) => ( !(Ch(0,0)&(K113>0|K114>0))&(!turn(p1)) )) ])
2019-10-12 15:44:24,945 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K111:Int,K112:Int)[ Ch(K111,K112)&turn(p2)&K111>=0&K111<xlen()&K112>=0&K112<ylen()=>(( !(Ch(0,0)&(K111>0|K112>0)) ) => ( !(Ch(0,0)&(K111>0|K112>0))&(!turn(p1)) )) ]
2019-10-12 15:44:25,127 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X0:_S1)[turn(X0)])
 f2:!(!Ch(0,0))=>(exists(K117:Int,K118:Int)[ (Ch(K117,K118)&turn(p1)&K117>=0&K117<xlen()&K118>=0&K118<ylen())&(( !(Ch(0,0)&(K117>0|K118>0)) ) => ( !(Ch(0,0)&(K117>0|K118>0))&(!turn(p1)) )) ])
2019-10-12 15:44:25,160 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K115:Int,K116:Int)[ Ch(K115,K116)&turn(p2)&K115>=0&K115<xlen()&K116>=0&K116<ylen()=>((( !(Ch(0,0)&(K115>0|K116>0)) ) => ( !(Ch(0,0)&(K115>0|K116>0))&(!turn(p1)) ))&!(exists(X0:_S1)[(!turn(X0))])) ]
2019-10-12 15:44:25,523 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X0:_S1)[turn(X0)])
 f2:!(!Ch(0,0))=>(exists(K121:Int,K122:Int)[ (Ch(K121,K122)&turn(p1)&K121>=0&K121<xlen()&K122>=0&K122<ylen())&((( !(Ch(0,0)&(K121>0|K122>0)) ) => ( !(Ch(0,0)&(K121>0|K122>0))&(!turn(p1)) ))&!(exists(X0:_S1)[(!turn(X0))])) ])
2019-10-12 15:44:25,559 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X0:_S1)[turn(X0)])
 f2:forall(K119:Int,K120:Int)[ Ch(K119,K120)&turn(p2)&K119>=0&K119<xlen()&K120>=0&K120<ylen()=>((( !(Ch(0,0)&(K119>0|K120>0)) ) => ( !(Ch(0,0)&(K119>0|K120>0))&(!turn(p1)) ))&!(exists(X0:_S1)[(!turn(X0))])) ]
2019-10-12 15:44:25,587 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X0:_S1)[turn(X0)])
2019-10-12 15:44:26,434 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:_S1)[turn(G0)&! Ch(0,1)])
 f2:!(!Ch(0,0))=>(exists(K125:Int,K126:Int)[ (Ch(K125,K126)&turn(p1)&K125>=0&K125<xlen()&K126>=0&K126<ylen())&((( !(Ch(0,0)&(K125>0|K126>0)) ) => ( !(Ch(0,0)&(K125>0|K126>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(G0,1)&(K125>G0|K126>1))])) ])
2019-10-12 15:44:26,486 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! Ch(G0,1)])
 f2:forall(K123:Int,K124:Int)[ Ch(K123,K124)&turn(p2)&K123>=0&K123<xlen()&K124>=0&K124<ylen()=>((( !(Ch(0,0)&(K123>0|K124>0)) ) => ( !(Ch(0,0)&(K123>0|K124>0))&(!turn(p1)) ))&!(exists(G0:_S1)[(!turn(G0))&! (Ch(0,1)&(K123>0|K124>1))])) ]
2019-10-12 15:44:27,588 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() > G0&! Ch(G0,G0)])
 f2:!(!Ch(0,0))=>(exists(K130:Int,K131:Int)[ (Ch(K130,K131)&turn(p1)&K130>=0&K130<xlen()&K131>=0&K131<ylen())&((( !(Ch(0,0)&(K130>0|K131>0)) ) => ( !(Ch(0,0)&(K130>0|K131>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(G0,1)&(K130>G0|K131>1))])&!((Ch(1,1)&(K130>1|K131>1)))) ])
2019-10-12 15:44:27,633 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() > G0&! Ch(G0,G0)])
 f2:!(!Ch(0,0))=>(exists(K130:Int,K131:Int)[ (Ch(K130,K131)&turn(p1)&K130>=0&K130<xlen()&K131>=0&K131<ylen())&((( !(Ch(0,0)&(K130>0|K131>0)) ) => ( !(Ch(0,0)&(K130>0|K131>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(G0,1)&(K130>G0|K131>1))])&!((Ch(1,1)&(K130>1|K131>1)))) ])
2019-10-12 15:44:27,668 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! Ch(G0,1)])&!(Ch(1,1))
 f2:forall(K127:Int,K128:Int)[ Ch(K127,K128)&turn(p2)&K127>=0&K127<xlen()&K128>=0&K128<ylen()=>((( !(Ch(0,0)&(K127>0|K128>0)) ) => ( !(Ch(0,0)&(K127>0|K128>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K129:Int)[ (xlen()=K129)&(G0>=0& K129 > G0&! (Ch(G0,G0)&(K127>G0|K128>G0)))] ])) ]
2019-10-12 15:44:28,271 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() > G0&! Ch(G0,G0)])
 f2:!(!Ch(0,0))=>(exists(K135:Int,K136:Int)[ (Ch(K135,K136)&turn(p1)&K135>=0&K135<xlen()&K136>=0&K136<ylen())&((( !(Ch(0,0)&(K135>0|K136>0)) ) => ( !(Ch(0,0)&(K135>0|K136>0))&(!turn(p1)) ))&!((Ch(1,1)&(K135>1|K136>1)))&!(exists(G0:Int)[G0>=0&! G0 = 0&(Ch(1,G0)&(K135>1|K136>G0))])) ])
2019-10-12 15:44:28,315 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() > G0&! Ch(G0,G0)])
 f2:!(!Ch(0,0))=>(exists(K135:Int,K136:Int)[ (Ch(K135,K136)&turn(p1)&K135>=0&K135<xlen()&K136>=0&K136<ylen())&((( !(Ch(0,0)&(K135>0|K136>0)) ) => ( !(Ch(0,0)&(K135>0|K136>0))&(!turn(p1)) ))&!((Ch(1,1)&(K135>1|K136>1)))&!(exists(G0:Int)[G0>=0&! G0 = 0&(Ch(1,G0)&(K135>1|K136>G0))])) ])
2019-10-12 15:44:28,349 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(Ch(1,1))&!(exists(G0:Int)[G0>=0&! G0 = 0&Ch(1,G0)])
 f2:forall(K132:Int,K133:Int)[ Ch(K132,K133)&turn(p2)&K132>=0&K132<xlen()&K133>=0&K133<ylen()=>((( !(Ch(0,0)&(K132>0|K133>0)) ) => ( !(Ch(0,0)&(K132>0|K133>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K134:Int)[ (xlen()=K134)&(G0>=0& K134 > G0&! (Ch(G0,G0)&(K132>G0|K133>G0)))] ])) ]
2019-10-12 15:44:28,386 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(Ch(1,1))&!(exists(G0:Int)[G0>=0&! G0 = 0&Ch(1,G0)])
 f2:forall(K132:Int,K133:Int)[ Ch(K132,K133)&turn(p2)&K132>=0&K132<xlen()&K133>=0&K133<ylen()=>((( !(Ch(0,0)&(K132>0|K133>0)) ) => ( !(Ch(0,0)&(K132>0|K133>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K134:Int)[ (xlen()=K134)&(G0>=0& K134 > G0&! (Ch(G0,G0)&(K132>G0|K133>G0)))] ])) ]
2019-10-12 15:44:31,342 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! Ch(G0,G0)&Ch(0,0)&xlen() > G0])
 f2:!(!Ch(0,0))=>(exists(K140:Int,K141:Int)[ (Ch(K140,K141)&turn(p1)&K140>=0&K140<xlen()&K141>=0&K141<ylen())&((( !(Ch(0,0)&(K140>0|K141>0)) ) => ( !(Ch(0,0)&(K140>0|K141>0))&(!turn(p1)) ))&!((Ch(1,1)&(K140>1|K141>1)))&!(exists(G0:Int)[G0>=0&! G0 = 0&(Ch(1,G0)&(K140>1|K141>G0))])) ])
2019-10-12 15:44:31,384 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! Ch(G0,G0)&Ch(0,0)&xlen() > G0])
 f2:!(!Ch(0,0))=>(exists(K140:Int,K141:Int)[ (Ch(K140,K141)&turn(p1)&K140>=0&K140<xlen()&K141>=0&K141<ylen())&((( !(Ch(0,0)&(K140>0|K141>0)) ) => ( !(Ch(0,0)&(K140>0|K141>0))&(!turn(p1)) ))&!((Ch(1,1)&(K140>1|K141>1)))&!(exists(G0:Int)[G0>=0&! G0 = 0&(Ch(1,G0)&(K140>1|K141>G0))])) ])
2019-10-12 15:44:31,417 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(Ch(1,1))&!(exists(G0:Int)[G0>=0&! G0 = 0&Ch(1,G0)])
 f2:forall(K137:Int,K138:Int)[ Ch(K137,K138)&turn(p2)&K137>=0&K137<xlen()&K138>=0&K138<ylen()=>((( !(Ch(0,0)&(K137>0|K138>0)) ) => ( !(Ch(0,0)&(K137>0|K138>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K139:Int)[ (xlen()=K139)&(G0>=0&! (Ch(G0,G0)&(K137>G0|K138>G0))&(Ch(0,0)&(K137>0|K138>0))& K139 > G0)] ])) ]
2019-10-12 15:44:31,454 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(Ch(1,1))&!(exists(G0:Int)[G0>=0&! G0 = 0&Ch(1,G0)])
 f2:forall(K137:Int,K138:Int)[ Ch(K137,K138)&turn(p2)&K137>=0&K137<xlen()&K138>=0&K138<ylen()=>((( !(Ch(0,0)&(K137>0|K138>0)) ) => ( !(Ch(0,0)&(K137>0|K138>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K139:Int)[ (xlen()=K139)&(G0>=0&! (Ch(G0,G0)&(K137>G0|K138>G0))&(Ch(0,0)&(K137>0|K138>0))& K139 > G0)] ])) ]
2019-10-12 15:44:33,274 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! Ch(G0,G0)&Ch(0,0)&xlen() > G0])&!(! turn(p1))
 f2:!(!Ch(0,0))=>(exists(K145:Int,K146:Int)[ (Ch(K145,K146)&turn(p1)&K145>=0&K145<xlen()&K146>=0&K146<ylen())&((( !(Ch(0,0)&(K145>0|K146>0)) ) => ( !(Ch(0,0)&(K145>0|K146>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 = 0&(Ch(1,G0)&(K145>1|K146>G0))])&!((Ch(1,1)&(K145>1|K146>1)))&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K145>1|K146>G0))&! (Ch(G0,1)&(K145>G0|K146>1))])) ])
2019-10-12 15:44:33,317 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 = 0&Ch(1,G0)])&!(Ch(1,1))&!(exists(G0:Int)[G0>=0&Ch(1,G0)&! Ch(G0,1)])
 f2:forall(K142:Int,K143:Int)[ Ch(K142,K143)&turn(p2)&K142>=0&K142<xlen()&K143>=0&K143<ylen()=>((( !(Ch(0,0)&(K142>0|K143>0)) ) => ( !(Ch(0,0)&(K142>0|K143>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K144:Int)[ (xlen()=K144)&(G0>=0&! (Ch(G0,G0)&(K142>G0|K143>G0))&(Ch(0,0)&(K142>0|K143>0))& K144 > G0)] ])&!(! (!turn(p1)))) ]
2019-10-12 15:44:33,352 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 = 0&Ch(1,G0)])&!(Ch(1,1))&!(exists(G0:Int)[G0>=0&Ch(1,G0)&! Ch(G0,1)])
 f2:forall(K142:Int,K143:Int)[ Ch(K142,K143)&turn(p2)&K142>=0&K142<xlen()&K143>=0&K143<ylen()=>((( !(Ch(0,0)&(K142>0|K143>0)) ) => ( !(Ch(0,0)&(K142>0|K143>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K144:Int)[ (xlen()=K144)&(G0>=0&! (Ch(G0,G0)&(K142>G0|K143>G0))&(Ch(0,0)&(K142>0|K143>0))& K144 > G0)] ])&!(! (!turn(p1)))) ]
2019-10-12 15:44:33,971 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(! turn(p1))&!(exists(G0:_S1)[turn(G0)&! turn(p1)])
 f2:!(!Ch(0,0))=>(exists(K149:Int,K150:Int)[ (Ch(K149,K150)&turn(p1)&K149>=0&K149<xlen()&K150>=0&K150<ylen())&((( !(Ch(0,0)&(K149>0|K150>0)) ) => ( !(Ch(0,0)&(K149>0|K150>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 = 0&(Ch(1,G0)&(K149>1|K150>G0))])&!((Ch(1,1)&(K149>1|K150>1)))&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K149>1|K150>G0))&! (Ch(G0,1)&(K149>G0|K150>1))])) ])
2019-10-12 15:44:34,017 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 = 0&Ch(1,G0)])&!(Ch(1,1))&!(exists(G0:Int)[G0>=0&Ch(1,G0)&! Ch(G0,1)])
 f2:forall(K147:Int,K148:Int)[ Ch(K147,K148)&turn(p2)&K147>=0&K147<xlen()&K148>=0&K148<ylen()=>((( !(Ch(0,0)&(K147>0|K148>0)) ) => ( !(Ch(0,0)&(K147>0|K148>0))&(!turn(p1)) ))&!(! (!turn(p1)))&!(exists(G0:_S1)[(!turn(G0))&! (!turn(p1))])) ]
2019-10-12 15:44:39,015 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K153:Int,K154:Int)[ (Ch(K153,K154)&turn(p1)&K153>=0&K153<xlen()&K154>=0&K154<ylen())&(( !(Ch(0,0)&(K153>0|K154>0)) ) => ( !(Ch(0,0)&(K153>0|K154>0))&(!turn(p1)) )) ])
2019-10-12 15:44:39,059 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K151:Int,K152:Int)[ Ch(K151,K152)&turn(p2)&K151>=0&K151<xlen()&K152>=0&K152<ylen()=>(( !(Ch(0,0)&(K151>0|K152>0)) ) => ( !(Ch(0,0)&(K151>0|K152>0))&(!turn(p1)) )) ]
2019-10-12 15:44:39,231 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&xlen() = X1])
 f2:!(!Ch(0,0))=>(exists(K157:Int,K158:Int)[ (Ch(K157,K158)&turn(p1)&K157>=0&K157<xlen()&K158>=0&K158<ylen())&(( !(Ch(0,0)&(K157>0|K158>0)) ) => ( !(Ch(0,0)&(K157>0|K158>0))&(!turn(p1)) )) ])
2019-10-12 15:44:39,274 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K155:Int,K156:Int)[ Ch(K155,K156)&turn(p2)&K155>=0&K155<xlen()&K156>=0&K156<ylen()=>((( !(Ch(0,0)&(K155>0|K156>0)) ) => ( !(Ch(0,0)&(K155>0|K156>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(xlen()=X1)])) ]
2019-10-12 15:44:39,662 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&xlen() = X1])
 f2:!(!Ch(0,0))=>(exists(K161:Int,K162:Int)[ (Ch(K161,K162)&turn(p1)&K161>=0&K161<xlen()&K162>=0&K162<ylen())&((( !(Ch(0,0)&(K161>0|K162>0)) ) => ( !(Ch(0,0)&(K161>0|K162>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(xlen()=X1)])) ])
2019-10-12 15:44:39,704 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&xlen() = X1])
 f2:forall(K159:Int,K160:Int)[ Ch(K159,K160)&turn(p2)&K159>=0&K159<xlen()&K160>=0&K160<ylen()=>((( !(Ch(0,0)&(K159>0|K160>0)) ) => ( !(Ch(0,0)&(K159>0|K160>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(xlen()=X1)])) ]
2019-10-12 15:44:39,739 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&xlen() = X1])
2019-10-12 15:44:40,631 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! Ch(1,G0)])
 f2:!(!Ch(0,0))=>(exists(K165:Int,K166:Int)[ (Ch(K165,K166)&turn(p1)&K165>=0&K165<xlen()&K166>=0&K166<ylen())&((( !(Ch(0,0)&(K165>0|K166>0)) ) => ( !(Ch(0,0)&(K165>0|K166>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! (Ch(1,G0)&(K165>1|K166>G0))])) ])
2019-10-12 15:44:40,679 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! Ch(1,G0)])
 f2:forall(K163:Int,K164:Int)[ Ch(K163,K164)&turn(p2)&K163>=0&K163<xlen()&K164>=0&K164<ylen()=>((( !(Ch(0,0)&(K163>0|K164>0)) ) => ( !(Ch(0,0)&(K163>0|K164>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(1,G0)&(K163>1|K164>G0))])) ]
2019-10-12 15:44:41,279 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! Ch(1,G0)])
 f2:!(!Ch(0,0))=>(exists(K169:Int,K170:Int)[ (Ch(K169,K170)&turn(p1)&K169>=0&K169<xlen()&K170>=0&K170<ylen())&((( !(Ch(0,0)&(K169>0|K170>0)) ) => ( !(Ch(0,0)&(K169>0|K170>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(G0,1)&(K169>G0|K170>1))])) ])
2019-10-12 15:44:41,328 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(G0,1)])
 f2:forall(K167:Int,K168:Int)[ Ch(K167,K168)&turn(p2)&K167>=0&K167<xlen()&K168>=0&K168<ylen()=>((( !(Ch(0,0)&(K167>0|K168>0)) ) => ( !(Ch(0,0)&(K167>0|K168>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(1,G0)&(K167>1|K168>G0))])) ]
2019-10-12 15:44:41,370 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(G0,1)])
 f2:forall(K167:Int,K168:Int)[ Ch(K167,K168)&turn(p2)&K167>=0&K167<xlen()&K168>=0&K168<ylen()=>((( !(Ch(0,0)&(K167>0|K168>0)) ) => ( !(Ch(0,0)&(K167>0|K168>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(1,G0)&(K167>1|K168>G0))])) ]
2019-10-12 15:44:42,903 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! Ch(1,G0)])&!(! Ch(1,1))
 f2:!(!Ch(0,0))=>(exists(K173:Int,K174:Int)[ (Ch(K173,K174)&turn(p1)&K173>=0&K173<xlen()&K174>=0&K174<ylen())&((( !(Ch(0,0)&(K173>0|K174>0)) ) => ( !(Ch(0,0)&(K173>0|K174>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(G0,1)&(K173>G0|K174>1))])&!((Ch(0,1)&(K173>0|K174>1))&! (Ch(1,0)&(K173>1|K174>0)))) ])
2019-10-12 15:44:42,952 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(G0,1)])&!(Ch(0,1)&! Ch(1,0))
 f2:forall(K171:Int,K172:Int)[ Ch(K171,K172)&turn(p2)&K171>=0&K171<xlen()&K172>=0&K172<ylen()=>((( !(Ch(0,0)&(K171>0|K172>0)) ) => ( !(Ch(0,0)&(K171>0|K172>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(1,G0)&(K171>1|K172>G0))])&!(! (Ch(1,1)&(K171>1|K172>1)))) ]
2019-10-12 15:44:42,989 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(G0,1)])&!(Ch(0,1)&! Ch(1,0))
 f2:forall(K171:Int,K172:Int)[ Ch(K171,K172)&turn(p2)&K171>=0&K171<xlen()&K172>=0&K172<ylen()=>((( !(Ch(0,0)&(K171>0|K172>0)) ) => ( !(Ch(0,0)&(K171>0|K172>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(1,G0)&(K171>1|K172>G0))])&!(! (Ch(1,1)&(K171>1|K172>1)))) ]
2019-10-12 15:44:43,730 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() = G0&turn(p2)])&!(exists(G0:Int)[G0>=0&xlen() = G0&turn(p2)])
 f2:!(!Ch(0,0))=>(exists(K177:Int,K178:Int)[ (Ch(K177,K178)&turn(p1)&K177>=0&K177<xlen()&K178>=0&K178<ylen())&((( !(Ch(0,0)&(K177>0|K178>0)) ) => ( !(Ch(0,0)&(K177>0|K178>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(G0,1)&(K177>G0|K178>1))])&!((Ch(0,1)&(K177>0|K178>1))&! (Ch(1,0)&(K177>1|K178>0)))) ])
2019-10-12 15:44:43,770 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(G0,1)])&!(Ch(0,1)&! Ch(1,0))
 f2:forall(K175:Int,K176:Int)[ Ch(K175,K176)&turn(p2)&K175>=0&K175<xlen()&K176>=0&K176<ylen()=>((( !(Ch(0,0)&(K175>0|K176>0)) ) => ( !(Ch(0,0)&(K175>0|K176>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(xlen()=G0)&(!turn(p2))])&!(exists(G0:Int)[G0>=0&(xlen()=G0)&(!turn(p2))])) ]
2019-10-12 15:44:45,348 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K181:Int,K182:Int)[ (Ch(K181,K182)&turn(p1)&K181>=0&K181<xlen()&K182>=0&K182<ylen())&(( !(Ch(0,0)&(K181>0|K182>0)) ) => ( !(Ch(0,0)&(K181>0|K182>0))&(!turn(p1)) )) ])
2019-10-12 15:44:45,393 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K179:Int,K180:Int)[ Ch(K179,K180)&turn(p2)&K179>=0&K179<xlen()&K180>=0&K180<ylen()=>(( !(Ch(0,0)&(K179>0|K180>0)) ) => ( !(Ch(0,0)&(K179>0|K180>0))&(!turn(p1)) )) ]
2019-10-12 15:44:45,566 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&ylen() = X1])
 f2:!(!Ch(0,0))=>(exists(K185:Int,K186:Int)[ (Ch(K185,K186)&turn(p1)&K185>=0&K185<xlen()&K186>=0&K186<ylen())&(( !(Ch(0,0)&(K185>0|K186>0)) ) => ( !(Ch(0,0)&(K185>0|K186>0))&(!turn(p1)) )) ])
2019-10-12 15:44:45,599 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K183:Int,K184:Int)[ Ch(K183,K184)&turn(p2)&K183>=0&K183<xlen()&K184>=0&K184<ylen()=>((( !(Ch(0,0)&(K183>0|K184>0)) ) => ( !(Ch(0,0)&(K183>0|K184>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(ylen()=X1)])) ]
2019-10-12 15:44:45,971 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&ylen() = X1])
 f2:!(!Ch(0,0))=>(exists(K189:Int,K190:Int)[ (Ch(K189,K190)&turn(p1)&K189>=0&K189<xlen()&K190>=0&K190<ylen())&((( !(Ch(0,0)&(K189>0|K190>0)) ) => ( !(Ch(0,0)&(K189>0|K190>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(ylen()=X1)])) ])
2019-10-12 15:44:46,007 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&ylen() = X1])
 f2:forall(K187:Int,K188:Int)[ Ch(K187,K188)&turn(p2)&K187>=0&K187<xlen()&K188>=0&K188<ylen()=>((( !(Ch(0,0)&(K187>0|K188>0)) ) => ( !(Ch(0,0)&(K187>0|K188>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(ylen()=X1)])) ]
2019-10-12 15:44:46,035 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&ylen() = X1])
2019-10-12 15:44:46,875 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! Ch(G0,1)])
 f2:!(!Ch(0,0))=>(exists(K193:Int,K194:Int)[ (Ch(K193,K194)&turn(p1)&K193>=0&K193<xlen()&K194>=0&K194<ylen())&((( !(Ch(0,0)&(K193>0|K194>0)) ) => ( !(Ch(0,0)&(K193>0|K194>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(ylen()=G0)&! (Ch(0,1)&(K193>0|K194>1))])) ])
2019-10-12 15:44:46,922 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() = G0&! Ch(0,1)])
 f2:forall(K191:Int,K192:Int)[ Ch(K191,K192)&turn(p2)&K191>=0&K191<xlen()&K192>=0&K192<ylen()=>((( !(Ch(0,0)&(K191>0|K192>0)) ) => ( !(Ch(0,0)&(K191>0|K192>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! (Ch(G0,1)&(K191>G0|K192>1))])) ]
2019-10-12 15:44:47,495 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! Ch(G0,1)])
 f2:!(!Ch(0,0))=>(exists(K197:Int,K198:Int)[ (Ch(K197,K198)&turn(p1)&K197>=0&K197<xlen()&K198>=0&K198<ylen())&((( !(Ch(0,0)&(K197>0|K198>0)) ) => ( !(Ch(0,0)&(K197>0|K198>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&(Ch(G0,G0)&(K197>G0|K198>G0))])) ])
2019-10-12 15:44:47,540 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&Ch(G0,G0)])
 f2:forall(K195:Int,K196:Int)[ Ch(K195,K196)&turn(p2)&K195>=0&K195<xlen()&K196>=0&K196<ylen()=>((( !(Ch(0,0)&(K195>0|K196>0)) ) => ( !(Ch(0,0)&(K195>0|K196>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! (Ch(G0,1)&(K195>G0|K196>1))])) ]
2019-10-12 15:44:49,109 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! Ch(G0,1)])&!(! Ch(1,0))
 f2:!(!Ch(0,0))=>(exists(K201:Int,K202:Int)[ (Ch(K201,K202)&turn(p1)&K201>=0&K201<xlen()&K202>=0&K202<ylen())&((( !(Ch(0,0)&(K201>0|K202>0)) ) => ( !(Ch(0,0)&(K201>0|K202>0))&(!turn(p1)) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K201>G0|K202>G1))&! (Ch(G1,0)&(K201>G1|K202>0))])) ])
2019-10-12 15:44:49,159 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,0)])
 f2:forall(K199:Int,K200:Int)[ Ch(K199,K200)&turn(p2)&K199>=0&K199<xlen()&K200>=0&K200<ylen()=>((( !(Ch(0,0)&(K199>0|K200>0)) ) => ( !(Ch(0,0)&(K199>0|K200>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! (Ch(G0,1)&(K199>G0|K200>1))])&!(! (Ch(1,0)&(K199>1|K200>0)))) ]
2019-10-12 15:44:49,193 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,0)])
 f2:forall(K199:Int,K200:Int)[ Ch(K199,K200)&turn(p2)&K199>=0&K199<xlen()&K200>=0&K200<ylen()=>((( !(Ch(0,0)&(K199>0|K200>0)) ) => ( !(Ch(0,0)&(K199>0|K200>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! (Ch(G0,1)&(K199>G0|K200>1))])&!(! (Ch(1,0)&(K199>1|K200>0)))) ]
2019-10-12 15:44:55,103 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() > G0&! Ch(G0,1)])
 f2:!(!Ch(0,0))=>(exists(K206:Int,K207:Int)[ (Ch(K206,K207)&turn(p1)&K206>=0&K206<xlen()&K207>=0&K207<ylen())&((( !(Ch(0,0)&(K206>0|K207>0)) ) => ( !(Ch(0,0)&(K206>0|K207>0))&(!turn(p1)) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K206>G0|K207>G1))&! (Ch(G1,0)&(K206>G1|K207>0))])&!((Ch(1,1)&(K206>1|K207>1)))) ])
2019-10-12 15:44:55,165 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() > G0&! Ch(G0,1)])
 f2:!(!Ch(0,0))=>(exists(K206:Int,K207:Int)[ (Ch(K206,K207)&turn(p1)&K206>=0&K206<xlen()&K207>=0&K207<ylen())&((( !(Ch(0,0)&(K206>0|K207>0)) ) => ( !(Ch(0,0)&(K206>0|K207>0))&(!turn(p1)) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K206>G0|K207>G1))&! (Ch(G1,0)&(K206>G1|K207>0))])&!((Ch(1,1)&(K206>1|K207>1)))) ])
2019-10-12 15:44:55,205 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,0)])&!(Ch(1,1))
 f2:forall(K203:Int,K204:Int)[ Ch(K203,K204)&turn(p2)&K203>=0&K203<xlen()&K204>=0&K204<ylen()=>((( !(Ch(0,0)&(K203>0|K204>0)) ) => ( !(Ch(0,0)&(K203>0|K204>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K205:Int)[ (ylen()=K205)&(G0>=0& K205 > G0&! (Ch(G0,1)&(K203>G0|K204>1)))] ])) ]
2019-10-12 15:44:55,243 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,0)])&!(Ch(1,1))
 f2:forall(K203:Int,K204:Int)[ Ch(K203,K204)&turn(p2)&K203>=0&K203<xlen()&K204>=0&K204<ylen()=>((( !(Ch(0,0)&(K203>0|K204>0)) ) => ( !(Ch(0,0)&(K203>0|K204>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K205:Int)[ (ylen()=K205)&(G0>=0& K205 > G0&! (Ch(G0,1)&(K203>G0|K204>1)))] ])) ]
2019-10-12 15:50:03,999 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K21:Int,K22:Int)[ (Ch(K21,K22)&turn(p1)&K21>=0&K21<xlen()&K22>=0&K22<ylen())&(( !(Ch(0,0)&(K21>0|K22>0)) ) => ( !(Ch(0,0)&(K21>0|K22>0))&(!turn(p1)) )) ])
2019-10-12 15:50:04,047 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K19:Int,K20:Int)[ Ch(K19,K20)&turn(p2)&K19>=0&K19<xlen()&K20>=0&K20<ylen()=>(( !(Ch(0,0)&(K19>0|K20>0)) ) => ( !(Ch(0,0)&(K19>0|K20>0))&(!turn(p1)) )) ]
2019-10-12 15:50:04,257 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
 f2:!(!Ch(0,0))=>(exists(K25:Int,K26:Int)[ (Ch(K25,K26)&turn(p1)&K25>=0&K25<xlen()&K26>=0&K26<ylen())&(( !(Ch(0,0)&(K25>0|K26>0)) ) => ( !(Ch(0,0)&(K25>0|K26>0))&(!turn(p1)) )) ])
2019-10-12 15:50:04,291 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K23:Int,K24:Int)[ Ch(K23,K24)&turn(p2)&K23>=0&K23<xlen()&K24>=0&K24<ylen()=>((( !(Ch(0,0)&(K23>0|K24>0)) ) => ( !(Ch(0,0)&(K23>0|K24>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(0,X1)&(K23>0|K24>X1))])) ]
2019-10-12 15:50:04,667 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
 f2:!(!Ch(0,0))=>(exists(K29:Int,K30:Int)[ (Ch(K29,K30)&turn(p1)&K29>=0&K29<xlen()&K30>=0&K30<ylen())&((( !(Ch(0,0)&(K29>0|K30>0)) ) => ( !(Ch(0,0)&(K29>0|K30>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(1,X1)&(K29>1|K30>X1))])) ])
2019-10-12 15:50:04,707 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])
 f2:forall(K27:Int,K28:Int)[ Ch(K27,K28)&turn(p2)&K27>=0&K27<xlen()&K28>=0&K28<ylen()=>((( !(Ch(0,0)&(K27>0|K28>0)) ) => ( !(Ch(0,0)&(K27>0|K28>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(0,X1)&(K27>0|K28>X1))])) ]
2019-10-12 15:50:04,767 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])
 f2:forall(K27:Int,K28:Int)[ Ch(K27,K28)&turn(p2)&K27>=0&K27<xlen()&K28>=0&K28<ylen()=>((( !(Ch(0,0)&(K27>0|K28>0)) ) => ( !(Ch(0,0)&(K27>0|K28>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(0,X1)&(K27>0|K28>X1))])) ]
2019-10-12 15:50:05,394 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
 f2:!(!Ch(0,0))=>(exists(K33:Int,K34:Int)[ (Ch(K33,K34)&turn(p1)&K33>=0&K33<xlen()&K34>=0&K34<ylen())&((( !(Ch(0,0)&(K33>0|K34>0)) ) => ( !(Ch(0,0)&(K33>0|K34>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(1,X1)&(K33>1|K34>X1))])&!(exists(X1:Int)[X1>=0&(Ch(0,X1)&(K33>0|K34>X1))])) ])
2019-10-12 15:50:05,435 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(1,X1)])&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
 f2:forall(K31:Int,K32:Int)[ Ch(K31,K32)&turn(p2)&K31>=0&K31<xlen()&K32>=0&K32<ylen()=>((( !(Ch(0,0)&(K31>0|K32>0)) ) => ( !(Ch(0,0)&(K31>0|K32>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(0,X1)&(K31>0|K32>X1))])) ]
2019-10-12 15:50:05,466 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(0,X1)])
2019-10-12 15:50:06,413 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! Ch(1,G0)])
 f2:!(!Ch(0,0))=>(exists(K37:Int,K38:Int)[ (Ch(K37,K38)&turn(p1)&K37>=0&K37<xlen()&K38>=0&K38<ylen())&((( !(Ch(0,0)&(K37>0|K38>0)) ) => ( !(Ch(0,0)&(K37>0|K38>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(1,G0)&(K37>1|K38>G0))])&!(exists(G0:Int)[G0>=0&G0 = 0&! (Ch(1,G0)&(K37>1|K38>G0))])) ])
2019-10-12 15:50:06,455 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(1,G0)])&!(exists(G0:Int)[G0>=0&G0 = 0&! Ch(1,G0)])
 f2:forall(K35:Int,K36:Int)[ Ch(K35,K36)&turn(p2)&K35>=0&K35<xlen()&K36>=0&K36<ylen()=>((( !(Ch(0,0)&(K35>0|K36>0)) ) => ( !(Ch(0,0)&(K35>0|K36>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! (Ch(1,G0)&(K35>1|K36>G0))])) ]
2019-10-12 15:50:07,075 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! Ch(1,G0)])
 f2:!(!Ch(0,0))=>(exists(K41:Int,K42:Int)[ (Ch(K41,K42)&turn(p1)&K41>=0&K41<xlen()&K42>=0&K42<ylen())&((( !(Ch(0,0)&(K41>0|K42>0)) ) => ( !(Ch(0,0)&(K41>0|K42>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(1,G0)&(K41>1|K42>G0))])&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K41>0|K42>G0))&! (Ch(G0,0)&(K41>G0|K42>0))])) ])
2019-10-12 15:50:07,135 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! Ch(1,G0)])
 f2:!(!Ch(0,0))=>(exists(K41:Int,K42:Int)[ (Ch(K41,K42)&turn(p1)&K41>=0&K41<xlen()&K42>=0&K42<ylen())&((( !(Ch(0,0)&(K41>0|K42>0)) ) => ( !(Ch(0,0)&(K41>0|K42>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(1,G0)&(K41>1|K42>G0))])&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K41>0|K42>G0))&! (Ch(G0,0)&(K41>G0|K42>0))])) ])
2019-10-12 15:50:07,174 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(1,G0)])&!(exists(G0:Int)[G0>=0&Ch(0,G0)&! Ch(G0,0)])
 f2:forall(K39:Int,K40:Int)[ Ch(K39,K40)&turn(p2)&K39>=0&K39<xlen()&K40>=0&K40<ylen()=>((( !(Ch(0,0)&(K39>0|K40>0)) ) => ( !(Ch(0,0)&(K39>0|K40>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! (Ch(1,G0)&(K39>1|K40>G0))])) ]
2019-10-12 15:50:08,201 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! Ch(1,G0)])&!(turn(p2))
 f2:!(!Ch(0,0))=>(exists(K45:Int,K46:Int)[ (Ch(K45,K46)&turn(p1)&K45>=0&K45<xlen()&K46>=0&K46<ylen())&((( !(Ch(0,0)&(K45>0|K46>0)) ) => ( !(Ch(0,0)&(K45>0|K46>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K45>0|K46>G0))&! (Ch(G0,0)&(K45>G0|K46>0))])&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K45>1|K46>G0))&! (Ch(0,1)&(K45>0|K46>1))])) ])
2019-10-12 15:50:08,514 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! Ch(1,G0)])&!(turn(p2))
 f2:!(!Ch(0,0))=>(exists(K45:Int,K46:Int)[ (Ch(K45,K46)&turn(p1)&K45>=0&K45<xlen()&K46>=0&K46<ylen())&((( !(Ch(0,0)&(K45>0|K46>0)) ) => ( !(Ch(0,0)&(K45>0|K46>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K45>0|K46>G0))&! (Ch(G0,0)&(K45>G0|K46>0))])&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K45>1|K46>G0))&! (Ch(0,1)&(K45>0|K46>1))])) ])
2019-10-12 15:50:08,562 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&Ch(0,G0)&! Ch(G0,0)])&!(exists(G0:Int)[G0>=0&Ch(1,G0)&! Ch(0,1)])
 f2:forall(K43:Int,K44:Int)[ Ch(K43,K44)&turn(p2)&K43>=0&K43<xlen()&K44>=0&K44<ylen()=>((( !(Ch(0,0)&(K43>0|K44>0)) ) => ( !(Ch(0,0)&(K43>0|K44>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! (Ch(1,G0)&(K43>1|K44>G0))])&!((!turn(p2)))) ]
2019-10-12 15:50:09,258 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(turn(p2))&!(exists(G0:Int)[G0>=0&Ch(0,G0)&turn(p2)])
 f2:!(!Ch(0,0))=>(exists(K49:Int,K50:Int)[ (Ch(K49,K50)&turn(p1)&K49>=0&K49<xlen()&K50>=0&K50<ylen())&((( !(Ch(0,0)&(K49>0|K50>0)) ) => ( !(Ch(0,0)&(K49>0|K50>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K49>0|K50>G0))&! (Ch(G0,0)&(K49>G0|K50>0))])&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K49>1|K50>G0))&! (Ch(0,1)&(K49>0|K50>1))])) ])
2019-10-12 15:50:09,303 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&Ch(0,G0)&! Ch(G0,0)])&!(exists(G0:Int)[G0>=0&Ch(1,G0)&! Ch(0,1)])
 f2:forall(K47:Int,K48:Int)[ Ch(K47,K48)&turn(p2)&K47>=0&K47<xlen()&K48>=0&K48<ylen()=>((( !(Ch(0,0)&(K47>0|K48>0)) ) => ( !(Ch(0,0)&(K47>0|K48>0))&(!turn(p1)) ))&!((!turn(p2)))&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K47>0|K48>G0))&(!turn(p2))])) ]
2019-10-12 15:50:11,092 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K53:Int,K54:Int)[ (Ch(K53,K54)&turn(p1)&K53>=0&K53<xlen()&K54>=0&K54<ylen())&(( !(Ch(0,0)&(K53>0|K54>0)) ) => ( !(Ch(0,0)&(K53>0|K54>0))&(!turn(p1)) )) ])
2019-10-12 15:50:11,133 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K51:Int,K52:Int)[ Ch(K51,K52)&turn(p2)&K51>=0&K51<xlen()&K52>=0&K52<ylen()=>(( !(Ch(0,0)&(K51>0|K52>0)) ) => ( !(Ch(0,0)&(K51>0|K52>0))&(!turn(p1)) )) ]
2019-10-12 15:50:11,299 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(X1,0)])
 f2:!(!Ch(0,0))=>(exists(K57:Int,K58:Int)[ (Ch(K57,K58)&turn(p1)&K57>=0&K57<xlen()&K58>=0&K58<ylen())&(( !(Ch(0,0)&(K57>0|K58>0)) ) => ( !(Ch(0,0)&(K57>0|K58>0))&(!turn(p1)) )) ])
2019-10-12 15:50:11,333 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K55:Int,K56:Int)[ Ch(K55,K56)&turn(p2)&K55>=0&K55<xlen()&K56>=0&K56<ylen()=>((( !(Ch(0,0)&(K55>0|K56>0)) ) => ( !(Ch(0,0)&(K55>0|K56>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(X1,0)&(K55>X1|K56>0))])) ]
2019-10-12 15:50:11,714 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(X1,0)])
 f2:!(!Ch(0,0))=>(exists(K61:Int,K62:Int)[ (Ch(K61,K62)&turn(p1)&K61>=0&K61<xlen()&K62>=0&K62<ylen())&((( !(Ch(0,0)&(K61>0|K62>0)) ) => ( !(Ch(0,0)&(K61>0|K62>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(X1,1)&(K61>X1|K62>1))])) ])
2019-10-12 15:50:11,749 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(X1,1)])
 f2:forall(K59:Int,K60:Int)[ Ch(K59,K60)&turn(p2)&K59>=0&K59<xlen()&K60>=0&K60<ylen()=>((( !(Ch(0,0)&(K59>0|K60>0)) ) => ( !(Ch(0,0)&(K59>0|K60>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(X1,0)&(K59>X1|K60>0))])) ]
2019-10-12 15:50:11,795 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(X1,1)])
 f2:forall(K59:Int,K60:Int)[ Ch(K59,K60)&turn(p2)&K59>=0&K59<xlen()&K60>=0&K60<ylen()=>((( !(Ch(0,0)&(K59>0|K60>0)) ) => ( !(Ch(0,0)&(K59>0|K60>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(X1,0)&(K59>X1|K60>0))])) ]
2019-10-12 15:50:12,405 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(X1,0)])
 f2:!(!Ch(0,0))=>(exists(K65:Int,K66:Int)[ (Ch(K65,K66)&turn(p1)&K65>=0&K65<xlen()&K66>=0&K66<ylen())&((( !(Ch(0,0)&(K65>0|K66>0)) ) => ( !(Ch(0,0)&(K65>0|K66>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(X1,1)&(K65>X1|K66>1))])&!(exists(X1:Int)[X1>=0&(Ch(X1,0)&(K65>X1|K66>0))])) ])
2019-10-12 15:50:12,441 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(X1,1)])&!(exists(X1:Int)[X1>=0&Ch(X1,0)])
 f2:forall(K63:Int,K64:Int)[ Ch(K63,K64)&turn(p2)&K63>=0&K63<xlen()&K64>=0&K64<ylen()=>((( !(Ch(0,0)&(K63>0|K64>0)) ) => ( !(Ch(0,0)&(K63>0|K64>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(Ch(X1,0)&(K63>X1|K64>0))])) ]
2019-10-12 15:50:12,469 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&Ch(X1,0)])
2019-10-12 15:50:13,403 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])
 f2:!(!Ch(0,0))=>(exists(K69:Int,K70:Int)[ (Ch(K69,K70)&turn(p1)&K69>=0&K69<xlen()&K70>=0&K70<ylen())&((( !(Ch(0,0)&(K69>0|K70>0)) ) => ( !(Ch(0,0)&(K69>0|K70>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&(Ch(G0,1)&(K69>G0|K70>1))])&!(exists(G0:Int)[G0>=0&G0 = 1&! (Ch(0,G0)&(K69>0|K70>G0))])) ])
2019-10-12 15:50:13,452 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])
 f2:!(!Ch(0,0))=>(exists(K69:Int,K70:Int)[ (Ch(K69,K70)&turn(p1)&K69>=0&K69<xlen()&K70>=0&K70<ylen())&((( !(Ch(0,0)&(K69>0|K70>0)) ) => ( !(Ch(0,0)&(K69>0|K70>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&(Ch(G0,1)&(K69>G0|K70>1))])&!(exists(G0:Int)[G0>=0&G0 = 1&! (Ch(0,G0)&(K69>0|K70>G0))])) ])
2019-10-12 15:50:13,487 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&Ch(G0,1)])&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])
 f2:forall(K67:Int,K68:Int)[ Ch(K67,K68)&turn(p2)&K67>=0&K67<xlen()&K68>=0&K68<ylen()=>((( !(Ch(0,0)&(K67>0|K68>0)) ) => ( !(Ch(0,0)&(K67>0|K68>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! (Ch(0,G0)&(K67>0|K68>G0))])) ]
2019-10-12 15:50:14,082 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])
 f2:!(!Ch(0,0))=>(exists(K73:Int,K74:Int)[ (Ch(K73,K74)&turn(p1)&K73>=0&K73<xlen()&K74>=0&K74<ylen())&((( !(Ch(0,0)&(K73>0|K74>0)) ) => ( !(Ch(0,0)&(K73>0|K74>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&(Ch(G0,1)&(K73>G0|K74>1))])&!(exists(G0:Int)[G0>=0&(Ch(G0,0)&(K73>G0|K74>0))&! (Ch(0,G0)&(K73>0|K74>G0))])) ])
2019-10-12 15:50:14,129 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])
 f2:!(!Ch(0,0))=>(exists(K73:Int,K74:Int)[ (Ch(K73,K74)&turn(p1)&K73>=0&K73<xlen()&K74>=0&K74<ylen())&((( !(Ch(0,0)&(K73>0|K74>0)) ) => ( !(Ch(0,0)&(K73>0|K74>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&(Ch(G0,1)&(K73>G0|K74>1))])&!(exists(G0:Int)[G0>=0&(Ch(G0,0)&(K73>G0|K74>0))&! (Ch(0,G0)&(K73>0|K74>G0))])) ])
2019-10-12 15:50:14,166 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&Ch(G0,1)])&!(exists(G0:Int)[G0>=0&Ch(G0,0)&! Ch(0,G0)])
 f2:forall(K71:Int,K72:Int)[ Ch(K71,K72)&turn(p2)&K71>=0&K71<xlen()&K72>=0&K72<ylen()=>((( !(Ch(0,0)&(K71>0|K72>0)) ) => ( !(Ch(0,0)&(K71>0|K72>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! (Ch(0,G0)&(K71>0|K72>G0))])) ]
2019-10-12 15:50:15,172 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])&!(! Ch(1,1))
 f2:!(!Ch(0,0))=>(exists(K77:Int,K78:Int)[ (Ch(K77,K78)&turn(p1)&K77>=0&K77<xlen()&K78>=0&K78<ylen())&((( !(Ch(0,0)&(K77>0|K78>0)) ) => ( !(Ch(0,0)&(K77>0|K78>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(Ch(G0,0)&(K77>G0|K78>0))&! (Ch(0,G0)&(K77>0|K78>G0))])&!(exists(G0:Int)[G0>=0&(Ch(G0,1)&(K77>G0|K78>1))&! (Ch(1,0)&(K77>1|K78>0))])) ])
2019-10-12 15:50:15,488 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])&!(! Ch(1,1))
 f2:!(!Ch(0,0))=>(exists(K77:Int,K78:Int)[ (Ch(K77,K78)&turn(p1)&K77>=0&K77<xlen()&K78>=0&K78<ylen())&((( !(Ch(0,0)&(K77>0|K78>0)) ) => ( !(Ch(0,0)&(K77>0|K78>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(Ch(G0,0)&(K77>G0|K78>0))&! (Ch(0,G0)&(K77>0|K78>G0))])&!(exists(G0:Int)[G0>=0&(Ch(G0,1)&(K77>G0|K78>1))&! (Ch(1,0)&(K77>1|K78>0))])) ])
2019-10-12 15:50:15,534 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&Ch(G0,0)&! Ch(0,G0)])&!(exists(G0:Int)[G0>=0&Ch(G0,1)&! Ch(1,0)])
 f2:forall(K75:Int,K76:Int)[ Ch(K75,K76)&turn(p2)&K75>=0&K75<xlen()&K76>=0&K76<ylen()=>((( !(Ch(0,0)&(K75>0|K76>0)) ) => ( !(Ch(0,0)&(K75>0|K76>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! (Ch(0,G0)&(K75>0|K76>G0))])&!(! (Ch(1,1)&(K75>1|K76>1)))) ]
2019-10-12 15:50:16,295 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&Ch(G0,0)&! turn(p1)])&!(exists(G0:Int)[G0>=0&Ch(G0,1)&! turn(p1)])
 f2:!(!Ch(0,0))=>(exists(K81:Int,K82:Int)[ (Ch(K81,K82)&turn(p1)&K81>=0&K81<xlen()&K82>=0&K82<ylen())&((( !(Ch(0,0)&(K81>0|K82>0)) ) => ( !(Ch(0,0)&(K81>0|K82>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(Ch(G0,0)&(K81>G0|K82>0))&! (Ch(0,G0)&(K81>0|K82>G0))])&!(exists(G0:Int)[G0>=0&(Ch(G0,1)&(K81>G0|K82>1))&! (Ch(1,0)&(K81>1|K82>0))])) ])
2019-10-12 15:50:16,341 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&Ch(G0,0)&! Ch(0,G0)])&!(exists(G0:Int)[G0>=0&Ch(G0,1)&! Ch(1,0)])
 f2:forall(K79:Int,K80:Int)[ Ch(K79,K80)&turn(p2)&K79>=0&K79<xlen()&K80>=0&K80<ylen()=>((( !(Ch(0,0)&(K79>0|K80>0)) ) => ( !(Ch(0,0)&(K79>0|K80>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(Ch(G0,0)&(K79>G0|K80>0))&! (!turn(p1))])&!(exists(G0:Int)[G0>=0&(Ch(G0,1)&(K79>G0|K80>1))&! (!turn(p1))])) ]
2019-10-12 15:50:17,964 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K85:Int,K86:Int)[ (Ch(K85,K86)&turn(p1)&K85>=0&K85<xlen()&K86>=0&K86<ylen())&(( !(Ch(0,0)&(K85>0|K86>0)) ) => ( !(Ch(0,0)&(K85>0|K86>0))&(!turn(p1)) )) ])
2019-10-12 15:50:18,005 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K83:Int,K84:Int)[ Ch(K83,K84)&turn(p2)&K83>=0&K83<xlen()&K84>=0&K84<ylen()=>(( !(Ch(0,0)&(K83>0|K84>0)) ) => ( !(Ch(0,0)&(K83>0|K84>0))&(!turn(p1)) )) ]
2019-10-12 15:50:18,177 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(Y10:Int,Y11:Int)[Y10>=0&Y11>=0&Ch(Y10,Y11)])
 f2:!(!Ch(0,0))=>(exists(K89:Int,K90:Int)[ (Ch(K89,K90)&turn(p1)&K89>=0&K89<xlen()&K90>=0&K90<ylen())&(( !(Ch(0,0)&(K89>0|K90>0)) ) => ( !(Ch(0,0)&(K89>0|K90>0))&(!turn(p1)) )) ])
2019-10-12 15:50:18,220 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K87:Int,K88:Int)[ Ch(K87,K88)&turn(p2)&K87>=0&K87<xlen()&K88>=0&K88<ylen()=>((( !(Ch(0,0)&(K87>0|K88>0)) ) => ( !(Ch(0,0)&(K87>0|K88>0))&(!turn(p1)) ))&!(exists(Y10:Int,Y11:Int)[Y10>=0&Y11>=0&(Ch(Y10,Y11)&(K87>Y10|K88>Y11))])) ]
2019-10-12 15:50:18,589 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(Y10:Int,Y11:Int)[Y10>=0&Y11>=0&Ch(Y10,Y11)])
 f2:!(!Ch(0,0))=>(exists(K93:Int,K94:Int)[ (Ch(K93,K94)&turn(p1)&K93>=0&K93<xlen()&K94>=0&K94<ylen())&((( !(Ch(0,0)&(K93>0|K94>0)) ) => ( !(Ch(0,0)&(K93>0|K94>0))&(!turn(p1)) ))&!(exists(Y10:Int,Y11:Int)[Y10>=0&Y11>=0&(Ch(Y10,Y11)&(K93>Y10|K94>Y11))])) ])
2019-10-12 15:50:18,621 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(Y10:Int,Y11:Int)[Y10>=0&Y11>=0&Ch(Y10,Y11)])
 f2:forall(K91:Int,K92:Int)[ Ch(K91,K92)&turn(p2)&K91>=0&K91<xlen()&K92>=0&K92<ylen()=>((( !(Ch(0,0)&(K91>0|K92>0)) ) => ( !(Ch(0,0)&(K91>0|K92>0))&(!turn(p1)) ))&!(exists(Y10:Int,Y11:Int)[Y10>=0&Y11>=0&(Ch(Y10,Y11)&(K91>Y10|K92>Y11))])) ]
2019-10-12 15:50:18,648 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(Y10:Int,Y11:Int)[Y10>=0&Y11>=0&Ch(Y10,Y11)])
2019-10-12 15:50:18,721 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(Y10:Int,Y11:Int)[Y10>=0&Y11>=0&Ch(Y10,Y11)])
2019-10-12 15:50:19,577 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(G0,1)])
 f2:!(!Ch(0,0))=>(exists(K97:Int,K98:Int)[ (Ch(K97,K98)&turn(p1)&K97>=0&K97<xlen()&K98>=0&K98<ylen())&((( !(Ch(0,0)&(K97>0|K98>0)) ) => ( !(Ch(0,0)&(K97>0|K98>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 >= 1&(Ch(G0,G0)&(K97>G0|K98>G0))])) ])
2019-10-12 15:50:19,629 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(G0,1)])
 f2:!(!Ch(0,0))=>(exists(K97:Int,K98:Int)[ (Ch(K97,K98)&turn(p1)&K97>=0&K97<xlen()&K98>=0&K98<ylen())&((( !(Ch(0,0)&(K97>0|K98>0)) ) => ( !(Ch(0,0)&(K97>0|K98>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 >= 1&(Ch(G0,G0)&(K97>G0|K98>G0))])) ])
2019-10-12 15:50:19,666 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 >= 1&Ch(G0,G0)])
 f2:forall(K95:Int,K96:Int)[ Ch(K95,K96)&turn(p2)&K95>=0&K95<xlen()&K96>=0&K96<ylen()=>((( !(Ch(0,0)&(K95>0|K96>0)) ) => ( !(Ch(0,0)&(K95>0|K96>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! (Ch(G0,1)&(K95>G0|K96>1))])) ]
2019-10-12 15:50:20,652 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(G0,1)])&!(! Ch(1,0))
 f2:!(!Ch(0,0))=>(exists(K101:Int,K102:Int)[ (Ch(K101,K102)&turn(p1)&K101>=0&K101<xlen()&K102>=0&K102<ylen())&((( !(Ch(0,0)&(K101>0|K102>0)) ) => ( !(Ch(0,0)&(K101>0|K102>0))&(!turn(p1)) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K101>G0|K102>G1))&! (Ch(G1,G0)&(K101>G1|K102>G0))])) ])
2019-10-12 15:50:20,791 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(G0,1)])&!(! Ch(1,0))
 f2:!(!Ch(0,0))=>(exists(K101:Int,K102:Int)[ (Ch(K101,K102)&turn(p1)&K101>=0&K101<xlen()&K102>=0&K102<ylen())&((( !(Ch(0,0)&(K101>0|K102>0)) ) => ( !(Ch(0,0)&(K101>0|K102>0))&(!turn(p1)) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K101>G0|K102>G1))&! (Ch(G1,G0)&(K101>G1|K102>G0))])) ])
2019-10-12 15:50:20,845 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,G0)])
 f2:forall(K99:Int,K100:Int)[ Ch(K99,K100)&turn(p2)&K99>=0&K99<xlen()&K100>=0&K100<ylen()=>((( !(Ch(0,0)&(K99>0|K100>0)) ) => ( !(Ch(0,0)&(K99>0|K100>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! (Ch(G0,1)&(K99>G0|K100>1))])&!(! (Ch(1,0)&(K99>1|K100>0)))) ]
2019-10-12 15:50:30,050 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(G0,1)])&!(! Ch(1,0))&!(turn(p2))
 f2:!(!Ch(0,0))=>(exists(K105:Int,K106:Int)[ (Ch(K105,K106)&turn(p1)&K105>=0&K105<xlen()&K106>=0&K106<ylen())&((( !(Ch(0,0)&(K105>0|K106>0)) ) => ( !(Ch(0,0)&(K105>0|K106>0))&(!turn(p1)) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K105>G0|K106>G1))&! (Ch(G1,G0)&(K105>G1|K106>G0))])&!((Ch(1,1)&(K105>1|K106>1)))) ])
2019-10-12 15:50:30,176 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(G0,1)])&!(! Ch(1,0))&!(turn(p2))
 f2:!(!Ch(0,0))=>(exists(K105:Int,K106:Int)[ (Ch(K105,K106)&turn(p1)&K105>=0&K105<xlen()&K106>=0&K106<ylen())&((( !(Ch(0,0)&(K105>0|K106>0)) ) => ( !(Ch(0,0)&(K105>0|K106>0))&(!turn(p1)) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K105>G0|K106>G1))&! (Ch(G1,G0)&(K105>G1|K106>G0))])&!((Ch(1,1)&(K105>1|K106>1)))) ])
2019-10-12 15:50:30,218 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(G0,1)])&!(! Ch(1,0))&!(turn(p2))
 f2:!(!Ch(0,0))=>(exists(K105:Int,K106:Int)[ (Ch(K105,K106)&turn(p1)&K105>=0&K105<xlen()&K106>=0&K106<ylen())&((( !(Ch(0,0)&(K105>0|K106>0)) ) => ( !(Ch(0,0)&(K105>0|K106>0))&(!turn(p1)) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K105>G0|K106>G1))&! (Ch(G1,G0)&(K105>G1|K106>G0))])&!((Ch(1,1)&(K105>1|K106>1)))) ])
2019-10-12 15:50:30,284 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,G0)])&!(Ch(1,1))
 f2:forall(K103:Int,K104:Int)[ Ch(K103,K104)&turn(p2)&K103>=0&K103<xlen()&K104>=0&K104<ylen()=>((( !(Ch(0,0)&(K103>0|K104>0)) ) => ( !(Ch(0,0)&(K103>0|K104>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! (Ch(G0,1)&(K103>G0|K104>1))])&!(! (Ch(1,0)&(K103>1|K104>0)))&!((!turn(p2)))) ]
2019-10-12 15:50:30,319 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,G0)])&!(Ch(1,1))
 f2:forall(K103:Int,K104:Int)[ Ch(K103,K104)&turn(p2)&K103>=0&K103<xlen()&K104>=0&K104<ylen()=>((( !(Ch(0,0)&(K103>0|K104>0)) ) => ( !(Ch(0,0)&(K103>0|K104>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! (Ch(G0,1)&(K103>G0|K104>1))])&!(! (Ch(1,0)&(K103>1|K104>0)))&!((!turn(p2)))) ]
2019-10-12 15:50:36,609 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(turn(p2))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&turn(p2)])&!(exists(G0:Int)[G0>=0&Ch(1,G0)&! Ch(G0,0)])
 f2:!(!Ch(0,0))=>(exists(K109:Int,K110:Int)[ (Ch(K109,K110)&turn(p1)&K109>=0&K109<xlen()&K110>=0&K110<ylen())&((( !(Ch(0,0)&(K109>0|K110>0)) ) => ( !(Ch(0,0)&(K109>0|K110>0))&(!turn(p1)) ))&!((Ch(1,1)&(K109>1|K110>1)))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&! (Ch(G1,G0)&(K109>G1|K110>G0))&! G1 > 1&(Ch(G0,G0)&(K109>G0|K110>G0))])) ])
2019-10-12 15:50:36,651 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(Ch(1,1))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&! Ch(G1,G0)&! G1 > 1&Ch(G0,G0)])
 f2:forall(K107:Int,K108:Int)[ Ch(K107,K108)&turn(p2)&K107>=0&K107<xlen()&K108>=0&K108<ylen()=>((( !(Ch(0,0)&(K107>0|K108>0)) ) => ( !(Ch(0,0)&(K107>0|K108>0))&(!turn(p1)) ))&!((!turn(p2)))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K107>G0|K108>G1))&(!turn(p2))])&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K107>1|K108>G0))&! (Ch(G0,0)&(K107>G0|K108>0))])) ]
2019-10-12 15:50:36,690 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(Ch(1,1))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&! Ch(G1,G0)&! G1 > 1&Ch(G0,G0)])
 f2:forall(K107:Int,K108:Int)[ Ch(K107,K108)&turn(p2)&K107>=0&K107<xlen()&K108>=0&K108<ylen()=>((( !(Ch(0,0)&(K107>0|K108>0)) ) => ( !(Ch(0,0)&(K107>0|K108>0))&(!turn(p1)) ))&!((!turn(p2)))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K107>G0|K108>G1))&(!turn(p2))])&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K107>1|K108>G0))&! (Ch(G0,0)&(K107>G0|K108>0))])) ]
2019-10-12 15:50:36,717 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(Ch(1,1))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&! Ch(G1,G0)&! G1 > 1&Ch(G0,G0)])
 f2:forall(K107:Int,K108:Int)[ Ch(K107,K108)&turn(p2)&K107>=0&K107<xlen()&K108>=0&K108<ylen()=>((( !(Ch(0,0)&(K107>0|K108>0)) ) => ( !(Ch(0,0)&(K107>0|K108>0))&(!turn(p1)) ))&!((!turn(p2)))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K107>G0|K108>G1))&(!turn(p2))])&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K107>1|K108>G0))&! (Ch(G0,0)&(K107>G0|K108>0))])) ]
2019-10-12 15:50:40,660 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K113:Int,K114:Int)[ (Ch(K113,K114)&turn(p1)&K113>=0&K113<xlen()&K114>=0&K114<ylen())&(( !(Ch(0,0)&(K113>0|K114>0)) ) => ( !(Ch(0,0)&(K113>0|K114>0))&(!turn(p1)) )) ])
2019-10-12 15:50:40,701 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K111:Int,K112:Int)[ Ch(K111,K112)&turn(p2)&K111>=0&K111<xlen()&K112>=0&K112<ylen()=>(( !(Ch(0,0)&(K111>0|K112>0)) ) => ( !(Ch(0,0)&(K111>0|K112>0))&(!turn(p1)) )) ]
2019-10-12 15:50:40,870 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X0:_S1)[turn(X0)])
 f2:!(!Ch(0,0))=>(exists(K117:Int,K118:Int)[ (Ch(K117,K118)&turn(p1)&K117>=0&K117<xlen()&K118>=0&K118<ylen())&(( !(Ch(0,0)&(K117>0|K118>0)) ) => ( !(Ch(0,0)&(K117>0|K118>0))&(!turn(p1)) )) ])
2019-10-12 15:50:40,906 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K115:Int,K116:Int)[ Ch(K115,K116)&turn(p2)&K115>=0&K115<xlen()&K116>=0&K116<ylen()=>((( !(Ch(0,0)&(K115>0|K116>0)) ) => ( !(Ch(0,0)&(K115>0|K116>0))&(!turn(p1)) ))&!(exists(X0:_S1)[(!turn(X0))])) ]
2019-10-12 15:50:41,298 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X0:_S1)[turn(X0)])
 f2:!(!Ch(0,0))=>(exists(K121:Int,K122:Int)[ (Ch(K121,K122)&turn(p1)&K121>=0&K121<xlen()&K122>=0&K122<ylen())&((( !(Ch(0,0)&(K121>0|K122>0)) ) => ( !(Ch(0,0)&(K121>0|K122>0))&(!turn(p1)) ))&!(exists(X0:_S1)[(!turn(X0))])) ])
2019-10-12 15:50:41,332 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X0:_S1)[turn(X0)])
 f2:forall(K119:Int,K120:Int)[ Ch(K119,K120)&turn(p2)&K119>=0&K119<xlen()&K120>=0&K120<ylen()=>((( !(Ch(0,0)&(K119>0|K120>0)) ) => ( !(Ch(0,0)&(K119>0|K120>0))&(!turn(p1)) ))&!(exists(X0:_S1)[(!turn(X0))])) ]
2019-10-12 15:50:41,361 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X0:_S1)[turn(X0)])
2019-10-12 15:50:42,211 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:_S1)[turn(G0)&! Ch(0,1)])
 f2:!(!Ch(0,0))=>(exists(K125:Int,K126:Int)[ (Ch(K125,K126)&turn(p1)&K125>=0&K125<xlen()&K126>=0&K126<ylen())&((( !(Ch(0,0)&(K125>0|K126>0)) ) => ( !(Ch(0,0)&(K125>0|K126>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(G0,1)&(K125>G0|K126>1))])) ])
2019-10-12 15:50:42,260 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! Ch(G0,1)])
 f2:forall(K123:Int,K124:Int)[ Ch(K123,K124)&turn(p2)&K123>=0&K123<xlen()&K124>=0&K124<ylen()=>((( !(Ch(0,0)&(K123>0|K124>0)) ) => ( !(Ch(0,0)&(K123>0|K124>0))&(!turn(p1)) ))&!(exists(G0:_S1)[(!turn(G0))&! (Ch(0,1)&(K123>0|K124>1))])) ]
2019-10-12 15:50:43,368 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() > G0&! Ch(G0,G0)])
 f2:!(!Ch(0,0))=>(exists(K130:Int,K131:Int)[ (Ch(K130,K131)&turn(p1)&K130>=0&K130<xlen()&K131>=0&K131<ylen())&((( !(Ch(0,0)&(K130>0|K131>0)) ) => ( !(Ch(0,0)&(K130>0|K131>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(G0,1)&(K130>G0|K131>1))])&!((Ch(1,1)&(K130>1|K131>1)))) ])
2019-10-12 15:50:43,412 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() > G0&! Ch(G0,G0)])
 f2:!(!Ch(0,0))=>(exists(K130:Int,K131:Int)[ (Ch(K130,K131)&turn(p1)&K130>=0&K130<xlen()&K131>=0&K131<ylen())&((( !(Ch(0,0)&(K130>0|K131>0)) ) => ( !(Ch(0,0)&(K130>0|K131>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(G0,1)&(K130>G0|K131>1))])&!((Ch(1,1)&(K130>1|K131>1)))) ])
2019-10-12 15:50:43,445 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! Ch(G0,1)])&!(Ch(1,1))
 f2:forall(K127:Int,K128:Int)[ Ch(K127,K128)&turn(p2)&K127>=0&K127<xlen()&K128>=0&K128<ylen()=>((( !(Ch(0,0)&(K127>0|K128>0)) ) => ( !(Ch(0,0)&(K127>0|K128>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K129:Int)[ (xlen()=K129)&(G0>=0& K129 > G0&! (Ch(G0,G0)&(K127>G0|K128>G0)))] ])) ]
2019-10-12 15:50:44,030 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() > G0&! Ch(G0,G0)])
 f2:!(!Ch(0,0))=>(exists(K135:Int,K136:Int)[ (Ch(K135,K136)&turn(p1)&K135>=0&K135<xlen()&K136>=0&K136<ylen())&((( !(Ch(0,0)&(K135>0|K136>0)) ) => ( !(Ch(0,0)&(K135>0|K136>0))&(!turn(p1)) ))&!((Ch(1,1)&(K135>1|K136>1)))&!(exists(G0:Int)[G0>=0&! G0 = 0&(Ch(1,G0)&(K135>1|K136>G0))])) ])
2019-10-12 15:50:44,074 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() > G0&! Ch(G0,G0)])
 f2:!(!Ch(0,0))=>(exists(K135:Int,K136:Int)[ (Ch(K135,K136)&turn(p1)&K135>=0&K135<xlen()&K136>=0&K136<ylen())&((( !(Ch(0,0)&(K135>0|K136>0)) ) => ( !(Ch(0,0)&(K135>0|K136>0))&(!turn(p1)) ))&!((Ch(1,1)&(K135>1|K136>1)))&!(exists(G0:Int)[G0>=0&! G0 = 0&(Ch(1,G0)&(K135>1|K136>G0))])) ])
2019-10-12 15:50:44,110 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(Ch(1,1))&!(exists(G0:Int)[G0>=0&! G0 = 0&Ch(1,G0)])
 f2:forall(K132:Int,K133:Int)[ Ch(K132,K133)&turn(p2)&K132>=0&K132<xlen()&K133>=0&K133<ylen()=>((( !(Ch(0,0)&(K132>0|K133>0)) ) => ( !(Ch(0,0)&(K132>0|K133>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K134:Int)[ (xlen()=K134)&(G0>=0& K134 > G0&! (Ch(G0,G0)&(K132>G0|K133>G0)))] ])) ]
2019-10-12 15:50:44,146 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(Ch(1,1))&!(exists(G0:Int)[G0>=0&! G0 = 0&Ch(1,G0)])
 f2:forall(K132:Int,K133:Int)[ Ch(K132,K133)&turn(p2)&K132>=0&K132<xlen()&K133>=0&K133<ylen()=>((( !(Ch(0,0)&(K132>0|K133>0)) ) => ( !(Ch(0,0)&(K132>0|K133>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K134:Int)[ (xlen()=K134)&(G0>=0& K134 > G0&! (Ch(G0,G0)&(K132>G0|K133>G0)))] ])) ]
2019-10-12 15:50:47,112 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! Ch(G0,G0)&Ch(0,0)&xlen() > G0])
 f2:!(!Ch(0,0))=>(exists(K140:Int,K141:Int)[ (Ch(K140,K141)&turn(p1)&K140>=0&K140<xlen()&K141>=0&K141<ylen())&((( !(Ch(0,0)&(K140>0|K141>0)) ) => ( !(Ch(0,0)&(K140>0|K141>0))&(!turn(p1)) ))&!((Ch(1,1)&(K140>1|K141>1)))&!(exists(G0:Int)[G0>=0&! G0 = 0&(Ch(1,G0)&(K140>1|K141>G0))])) ])
2019-10-12 15:50:47,152 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! Ch(G0,G0)&Ch(0,0)&xlen() > G0])
 f2:!(!Ch(0,0))=>(exists(K140:Int,K141:Int)[ (Ch(K140,K141)&turn(p1)&K140>=0&K140<xlen()&K141>=0&K141<ylen())&((( !(Ch(0,0)&(K140>0|K141>0)) ) => ( !(Ch(0,0)&(K140>0|K141>0))&(!turn(p1)) ))&!((Ch(1,1)&(K140>1|K141>1)))&!(exists(G0:Int)[G0>=0&! G0 = 0&(Ch(1,G0)&(K140>1|K141>G0))])) ])
2019-10-12 15:50:47,188 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(Ch(1,1))&!(exists(G0:Int)[G0>=0&! G0 = 0&Ch(1,G0)])
 f2:forall(K137:Int,K138:Int)[ Ch(K137,K138)&turn(p2)&K137>=0&K137<xlen()&K138>=0&K138<ylen()=>((( !(Ch(0,0)&(K137>0|K138>0)) ) => ( !(Ch(0,0)&(K137>0|K138>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K139:Int)[ (xlen()=K139)&(G0>=0&! (Ch(G0,G0)&(K137>G0|K138>G0))&(Ch(0,0)&(K137>0|K138>0))& K139 > G0)] ])) ]
2019-10-12 15:50:47,227 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(Ch(1,1))&!(exists(G0:Int)[G0>=0&! G0 = 0&Ch(1,G0)])
 f2:forall(K137:Int,K138:Int)[ Ch(K137,K138)&turn(p2)&K137>=0&K137<xlen()&K138>=0&K138<ylen()=>((( !(Ch(0,0)&(K137>0|K138>0)) ) => ( !(Ch(0,0)&(K137>0|K138>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K139:Int)[ (xlen()=K139)&(G0>=0&! (Ch(G0,G0)&(K137>G0|K138>G0))&(Ch(0,0)&(K137>0|K138>0))& K139 > G0)] ])) ]
2019-10-12 15:50:49,061 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! Ch(G0,G0)&Ch(0,0)&xlen() > G0])&!(! turn(p1))
 f2:!(!Ch(0,0))=>(exists(K145:Int,K146:Int)[ (Ch(K145,K146)&turn(p1)&K145>=0&K145<xlen()&K146>=0&K146<ylen())&((( !(Ch(0,0)&(K145>0|K146>0)) ) => ( !(Ch(0,0)&(K145>0|K146>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 = 0&(Ch(1,G0)&(K145>1|K146>G0))])&!((Ch(1,1)&(K145>1|K146>1)))&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K145>1|K146>G0))&! (Ch(G0,1)&(K145>G0|K146>1))])) ])
2019-10-12 15:50:49,110 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 = 0&Ch(1,G0)])&!(Ch(1,1))&!(exists(G0:Int)[G0>=0&Ch(1,G0)&! Ch(G0,1)])
 f2:forall(K142:Int,K143:Int)[ Ch(K142,K143)&turn(p2)&K142>=0&K142<xlen()&K143>=0&K143<ylen()=>((( !(Ch(0,0)&(K142>0|K143>0)) ) => ( !(Ch(0,0)&(K142>0|K143>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K144:Int)[ (xlen()=K144)&(G0>=0&! (Ch(G0,G0)&(K142>G0|K143>G0))&(Ch(0,0)&(K142>0|K143>0))& K144 > G0)] ])&!(! (!turn(p1)))) ]
2019-10-12 15:50:49,146 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 = 0&Ch(1,G0)])&!(Ch(1,1))&!(exists(G0:Int)[G0>=0&Ch(1,G0)&! Ch(G0,1)])
 f2:forall(K142:Int,K143:Int)[ Ch(K142,K143)&turn(p2)&K142>=0&K142<xlen()&K143>=0&K143<ylen()=>((( !(Ch(0,0)&(K142>0|K143>0)) ) => ( !(Ch(0,0)&(K142>0|K143>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K144:Int)[ (xlen()=K144)&(G0>=0&! (Ch(G0,G0)&(K142>G0|K143>G0))&(Ch(0,0)&(K142>0|K143>0))& K144 > G0)] ])&!(! (!turn(p1)))) ]
2019-10-12 15:50:49,772 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(! turn(p1))&!(exists(G0:_S1)[turn(G0)&! turn(p1)])
 f2:!(!Ch(0,0))=>(exists(K149:Int,K150:Int)[ (Ch(K149,K150)&turn(p1)&K149>=0&K149<xlen()&K150>=0&K150<ylen())&((( !(Ch(0,0)&(K149>0|K150>0)) ) => ( !(Ch(0,0)&(K149>0|K150>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 = 0&(Ch(1,G0)&(K149>1|K150>G0))])&!((Ch(1,1)&(K149>1|K150>1)))&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K149>1|K150>G0))&! (Ch(G0,1)&(K149>G0|K150>1))])) ])
2019-10-12 15:50:49,820 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 = 0&Ch(1,G0)])&!(Ch(1,1))&!(exists(G0:Int)[G0>=0&Ch(1,G0)&! Ch(G0,1)])
 f2:forall(K147:Int,K148:Int)[ Ch(K147,K148)&turn(p2)&K147>=0&K147<xlen()&K148>=0&K148<ylen()=>((( !(Ch(0,0)&(K147>0|K148>0)) ) => ( !(Ch(0,0)&(K147>0|K148>0))&(!turn(p1)) ))&!(! (!turn(p1)))&!(exists(G0:_S1)[(!turn(G0))&! (!turn(p1))])) ]
2019-10-12 15:50:54,890 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K153:Int,K154:Int)[ (Ch(K153,K154)&turn(p1)&K153>=0&K153<xlen()&K154>=0&K154<ylen())&(( !(Ch(0,0)&(K153>0|K154>0)) ) => ( !(Ch(0,0)&(K153>0|K154>0))&(!turn(p1)) )) ])
2019-10-12 15:50:54,935 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K151:Int,K152:Int)[ Ch(K151,K152)&turn(p2)&K151>=0&K151<xlen()&K152>=0&K152<ylen()=>(( !(Ch(0,0)&(K151>0|K152>0)) ) => ( !(Ch(0,0)&(K151>0|K152>0))&(!turn(p1)) )) ]
2019-10-12 15:50:55,114 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&xlen() = X1])
 f2:!(!Ch(0,0))=>(exists(K157:Int,K158:Int)[ (Ch(K157,K158)&turn(p1)&K157>=0&K157<xlen()&K158>=0&K158<ylen())&(( !(Ch(0,0)&(K157>0|K158>0)) ) => ( !(Ch(0,0)&(K157>0|K158>0))&(!turn(p1)) )) ])
2019-10-12 15:50:55,154 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K155:Int,K156:Int)[ Ch(K155,K156)&turn(p2)&K155>=0&K155<xlen()&K156>=0&K156<ylen()=>((( !(Ch(0,0)&(K155>0|K156>0)) ) => ( !(Ch(0,0)&(K155>0|K156>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(xlen()=X1)])) ]
2019-10-12 15:50:55,558 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&xlen() = X1])
 f2:!(!Ch(0,0))=>(exists(K161:Int,K162:Int)[ (Ch(K161,K162)&turn(p1)&K161>=0&K161<xlen()&K162>=0&K162<ylen())&((( !(Ch(0,0)&(K161>0|K162>0)) ) => ( !(Ch(0,0)&(K161>0|K162>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(xlen()=X1)])) ])
2019-10-12 15:50:55,596 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&xlen() = X1])
 f2:forall(K159:Int,K160:Int)[ Ch(K159,K160)&turn(p2)&K159>=0&K159<xlen()&K160>=0&K160<ylen()=>((( !(Ch(0,0)&(K159>0|K160>0)) ) => ( !(Ch(0,0)&(K159>0|K160>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(xlen()=X1)])) ]
2019-10-12 15:50:55,624 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&xlen() = X1])
2019-10-12 15:50:56,474 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! Ch(1,G0)])
 f2:!(!Ch(0,0))=>(exists(K165:Int,K166:Int)[ (Ch(K165,K166)&turn(p1)&K165>=0&K165<xlen()&K166>=0&K166<ylen())&((( !(Ch(0,0)&(K165>0|K166>0)) ) => ( !(Ch(0,0)&(K165>0|K166>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! (Ch(1,G0)&(K165>1|K166>G0))])) ])
2019-10-12 15:50:56,521 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! Ch(1,G0)])
 f2:forall(K163:Int,K164:Int)[ Ch(K163,K164)&turn(p2)&K163>=0&K163<xlen()&K164>=0&K164<ylen()=>((( !(Ch(0,0)&(K163>0|K164>0)) ) => ( !(Ch(0,0)&(K163>0|K164>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(1,G0)&(K163>1|K164>G0))])) ]
2019-10-12 15:50:57,124 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! Ch(1,G0)])
 f2:!(!Ch(0,0))=>(exists(K169:Int,K170:Int)[ (Ch(K169,K170)&turn(p1)&K169>=0&K169<xlen()&K170>=0&K170<ylen())&((( !(Ch(0,0)&(K169>0|K170>0)) ) => ( !(Ch(0,0)&(K169>0|K170>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(G0,1)&(K169>G0|K170>1))])) ])
2019-10-12 15:50:57,174 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(G0,1)])
 f2:forall(K167:Int,K168:Int)[ Ch(K167,K168)&turn(p2)&K167>=0&K167<xlen()&K168>=0&K168<ylen()=>((( !(Ch(0,0)&(K167>0|K168>0)) ) => ( !(Ch(0,0)&(K167>0|K168>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(1,G0)&(K167>1|K168>G0))])) ]
2019-10-12 15:50:57,215 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(G0,1)])
 f2:forall(K167:Int,K168:Int)[ Ch(K167,K168)&turn(p2)&K167>=0&K167<xlen()&K168>=0&K168<ylen()=>((( !(Ch(0,0)&(K167>0|K168>0)) ) => ( !(Ch(0,0)&(K167>0|K168>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(1,G0)&(K167>1|K168>G0))])) ]
2019-10-12 15:50:58,735 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! Ch(1,G0)])&!(! Ch(1,1))
 f2:!(!Ch(0,0))=>(exists(K173:Int,K174:Int)[ (Ch(K173,K174)&turn(p1)&K173>=0&K173<xlen()&K174>=0&K174<ylen())&((( !(Ch(0,0)&(K173>0|K174>0)) ) => ( !(Ch(0,0)&(K173>0|K174>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(G0,1)&(K173>G0|K174>1))])&!((Ch(0,1)&(K173>0|K174>1))&! (Ch(1,0)&(K173>1|K174>0)))) ])
2019-10-12 15:50:58,784 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(G0,1)])&!(Ch(0,1)&! Ch(1,0))
 f2:forall(K171:Int,K172:Int)[ Ch(K171,K172)&turn(p2)&K171>=0&K171<xlen()&K172>=0&K172<ylen()=>((( !(Ch(0,0)&(K171>0|K172>0)) ) => ( !(Ch(0,0)&(K171>0|K172>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(1,G0)&(K171>1|K172>G0))])&!(! (Ch(1,1)&(K171>1|K172>1)))) ]
2019-10-12 15:50:58,828 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(G0,1)])&!(Ch(0,1)&! Ch(1,0))
 f2:forall(K171:Int,K172:Int)[ Ch(K171,K172)&turn(p2)&K171>=0&K171<xlen()&K172>=0&K172<ylen()=>((( !(Ch(0,0)&(K171>0|K172>0)) ) => ( !(Ch(0,0)&(K171>0|K172>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(1,G0)&(K171>1|K172>G0))])&!(! (Ch(1,1)&(K171>1|K172>1)))) ]
2019-10-12 15:50:59,593 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() = G0&turn(p2)])&!(exists(G0:Int)[G0>=0&xlen() = G0&turn(p2)])
 f2:!(!Ch(0,0))=>(exists(K177:Int,K178:Int)[ (Ch(K177,K178)&turn(p1)&K177>=0&K177<xlen()&K178>=0&K178<ylen())&((( !(Ch(0,0)&(K177>0|K178>0)) ) => ( !(Ch(0,0)&(K177>0|K178>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(G0,1)&(K177>G0|K178>1))])&!((Ch(0,1)&(K177>0|K178>1))&! (Ch(1,0)&(K177>1|K178>0)))) ])
2019-10-12 15:50:59,640 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(G0,1)])&!(Ch(0,1)&! Ch(1,0))
 f2:forall(K175:Int,K176:Int)[ Ch(K175,K176)&turn(p2)&K175>=0&K175<xlen()&K176>=0&K176<ylen()=>((( !(Ch(0,0)&(K175>0|K176>0)) ) => ( !(Ch(0,0)&(K175>0|K176>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(xlen()=G0)&(!turn(p2))])&!(exists(G0:Int)[G0>=0&(xlen()=G0)&(!turn(p2))])) ]
2019-10-12 15:51:01,280 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K181:Int,K182:Int)[ (Ch(K181,K182)&turn(p1)&K181>=0&K181<xlen()&K182>=0&K182<ylen())&(( !(Ch(0,0)&(K181>0|K182>0)) ) => ( !(Ch(0,0)&(K181>0|K182>0))&(!turn(p1)) )) ])
2019-10-12 15:51:01,322 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K179:Int,K180:Int)[ Ch(K179,K180)&turn(p2)&K179>=0&K179<xlen()&K180>=0&K180<ylen()=>(( !(Ch(0,0)&(K179>0|K180>0)) ) => ( !(Ch(0,0)&(K179>0|K180>0))&(!turn(p1)) )) ]
2019-10-12 15:51:01,506 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&ylen() = X1])
 f2:!(!Ch(0,0))=>(exists(K185:Int,K186:Int)[ (Ch(K185,K186)&turn(p1)&K185>=0&K185<xlen()&K186>=0&K186<ylen())&(( !(Ch(0,0)&(K185>0|K186>0)) ) => ( !(Ch(0,0)&(K185>0|K186>0))&(!turn(p1)) )) ])
2019-10-12 15:51:01,540 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K183:Int,K184:Int)[ Ch(K183,K184)&turn(p2)&K183>=0&K183<xlen()&K184>=0&K184<ylen()=>((( !(Ch(0,0)&(K183>0|K184>0)) ) => ( !(Ch(0,0)&(K183>0|K184>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(ylen()=X1)])) ]
2019-10-12 15:51:01,919 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&ylen() = X1])
 f2:!(!Ch(0,0))=>(exists(K189:Int,K190:Int)[ (Ch(K189,K190)&turn(p1)&K189>=0&K189<xlen()&K190>=0&K190<ylen())&((( !(Ch(0,0)&(K189>0|K190>0)) ) => ( !(Ch(0,0)&(K189>0|K190>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(ylen()=X1)])) ])
2019-10-12 15:51:01,957 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&ylen() = X1])
 f2:forall(K187:Int,K188:Int)[ Ch(K187,K188)&turn(p2)&K187>=0&K187<xlen()&K188>=0&K188<ylen()=>((( !(Ch(0,0)&(K187>0|K188>0)) ) => ( !(Ch(0,0)&(K187>0|K188>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&(ylen()=X1)])) ]
2019-10-12 15:51:01,992 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&ylen() = X1])
2019-10-12 15:51:02,877 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! Ch(G0,1)])
 f2:!(!Ch(0,0))=>(exists(K193:Int,K194:Int)[ (Ch(K193,K194)&turn(p1)&K193>=0&K193<xlen()&K194>=0&K194<ylen())&((( !(Ch(0,0)&(K193>0|K194>0)) ) => ( !(Ch(0,0)&(K193>0|K194>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(ylen()=G0)&! (Ch(0,1)&(K193>0|K194>1))])) ])
2019-10-12 15:51:02,923 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() = G0&! Ch(0,1)])
 f2:forall(K191:Int,K192:Int)[ Ch(K191,K192)&turn(p2)&K191>=0&K191<xlen()&K192>=0&K192<ylen()=>((( !(Ch(0,0)&(K191>0|K192>0)) ) => ( !(Ch(0,0)&(K191>0|K192>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! (Ch(G0,1)&(K191>G0|K192>1))])) ]
2019-10-12 15:51:03,534 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! Ch(G0,1)])
 f2:!(!Ch(0,0))=>(exists(K197:Int,K198:Int)[ (Ch(K197,K198)&turn(p1)&K197>=0&K197<xlen()&K198>=0&K198<ylen())&((( !(Ch(0,0)&(K197>0|K198>0)) ) => ( !(Ch(0,0)&(K197>0|K198>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&(Ch(G0,G0)&(K197>G0|K198>G0))])) ])
2019-10-12 15:51:03,578 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&Ch(G0,G0)])
 f2:forall(K195:Int,K196:Int)[ Ch(K195,K196)&turn(p2)&K195>=0&K195<xlen()&K196>=0&K196<ylen()=>((( !(Ch(0,0)&(K195>0|K196>0)) ) => ( !(Ch(0,0)&(K195>0|K196>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! (Ch(G0,1)&(K195>G0|K196>1))])) ]
2019-10-12 15:51:05,229 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! Ch(G0,1)])&!(! Ch(1,0))
 f2:!(!Ch(0,0))=>(exists(K201:Int,K202:Int)[ (Ch(K201,K202)&turn(p1)&K201>=0&K201<xlen()&K202>=0&K202<ylen())&((( !(Ch(0,0)&(K201>0|K202>0)) ) => ( !(Ch(0,0)&(K201>0|K202>0))&(!turn(p1)) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K201>G0|K202>G1))&! (Ch(G1,0)&(K201>G1|K202>0))])) ])
2019-10-12 15:51:05,274 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,0)])
 f2:forall(K199:Int,K200:Int)[ Ch(K199,K200)&turn(p2)&K199>=0&K199<xlen()&K200>=0&K200<ylen()=>((( !(Ch(0,0)&(K199>0|K200>0)) ) => ( !(Ch(0,0)&(K199>0|K200>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! (Ch(G0,1)&(K199>G0|K200>1))])&!(! (Ch(1,0)&(K199>1|K200>0)))) ]
2019-10-12 15:51:05,309 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,0)])
 f2:forall(K199:Int,K200:Int)[ Ch(K199,K200)&turn(p2)&K199>=0&K199<xlen()&K200>=0&K200<ylen()=>((( !(Ch(0,0)&(K199>0|K200>0)) ) => ( !(Ch(0,0)&(K199>0|K200>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! (Ch(G0,1)&(K199>G0|K200>1))])&!(! (Ch(1,0)&(K199>1|K200>0)))) ]
2019-10-12 15:51:10,993 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() > G0&! Ch(G0,1)])
 f2:!(!Ch(0,0))=>(exists(K206:Int,K207:Int)[ (Ch(K206,K207)&turn(p1)&K206>=0&K206<xlen()&K207>=0&K207<ylen())&((( !(Ch(0,0)&(K206>0|K207>0)) ) => ( !(Ch(0,0)&(K206>0|K207>0))&(!turn(p1)) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K206>G0|K207>G1))&! (Ch(G1,0)&(K206>G1|K207>0))])&!((Ch(1,1)&(K206>1|K207>1)))) ])
2019-10-12 15:51:11,053 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() > G0&! Ch(G0,1)])
 f2:!(!Ch(0,0))=>(exists(K206:Int,K207:Int)[ (Ch(K206,K207)&turn(p1)&K206>=0&K206<xlen()&K207>=0&K207<ylen())&((( !(Ch(0,0)&(K206>0|K207>0)) ) => ( !(Ch(0,0)&(K206>0|K207>0))&(!turn(p1)) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K206>G0|K207>G1))&! (Ch(G1,0)&(K206>G1|K207>0))])&!((Ch(1,1)&(K206>1|K207>1)))) ])
2019-10-12 15:51:11,098 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,0)])&!(Ch(1,1))
 f2:forall(K203:Int,K204:Int)[ Ch(K203,K204)&turn(p2)&K203>=0&K203<xlen()&K204>=0&K204<ylen()=>((( !(Ch(0,0)&(K203>0|K204>0)) ) => ( !(Ch(0,0)&(K203>0|K204>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K205:Int)[ (ylen()=K205)&(G0>=0& K205 > G0&! (Ch(G0,1)&(K203>G0|K204>1)))] ])) ]
2019-10-12 15:51:11,138 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,0)])&!(Ch(1,1))
 f2:forall(K203:Int,K204:Int)[ Ch(K203,K204)&turn(p2)&K203>=0&K203<xlen()&K204>=0&K204<ylen()=>((( !(Ch(0,0)&(K203>0|K204>0)) ) => ( !(Ch(0,0)&(K203>0|K204>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K205:Int)[ (ylen()=K205)&(G0>=0& K205 > G0&! (Ch(G0,1)&(K203>G0|K204>1)))] ])) ]
2019-10-12 15:51:15,249 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() = G0&! turn(p1)])
 f2:!(!Ch(0,0))=>(exists(K210:Int,K211:Int)[ (Ch(K210,K211)&turn(p1)&K210>=0&K210<xlen()&K211>=0&K211<ylen())&((( !(Ch(0,0)&(K210>0|K211>0)) ) => ( !(Ch(0,0)&(K210>0|K211>0))&(!turn(p1)) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K210>G0|K211>G1))&! (Ch(G1,0)&(K210>G1|K211>0))])&!((Ch(1,1)&(K210>1|K211>1)))) ])
2019-10-12 15:51:15,290 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,0)])&!(Ch(1,1))
 f2:forall(K208:Int,K209:Int)[ Ch(K208,K209)&turn(p2)&K208>=0&K208<xlen()&K209>=0&K209<ylen()=>((( !(Ch(0,0)&(K208>0|K209>0)) ) => ( !(Ch(0,0)&(K208>0|K209>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(ylen()=G0)&! (!turn(p1))])) ]
2019-10-12 15:51:20,841 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K214:Int,K215:Int)[ (Ch(K214,K215)&turn(p1)&K214>=0&K214<xlen()&K215>=0&K215<ylen())&(( !(Ch(0,0)&(K214>0|K215>0)) ) => ( !(Ch(0,0)&(K214>0|K215>0))&(!turn(p1)) )) ])
2019-10-12 15:51:20,877 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K212:Int,K213:Int)[ Ch(K212,K213)&turn(p2)&K212>=0&K212<xlen()&K213>=0&K213<ylen()=>(( !(Ch(0,0)&(K212>0|K213>0)) ) => ( !(Ch(0,0)&(K212>0|K213>0))&(!turn(p1)) )) ]
2019-10-12 15:51:21,036 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&xlen() >= X1])
 f2:!(!Ch(0,0))=>(exists(K219:Int,K220:Int)[ (Ch(K219,K220)&turn(p1)&K219>=0&K219<xlen()&K220>=0&K220<ylen())&(( !(Ch(0,0)&(K219>0|K220>0)) ) => ( !(Ch(0,0)&(K219>0|K220>0))&(!turn(p1)) )) ])
2019-10-12 15:51:21,068 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K216:Int,K217:Int)[ Ch(K216,K217)&turn(p2)&K216>=0&K216<xlen()&K217>=0&K217<ylen()=>((( !(Ch(0,0)&(K216>0|K217>0)) ) => ( !(Ch(0,0)&(K216>0|K217>0))&(!turn(p1)) ))&!(exists(X1:Int)[ exists(K218:Int)[ (xlen()=K218)&(X1>=0& K218 >= X1)] ])) ]
2019-10-12 15:51:21,419 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&xlen() >= X1])
 f2:!(!Ch(0,0))=>(exists(K224:Int,K225:Int)[ (Ch(K224,K225)&turn(p1)&K224>=0&K224<xlen()&K225>=0&K225<ylen())&((( !(Ch(0,0)&(K224>0|K225>0)) ) => ( !(Ch(0,0)&(K224>0|K225>0))&(!turn(p1)) ))&!(exists(X1:Int)[ exists(K226:Int)[ (xlen()=K226)&(X1>=0& K226 > X1)] ])) ])
2019-10-12 15:51:21,449 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&xlen() > X1])
 f2:forall(K221:Int,K222:Int)[ Ch(K221,K222)&turn(p2)&K221>=0&K221<xlen()&K222>=0&K222<ylen()=>((( !(Ch(0,0)&(K221>0|K222>0)) ) => ( !(Ch(0,0)&(K221>0|K222>0))&(!turn(p1)) ))&!(exists(X1:Int)[ exists(K223:Int)[ (xlen()=K223)&(X1>=0& K223 >= X1)] ])) ]
2019-10-12 15:51:21,483 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&xlen() >= X1])
2019-10-12 15:51:22,365 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() >= G0&! Ch(0,1)])
 f2:!(!Ch(0,0))=>(exists(K230:Int,K231:Int)[ (Ch(K230,K231)&turn(p1)&K230>=0&K230<xlen()&K231>=0&K231<ylen())&((( !(Ch(0,0)&(K230>0|K231>0)) ) => ( !(Ch(0,0)&(K230>0|K231>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K232:Int)[ (xlen()=K232)&(G0>=0& K232 > G0&! (Ch(0,G0)&(K230>0|K231>G0)))] ])) ])
2019-10-12 15:51:22,413 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() >= G0&! Ch(0,1)])
 f2:!(!Ch(0,0))=>(exists(K230:Int,K231:Int)[ (Ch(K230,K231)&turn(p1)&K230>=0&K230<xlen()&K231>=0&K231<ylen())&((( !(Ch(0,0)&(K230>0|K231>0)) ) => ( !(Ch(0,0)&(K230>0|K231>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K232:Int)[ (xlen()=K232)&(G0>=0& K232 > G0&! (Ch(0,G0)&(K230>0|K231>G0)))] ])) ])
2019-10-12 15:51:22,454 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() > G0&! Ch(0,G0)])
 f2:forall(K227:Int,K228:Int)[ Ch(K227,K228)&turn(p2)&K227>=0&K227<xlen()&K228>=0&K228<ylen()=>((( !(Ch(0,0)&(K227>0|K228>0)) ) => ( !(Ch(0,0)&(K227>0|K228>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K229:Int)[ (xlen()=K229)&(G0>=0& K229 >= G0&! (Ch(0,1)&(K227>0|K228>1)))] ])) ]
2019-10-12 15:51:23,114 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() >= G0&! Ch(0,1)])
 f2:!(!Ch(0,0))=>(exists(K236:Int,K237:Int)[ (Ch(K236,K237)&turn(p1)&K236>=0&K236<xlen()&K237>=0&K237<ylen())&((( !(Ch(0,0)&(K236>0|K237>0)) ) => ( !(Ch(0,0)&(K236>0|K237>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 >= 1&(Ch(1,G0)&(K236>1|K237>G0))])) ])
2019-10-12 15:51:23,155 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 >= 1&Ch(1,G0)])
 f2:forall(K233:Int,K234:Int)[ Ch(K233,K234)&turn(p2)&K233>=0&K233<xlen()&K234>=0&K234<ylen()=>((( !(Ch(0,0)&(K233>0|K234>0)) ) => ( !(Ch(0,0)&(K233>0|K234>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K235:Int)[ (xlen()=K235)&(G0>=0& K235 >= G0&! (Ch(0,1)&(K233>0|K234>1)))] ])) ]
2019-10-12 15:51:23,197 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 >= 1&Ch(1,G0)])
 f2:forall(K233:Int,K234:Int)[ Ch(K233,K234)&turn(p2)&K233>=0&K233<xlen()&K234>=0&K234<ylen()=>((( !(Ch(0,0)&(K233>0|K234>0)) ) => ( !(Ch(0,0)&(K233>0|K234>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K235:Int)[ (xlen()=K235)&(G0>=0& K235 >= G0&! (Ch(0,1)&(K233>0|K234>1)))] ])) ]
2019-10-12 15:51:25,171 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() >= G0&! Ch(0,1)])&!(! Ch(1,1))
 f2:!(!Ch(0,0))=>(exists(K241:Int,K242:Int)[ (Ch(K241,K242)&turn(p1)&K241>=0&K241<xlen()&K242>=0&K242<ylen())&((( !(Ch(0,0)&(K241>0|K242>0)) ) => ( !(Ch(0,0)&(K241>0|K242>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 >= 1&(Ch(1,G0)&(K241>1|K242>G0))])&!(exists(G0:Int)[G0>=0&(Ch(G0,0)&(K241>G0|K242>0))&! (Ch(0,G0)&(K241>0|K242>G0))])) ])
2019-10-12 15:51:28,183 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() >= G0&! Ch(0,1)])&!(! Ch(1,1))
 f2:!(!Ch(0,0))=>(exists(K241:Int,K242:Int)[ (Ch(K241,K242)&turn(p1)&K241>=0&K241<xlen()&K242>=0&K242<ylen())&((( !(Ch(0,0)&(K241>0|K242>0)) ) => ( !(Ch(0,0)&(K241>0|K242>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 >= 1&(Ch(1,G0)&(K241>1|K242>G0))])&!(exists(G0:Int)[G0>=0&(Ch(G0,0)&(K241>G0|K242>0))&! (Ch(0,G0)&(K241>0|K242>G0))])) ])
2019-10-12 15:51:28,230 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 >= 1&Ch(1,G0)])&!(exists(G0:Int)[G0>=0&Ch(G0,0)&! Ch(0,G0)])
 f2:forall(K238:Int,K239:Int)[ Ch(K238,K239)&turn(p2)&K238>=0&K238<xlen()&K239>=0&K239<ylen()=>((( !(Ch(0,0)&(K238>0|K239>0)) ) => ( !(Ch(0,0)&(K238>0|K239>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K240:Int)[ (xlen()=K240)&(G0>=0& K240 >= G0&! (Ch(0,1)&(K238>0|K239>1)))] ])&!(! (Ch(1,1)&(K238>1|K239>1)))) ]
2019-10-12 15:51:32,891 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() >= G0&! Ch(0,1)])&!(! Ch(1,1))&!(! Ch(1,0))
 f2:!(!Ch(0,0))=>(exists(K246:Int,K247:Int)[ (Ch(K246,K247)&turn(p1)&K246>=0&K246<xlen()&K247>=0&K247<ylen())&((( !(Ch(0,0)&(K246>0|K247>0)) ) => ( !(Ch(0,0)&(K246>0|K247>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 >= 1&(Ch(1,G0)&(K246>1|K247>G0))])&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K246>G0|K247>G1))&! (Ch(G1,G0)&(K246>G1|K247>G0))])) ])
2019-10-12 15:51:33,063 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() >= G0&! Ch(0,1)])&!(! Ch(1,1))&!(! Ch(1,0))
 f2:!(!Ch(0,0))=>(exists(K246:Int,K247:Int)[ (Ch(K246,K247)&turn(p1)&K246>=0&K246<xlen()&K247>=0&K247<ylen())&((( !(Ch(0,0)&(K246>0|K247>0)) ) => ( !(Ch(0,0)&(K246>0|K247>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 >= 1&(Ch(1,G0)&(K246>1|K247>G0))])&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K246>G0|K247>G1))&! (Ch(G1,G0)&(K246>G1|K247>G0))])) ])
2019-10-12 15:51:33,131 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 >= 1&Ch(1,G0)])&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,G0)])
 f2:forall(K243:Int,K244:Int)[ Ch(K243,K244)&turn(p2)&K243>=0&K243<xlen()&K244>=0&K244<ylen()=>((( !(Ch(0,0)&(K243>0|K244>0)) ) => ( !(Ch(0,0)&(K243>0|K244>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K245:Int)[ (xlen()=K245)&(G0>=0& K245 >= G0&! (Ch(0,1)&(K243>0|K244>1)))] ])&!(! (Ch(1,1)&(K243>1|K244>1)))&!(! (Ch(1,0)&(K243>1|K244>0)))) ]
2019-10-12 15:51:33,986 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() >= G0&turn(p2)])&!(exists(G0:Int)[G0>=0&xlen() >= G0&turn(p2)])&!(exists(G0:Int)[G0>=0&Ch(1,G0)&! Ch(G0,0)])
 f2:!(!Ch(0,0))=>(exists(K252:Int,K253:Int)[ (Ch(K252,K253)&turn(p1)&K252>=0&K252<xlen()&K253>=0&K253<ylen())&((( !(Ch(0,0)&(K252>0|K253>0)) ) => ( !(Ch(0,0)&(K252>0|K253>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 >= 1&(Ch(1,G0)&(K252>1|K253>G0))])&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K252>G0|K253>G1))&! (Ch(G1,G0)&(K252>G1|K253>G0))])) ])
2019-10-12 15:51:34,034 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 >= 1&Ch(1,G0)])&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,G0)])
 f2:forall(K248:Int,K249:Int)[ Ch(K248,K249)&turn(p2)&K248>=0&K248<xlen()&K249>=0&K249<ylen()=>((( !(Ch(0,0)&(K248>0|K249>0)) ) => ( !(Ch(0,0)&(K248>0|K249>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K250:Int)[ (xlen()=K250)&(G0>=0& K250 >= G0&(!turn(p2)))] ])&!(exists(G0:Int)[ exists(K251:Int)[ (xlen()=K251)&(G0>=0& K251 >= G0&(!turn(p2)))] ])&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K248>1|K249>G0))&! (Ch(G0,0)&(K248>G0|K249>0))])) ]
2019-10-12 15:51:35,829 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K256:Int,K257:Int)[ (Ch(K256,K257)&turn(p1)&K256>=0&K256<xlen()&K257>=0&K257<ylen())&(( !(Ch(0,0)&(K256>0|K257>0)) ) => ( !(Ch(0,0)&(K256>0|K257>0))&(!turn(p1)) )) ])
2019-10-12 15:51:35,869 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K254:Int,K255:Int)[ Ch(K254,K255)&turn(p2)&K254>=0&K254<xlen()&K255>=0&K255<ylen()=>(( !(Ch(0,0)&(K254>0|K255>0)) ) => ( !(Ch(0,0)&(K254>0|K255>0))&(!turn(p1)) )) ]
2019-10-12 15:51:36,036 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&ylen() >= X1])
 f2:!(!Ch(0,0))=>(exists(K261:Int,K262:Int)[ (Ch(K261,K262)&turn(p1)&K261>=0&K261<xlen()&K262>=0&K262<ylen())&(( !(Ch(0,0)&(K261>0|K262>0)) ) => ( !(Ch(0,0)&(K261>0|K262>0))&(!turn(p1)) )) ])
2019-10-12 15:51:36,065 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K258:Int,K259:Int)[ Ch(K258,K259)&turn(p2)&K258>=0&K258<xlen()&K259>=0&K259<ylen()=>((( !(Ch(0,0)&(K258>0|K259>0)) ) => ( !(Ch(0,0)&(K258>0|K259>0))&(!turn(p1)) ))&!(exists(X1:Int)[ exists(K260:Int)[ (ylen()=K260)&(X1>=0& K260 >= X1)] ])) ]
2019-10-12 15:51:36,465 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&ylen() >= X1])
 f2:!(!Ch(0,0))=>(exists(K266:Int,K267:Int)[ (Ch(K266,K267)&turn(p1)&K266>=0&K266<xlen()&K267>=0&K267<ylen())&((( !(Ch(0,0)&(K266>0|K267>0)) ) => ( !(Ch(0,0)&(K266>0|K267>0))&(!turn(p1)) ))&!(exists(X1:Int)[ exists(K268:Int)[ (xlen()=K268)&(X1>=0& K268 >= X1)] ])) ])
2019-10-12 15:51:36,503 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&xlen() >= X1])
 f2:forall(K263:Int,K264:Int)[ Ch(K263,K264)&turn(p2)&K263>=0&K263<xlen()&K264>=0&K264<ylen()=>((( !(Ch(0,0)&(K263>0|K264>0)) ) => ( !(Ch(0,0)&(K263>0|K264>0))&(!turn(p1)) ))&!(exists(X1:Int)[ exists(K265:Int)[ (ylen()=K265)&(X1>=0& K265 >= X1)] ])) ]
2019-10-12 15:51:36,540 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&ylen() >= X1])
2019-10-12 15:51:37,430 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])
 f2:!(!Ch(0,0))=>(exists(K271:Int,K272:Int)[ (Ch(K271,K272)&turn(p1)&K271>=0&K271<xlen()&K272>=0&K272<ylen())&((( !(Ch(0,0)&(K271>0|K272>0)) ) => ( !(Ch(0,0)&(K271>0|K272>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! (Ch(G0,1)&(K271>G0|K272>1))])) ])
2019-10-12 15:51:37,484 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])
 f2:!(!Ch(0,0))=>(exists(K271:Int,K272:Int)[ (Ch(K271,K272)&turn(p1)&K271>=0&K271<xlen()&K272>=0&K272<ylen())&((( !(Ch(0,0)&(K271>0|K272>0)) ) => ( !(Ch(0,0)&(K271>0|K272>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! (Ch(G0,1)&(K271>G0|K272>1))])) ])
2019-10-12 15:51:37,522 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! Ch(G0,1)])
 f2:forall(K269:Int,K270:Int)[ Ch(K269,K270)&turn(p2)&K269>=0&K269<xlen()&K270>=0&K270<ylen()=>((( !(Ch(0,0)&(K269>0|K270>0)) ) => ( !(Ch(0,0)&(K269>0|K270>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! (Ch(0,G0)&(K269>0|K270>G0))])) ]
2019-10-12 15:51:38,148 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])
 f2:!(!Ch(0,0))=>(exists(K275:Int,K276:Int)[ (Ch(K275,K276)&turn(p1)&K275>=0&K275<xlen()&K276>=0&K276<ylen())&((( !(Ch(0,0)&(K275>0|K276>0)) ) => ( !(Ch(0,0)&(K275>0|K276>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 = 0&(Ch(G0,1)&(K275>G0|K276>1))])) ])
2019-10-12 15:51:38,200 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])
 f2:!(!Ch(0,0))=>(exists(K275:Int,K276:Int)[ (Ch(K275,K276)&turn(p1)&K275>=0&K275<xlen()&K276>=0&K276<ylen())&((( !(Ch(0,0)&(K275>0|K276>0)) ) => ( !(Ch(0,0)&(K275>0|K276>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 = 0&(Ch(G0,1)&(K275>G0|K276>1))])) ])
2019-10-12 15:51:38,245 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 = 0&Ch(G0,1)])
 f2:forall(K273:Int,K274:Int)[ Ch(K273,K274)&turn(p2)&K273>=0&K273<xlen()&K274>=0&K274<ylen()=>((( !(Ch(0,0)&(K273>0|K274>0)) ) => ( !(Ch(0,0)&(K273>0|K274>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! (Ch(0,G0)&(K273>0|K274>G0))])) ]
2019-10-12 15:51:40,207 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(G0,G0)])
 f2:!(!Ch(0,0))=>(exists(K279:Int,K280:Int)[ (Ch(K279,K280)&turn(p1)&K279>=0&K279<xlen()&K280>=0&K280<ylen())&((( !(Ch(0,0)&(K279>0|K280>0)) ) => ( !(Ch(0,0)&(K279>0|K280>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 = 0&(Ch(G0,1)&(K279>G0|K280>1))])&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K279>0|K280>G0))&! (Ch(G0,0)&(K279>G0|K280>0))])) ])
2019-10-12 15:51:40,256 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(G0,G0)])
 f2:!(!Ch(0,0))=>(exists(K279:Int,K280:Int)[ (Ch(K279,K280)&turn(p1)&K279>=0&K279<xlen()&K280>=0&K280<ylen())&((( !(Ch(0,0)&(K279>0|K280>0)) ) => ( !(Ch(0,0)&(K279>0|K280>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 = 0&(Ch(G0,1)&(K279>G0|K280>1))])&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K279>0|K280>G0))&! (Ch(G0,0)&(K279>G0|K280>0))])) ])
2019-10-12 15:51:40,294 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 = 0&Ch(G0,1)])&!(exists(G0:Int)[G0>=0&Ch(0,G0)&! Ch(G0,0)])
 f2:forall(K277:Int,K278:Int)[ Ch(K277,K278)&turn(p2)&K277>=0&K277<xlen()&K278>=0&K278<ylen()=>((( !(Ch(0,0)&(K277>0|K278>0)) ) => ( !(Ch(0,0)&(K277>0|K278>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! (Ch(G0,G0)&(K277>G0|K278>G0))])) ]
2019-10-12 15:51:42,783 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() >= G0&! turn(p1)])
 f2:!(!Ch(0,0))=>(exists(K284:Int,K285:Int)[ (Ch(K284,K285)&turn(p1)&K284>=0&K284<xlen()&K285>=0&K285<ylen())&((( !(Ch(0,0)&(K284>0|K285>0)) ) => ( !(Ch(0,0)&(K284>0|K285>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 = 0&(Ch(G0,1)&(K284>G0|K285>1))])&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K284>0|K285>G0))&! (Ch(G0,0)&(K284>G0|K285>0))])) ])
2019-10-12 15:51:42,823 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 = 0&Ch(G0,1)])&!(exists(G0:Int)[G0>=0&Ch(0,G0)&! Ch(G0,0)])
 f2:forall(K281:Int,K282:Int)[ Ch(K281,K282)&turn(p2)&K281>=0&K281<xlen()&K282>=0&K282<ylen()=>((( !(Ch(0,0)&(K281>0|K282>0)) ) => ( !(Ch(0,0)&(K281>0|K282>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K283:Int)[ (ylen()=K283)&(G0>=0& K283 >= G0&! (!turn(p1)))] ])) ]
2019-10-12 15:51:46,464 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K288:Int,K289:Int)[ (Ch(K288,K289)&turn(p1)&K288>=0&K288<xlen()&K289>=0&K289<ylen())&(( !(Ch(0,0)&(K288>0|K289>0)) ) => ( !(Ch(0,0)&(K288>0|K289>0))&(!turn(p1)) )) ])
2019-10-12 15:51:46,497 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K286:Int,K287:Int)[ Ch(K286,K287)&turn(p2)&K286>=0&K286<xlen()&K287>=0&K287<ylen()=>(( !(Ch(0,0)&(K286>0|K287>0)) ) => ( !(Ch(0,0)&(K286>0|K287>0))&(!turn(p1)) )) ]
2019-10-12 15:51:46,649 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X0:_S1)[! turn(X0)])
 f2:!(!Ch(0,0))=>(exists(K292:Int,K293:Int)[ (Ch(K292,K293)&turn(p1)&K292>=0&K292<xlen()&K293>=0&K293<ylen())&(( !(Ch(0,0)&(K292>0|K293>0)) ) => ( !(Ch(0,0)&(K292>0|K293>0))&(!turn(p1)) )) ])
2019-10-12 15:51:46,677 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K290:Int,K291:Int)[ Ch(K290,K291)&turn(p2)&K290>=0&K290<xlen()&K291>=0&K291<ylen()=>((( !(Ch(0,0)&(K290>0|K291>0)) ) => ( !(Ch(0,0)&(K290>0|K291>0))&(!turn(p1)) ))&!(exists(X0:_S1)[! (!turn(X0))])) ]
2019-10-12 15:51:47,017 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X0:_S1)[! turn(X0)])
 f2:!(!Ch(0,0))=>(exists(K296:Int,K297:Int)[ (Ch(K296,K297)&turn(p1)&K296>=0&K296<xlen()&K297>=0&K297<ylen())&((( !(Ch(0,0)&(K296>0|K297>0)) ) => ( !(Ch(0,0)&(K296>0|K297>0))&(!turn(p1)) ))&!(exists(X1:Int)[ exists(K298:Int)[ (ylen()=K298)&(X1>=0& K298 > X1)] ])) ])
2019-10-12 15:51:47,045 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&ylen() > X1])
 f2:forall(K294:Int,K295:Int)[ Ch(K294,K295)&turn(p2)&K294>=0&K294<xlen()&K295>=0&K295<ylen()=>((( !(Ch(0,0)&(K294>0|K295>0)) ) => ( !(Ch(0,0)&(K294>0|K295>0))&(!turn(p1)) ))&!(exists(X0:_S1)[! (!turn(X0))])) ]
2019-10-12 15:51:47,072 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X0:_S1)[! turn(X0)])
2019-10-12 15:51:47,886 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:_S1)[! turn(G0)&! Ch(0,1)])
 f2:!(!Ch(0,0))=>(exists(K301:Int,K302:Int)[ (Ch(K301,K302)&turn(p1)&K301>=0&K301<xlen()&K302>=0&K302<ylen())&((( !(Ch(0,0)&(K301>0|K302>0)) ) => ( !(Ch(0,0)&(K301>0|K302>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K303:Int)[ (ylen()=K303)&(G0>=0& K303 > G0&! (Ch(0,G0)&(K301>0|K302>G0)))] ])) ])
2019-10-12 15:51:47,928 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() > G0&! Ch(0,G0)])
 f2:forall(K299:Int,K300:Int)[ Ch(K299,K300)&turn(p2)&K299>=0&K299<xlen()&K300>=0&K300<ylen()=>((( !(Ch(0,0)&(K299>0|K300>0)) ) => ( !(Ch(0,0)&(K299>0|K300>0))&(!turn(p1)) ))&!(exists(G0:_S1)[! (!turn(G0))&! (Ch(0,1)&(K299>0|K300>1))])) ]
2019-10-12 15:51:49,646 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:_S1)[! turn(G0)&! Ch(0,1)])&!(! Ch(1,1))
 f2:!(!Ch(0,0))=>(exists(K306:Int,K307:Int)[ (Ch(K306,K307)&turn(p1)&K306>=0&K306<xlen()&K307>=0&K307<ylen())&((( !(Ch(0,0)&(K306>0|K307>0)) ) => ( !(Ch(0,0)&(K306>0|K307>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K308:Int)[ (ylen()=K308)&(G0>=0& K308 > G0&! (Ch(0,G0)&(K306>0|K307>G0)))] ])&!((Ch(1,1)&(K306>1|K307>1)))) ])
2019-10-12 15:51:49,687 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() > G0&! Ch(0,G0)])&!(Ch(1,1))
 f2:forall(K304:Int,K305:Int)[ Ch(K304,K305)&turn(p2)&K304>=0&K304<xlen()&K305>=0&K305<ylen()=>((( !(Ch(0,0)&(K304>0|K305>0)) ) => ( !(Ch(0,0)&(K304>0|K305>0))&(!turn(p1)) ))&!(exists(G0:_S1)[! (!turn(G0))&! (Ch(0,1)&(K304>0|K305>1))])&!(! (Ch(1,1)&(K304>1|K305>1)))) ]
2019-10-12 15:51:51,594 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:_S1)[! turn(G0)&! Ch(0,1)])&!(! Ch(1,1))&!(! Ch(1,0))
 f2:!(!Ch(0,0))=>(exists(K311:Int,K312:Int)[ (Ch(K311,K312)&turn(p1)&K311>=0&K311<xlen()&K312>=0&K312<ylen())&((( !(Ch(0,0)&(K311>0|K312>0)) ) => ( !(Ch(0,0)&(K311>0|K312>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K313:Int)[ (ylen()=K313)&(G0>=0& K313 > G0&! (Ch(0,G0)&(K311>0|K312>G0)))] ])&!((Ch(1,1)&(K311>1|K312>1)))&!(! (Ch(1,0)&(K311>1|K312>0)))) ])
2019-10-12 15:51:51,638 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() > G0&! Ch(0,G0)])&!(Ch(1,1))&!(! Ch(1,0))
 f2:forall(K309:Int,K310:Int)[ Ch(K309,K310)&turn(p2)&K309>=0&K309<xlen()&K310>=0&K310<ylen()=>((( !(Ch(0,0)&(K309>0|K310>0)) ) => ( !(Ch(0,0)&(K309>0|K310>0))&(!turn(p1)) ))&!(exists(G0:_S1)[! (!turn(G0))&! (Ch(0,1)&(K309>0|K310>1))])&!(! (Ch(1,1)&(K309>1|K310>1)))&!(! (Ch(1,0)&(K309>1|K310>0)))) ]
2019-10-12 15:51:52,446 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:_S1)[! turn(G0)&turn(p2)])&!(exists(G0:_S1)[! turn(G0)&turn(p2)])&!(exists(G0:Int)[G0>=0&Ch(G0,1)&! Ch(G0,0)])
 f2:!(!Ch(0,0))=>(exists(K316:Int,K317:Int)[ (Ch(K316,K317)&turn(p1)&K316>=0&K316<xlen()&K317>=0&K317<ylen())&((( !(Ch(0,0)&(K316>0|K317>0)) ) => ( !(Ch(0,0)&(K316>0|K317>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K318:Int)[ (ylen()=K318)&(G0>=0& K318 > G0&! (Ch(0,G0)&(K316>0|K317>G0)))] ])&!((Ch(1,1)&(K316>1|K317>1)))&!(! (Ch(1,0)&(K316>1|K317>0)))) ])
2019-10-12 15:51:52,490 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() > G0&! Ch(0,G0)])&!(Ch(1,1))&!(! Ch(1,0))
 f2:forall(K314:Int,K315:Int)[ Ch(K314,K315)&turn(p2)&K314>=0&K314<xlen()&K315>=0&K315<ylen()=>((( !(Ch(0,0)&(K314>0|K315>0)) ) => ( !(Ch(0,0)&(K314>0|K315>0))&(!turn(p1)) ))&!(exists(G0:_S1)[! (!turn(G0))&(!turn(p2))])&!(exists(G0:_S1)[! (!turn(G0))&(!turn(p2))])&!(exists(G0:Int)[G0>=0&(Ch(G0,1)&(K314>G0|K315>1))&! (Ch(G0,0)&(K314>G0|K315>0))])) ]
2019-10-12 15:51:52,554 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() > G0&! Ch(0,G0)])&!(Ch(1,1))&!(! Ch(1,0))
 f2:forall(K314:Int,K315:Int)[ Ch(K314,K315)&turn(p2)&K314>=0&K314<xlen()&K315>=0&K315<ylen()=>((( !(Ch(0,0)&(K314>0|K315>0)) ) => ( !(Ch(0,0)&(K314>0|K315>0))&(!turn(p1)) ))&!(exists(G0:_S1)[! (!turn(G0))&(!turn(p2))])&!(exists(G0:_S1)[! (!turn(G0))&(!turn(p2))])&!(exists(G0:Int)[G0>=0&(Ch(G0,1)&(K314>G0|K315>1))&! (Ch(G0,0)&(K314>G0|K315>0))])) ]
2019-10-12 15:51:52,586 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() > G0&! Ch(0,G0)])&!(Ch(1,1))&!(! Ch(1,0))
 f2:forall(K314:Int,K315:Int)[ Ch(K314,K315)&turn(p2)&K314>=0&K314<xlen()&K315>=0&K315<ylen()=>((( !(Ch(0,0)&(K314>0|K315>0)) ) => ( !(Ch(0,0)&(K314>0|K315>0))&(!turn(p1)) ))&!(exists(G0:_S1)[! (!turn(G0))&(!turn(p2))])&!(exists(G0:_S1)[! (!turn(G0))&(!turn(p2))])&!(exists(G0:Int)[G0>=0&(Ch(G0,1)&(K314>G0|K315>1))&! (Ch(G0,0)&(K314>G0|K315>0))])) ]
2019-10-12 15:51:58,984 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:_S1)[! turn(G0)&turn(p2)])&!(exists(G0:_S1)[! turn(G0)&turn(p2)])&!(exists(G0:Int)[G0>=0&Ch(G0,G0)&! Ch(G0,0)])
 f2:!(!Ch(0,0))=>(exists(K321:Int,K322:Int)[ (Ch(K321,K322)&turn(p1)&K321>=0&K321<xlen()&K322>=0&K322<ylen())&((( !(Ch(0,0)&(K321>0|K322>0)) ) => ( !(Ch(0,0)&(K321>0|K322>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K323:Int)[ (ylen()=K323)&(G0>=0& K323 > G0&! (Ch(0,G0)&(K321>0|K322>G0)))] ])&!((Ch(1,1)&(K321>1|K322>1)))&!(! (Ch(1,0)&(K321>1|K322>0)))) ])
2019-10-12 15:51:59,027 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() > G0&! Ch(0,G0)])&!(Ch(1,1))&!(! Ch(1,0))
 f2:forall(K319:Int,K320:Int)[ Ch(K319,K320)&turn(p2)&K319>=0&K319<xlen()&K320>=0&K320<ylen()=>((( !(Ch(0,0)&(K319>0|K320>0)) ) => ( !(Ch(0,0)&(K319>0|K320>0))&(!turn(p1)) ))&!(exists(G0:_S1)[! (!turn(G0))&(!turn(p2))])&!(exists(G0:_S1)[! (!turn(G0))&(!turn(p2))])&!(exists(G0:Int)[G0>=0&(Ch(G0,G0)&(K319>G0|K320>G0))&! (Ch(G0,0)&(K319>G0|K320>0))])) ]
2019-10-12 15:51:59,103 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() > G0&! Ch(0,G0)])&!(Ch(1,1))&!(! Ch(1,0))
 f2:forall(K319:Int,K320:Int)[ Ch(K319,K320)&turn(p2)&K319>=0&K319<xlen()&K320>=0&K320<ylen()=>((( !(Ch(0,0)&(K319>0|K320>0)) ) => ( !(Ch(0,0)&(K319>0|K320>0))&(!turn(p1)) ))&!(exists(G0:_S1)[! (!turn(G0))&(!turn(p2))])&!(exists(G0:_S1)[! (!turn(G0))&(!turn(p2))])&!(exists(G0:Int)[G0>=0&(Ch(G0,G0)&(K319>G0|K320>G0))&! (Ch(G0,0)&(K319>G0|K320>0))])) ]
2019-10-12 15:51:59,137 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() > G0&! Ch(0,G0)])&!(Ch(1,1))&!(! Ch(1,0))
 f2:forall(K319:Int,K320:Int)[ Ch(K319,K320)&turn(p2)&K319>=0&K319<xlen()&K320>=0&K320<ylen()=>((( !(Ch(0,0)&(K319>0|K320>0)) ) => ( !(Ch(0,0)&(K319>0|K320>0))&(!turn(p1)) ))&!(exists(G0:_S1)[! (!turn(G0))&(!turn(p2))])&!(exists(G0:_S1)[! (!turn(G0))&(!turn(p2))])&!(exists(G0:Int)[G0>=0&(Ch(G0,G0)&(K319>G0|K320>G0))&! (Ch(G0,0)&(K319>G0|K320>0))])) ]
2019-10-12 15:52:03,396 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K326:Int,K327:Int)[ (Ch(K326,K327)&turn(p1)&K326>=0&K326<xlen()&K327>=0&K327<ylen())&(( !(Ch(0,0)&(K326>0|K327>0)) ) => ( !(Ch(0,0)&(K326>0|K327>0))&(!turn(p1)) )) ])
2019-10-12 15:52:03,435 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K324:Int,K325:Int)[ Ch(K324,K325)&turn(p2)&K324>=0&K324<xlen()&K325>=0&K325<ylen()=>(( !(Ch(0,0)&(K324>0|K325>0)) ) => ( !(Ch(0,0)&(K324>0|K325>0))&(!turn(p1)) )) ]
2019-10-12 15:52:03,620 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&! xlen() = X1])
 f2:!(!Ch(0,0))=>(exists(K330:Int,K331:Int)[ (Ch(K330,K331)&turn(p1)&K330>=0&K330<xlen()&K331>=0&K331<ylen())&(( !(Ch(0,0)&(K330>0|K331>0)) ) => ( !(Ch(0,0)&(K330>0|K331>0))&(!turn(p1)) )) ])
2019-10-12 15:52:03,660 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K328:Int,K329:Int)[ Ch(K328,K329)&turn(p2)&K328>=0&K328<xlen()&K329>=0&K329<ylen()=>((( !(Ch(0,0)&(K328>0|K329>0)) ) => ( !(Ch(0,0)&(K328>0|K329>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&! (xlen()=X1)])) ]
2019-10-12 15:52:04,066 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&! xlen() = X1])
 f2:!(!Ch(0,0))=>(exists(K334:Int,K335:Int)[ (Ch(K334,K335)&turn(p1)&K334>=0&K334<xlen()&K335>=0&K335<ylen())&((( !(Ch(0,0)&(K334>0|K335>0)) ) => ( !(Ch(0,0)&(K334>0|K335>0))&(!turn(p1)) ))&!(exists(X1:Int)[ exists(K336:Int)[ (ylen()=K336)&(X1>=0& K336 >= X1)] ])) ])
2019-10-12 15:52:04,104 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&ylen() >= X1])
 f2:forall(K332:Int,K333:Int)[ Ch(K332,K333)&turn(p2)&K332>=0&K332<xlen()&K333>=0&K333<ylen()=>((( !(Ch(0,0)&(K332>0|K333>0)) ) => ( !(Ch(0,0)&(K332>0|K333>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&! (xlen()=X1)])) ]
2019-10-12 15:52:04,135 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&! xlen() = X1])
2019-10-12 15:52:05,090 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! Ch(1,G0)])
 f2:!(!Ch(0,0))=>(exists(K339:Int,K340:Int)[ (Ch(K339,K340)&turn(p1)&K339>=0&K339<xlen()&K340>=0&K340<ylen())&((( !(Ch(0,0)&(K339>0|K340>0)) ) => ( !(Ch(0,0)&(K339>0|K340>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K341:Int)[ (ylen()=K341)&(G0>=0& K341 >= G0&! (Ch(0,1)&(K339>0|K340>1)))] ])) ])
2019-10-12 15:52:05,135 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() >= G0&! Ch(0,1)])
 f2:forall(K337:Int,K338:Int)[ Ch(K337,K338)&turn(p2)&K337>=0&K337<xlen()&K338>=0&K338<ylen()=>((( !(Ch(0,0)&(K337>0|K338>0)) ) => ( !(Ch(0,0)&(K337>0|K338>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 0&! (Ch(1,G0)&(K337>1|K338>G0))])) ]
2019-10-12 15:52:05,703 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! xlen() = G0&! turn(p1)])
 f2:!(!Ch(0,0))=>(exists(K344:Int,K345:Int)[ (Ch(K344,K345)&turn(p1)&K344>=0&K344<xlen()&K345>=0&K345<ylen())&((( !(Ch(0,0)&(K344>0|K345>0)) ) => ( !(Ch(0,0)&(K344>0|K345>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K346:Int)[ (ylen()=K346)&(G0>=0& K346 >= G0&! (Ch(0,1)&(K344>0|K345>1)))] ])) ])
2019-10-12 15:52:05,746 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() >= G0&! Ch(0,1)])
 f2:forall(K342:Int,K343:Int)[ Ch(K342,K343)&turn(p2)&K342>=0&K342<xlen()&K343>=0&K343<ylen()=>((( !(Ch(0,0)&(K342>0|K343>0)) ) => ( !(Ch(0,0)&(K342>0|K343>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! (xlen()=G0)&! (!turn(p1))])) ]
2019-10-12 15:52:07,333 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K349:Int,K350:Int)[ (Ch(K349,K350)&turn(p1)&K349>=0&K349<xlen()&K350>=0&K350<ylen())&(( !(Ch(0,0)&(K349>0|K350>0)) ) => ( !(Ch(0,0)&(K349>0|K350>0))&(!turn(p1)) )) ])
2019-10-12 15:52:07,377 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K347:Int,K348:Int)[ Ch(K347,K348)&turn(p2)&K347>=0&K347<xlen()&K348>=0&K348<ylen()=>(( !(Ch(0,0)&(K347>0|K348>0)) ) => ( !(Ch(0,0)&(K347>0|K348>0))&(!turn(p1)) )) ]
2019-10-12 15:52:07,558 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&! ylen() = X1])
 f2:!(!Ch(0,0))=>(exists(K353:Int,K354:Int)[ (Ch(K353,K354)&turn(p1)&K353>=0&K353<xlen()&K354>=0&K354<ylen())&(( !(Ch(0,0)&(K353>0|K354>0)) ) => ( !(Ch(0,0)&(K353>0|K354>0))&(!turn(p1)) )) ])
2019-10-12 15:52:07,593 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K351:Int,K352:Int)[ Ch(K351,K352)&turn(p2)&K351>=0&K351<xlen()&K352>=0&K352<ylen()=>((( !(Ch(0,0)&(K351>0|K352>0)) ) => ( !(Ch(0,0)&(K351>0|K352>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&! (ylen()=X1)])) ]
2019-10-12 15:52:08,013 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&! ylen() = X1])
 f2:!(!Ch(0,0))=>(exists(K357:Int,K358:Int)[ (Ch(K357,K358)&turn(p1)&K357>=0&K357<xlen()&K358>=0&K358<ylen())&((( !(Ch(0,0)&(K357>0|K358>0)) ) => ( !(Ch(0,0)&(K357>0|K358>0))&(!turn(p1)) ))&!(exists(X0:_S1)[! (!turn(X0))])) ])
2019-10-12 15:52:08,053 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X0:_S1)[! turn(X0)])
 f2:forall(K355:Int,K356:Int)[ Ch(K355,K356)&turn(p2)&K355>=0&K355<xlen()&K356>=0&K356<ylen()=>((( !(Ch(0,0)&(K355>0|K356>0)) ) => ( !(Ch(0,0)&(K355>0|K356>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&! (ylen()=X1)])) ]
2019-10-12 15:52:08,088 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&! ylen() = X1])
2019-10-12 15:52:09,011 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(0,G0)])
 f2:!(!Ch(0,0))=>(exists(K361:Int,K362:Int)[ (Ch(K361,K362)&turn(p1)&K361>=0&K361<xlen()&K362>=0&K362<ylen())&((( !(Ch(0,0)&(K361>0|K362>0)) ) => ( !(Ch(0,0)&(K361>0|K362>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(1,G0)&(K361>1|K362>G0))])) ])
2019-10-12 15:52:09,065 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(0,G0)])
 f2:!(!Ch(0,0))=>(exists(K361:Int,K362:Int)[ (Ch(K361,K362)&turn(p1)&K361>=0&K361<xlen()&K362>=0&K362<ylen())&((( !(Ch(0,0)&(K361>0|K362>0)) ) => ( !(Ch(0,0)&(K361>0|K362>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(1,G0)&(K361>1|K362>G0))])) ])
2019-10-12 15:52:09,113 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! Ch(1,G0)])
 f2:forall(K359:Int,K360:Int)[ Ch(K359,K360)&turn(p2)&K359>=0&K359<xlen()&K360>=0&K360<ylen()=>((( !(Ch(0,0)&(K359>0|K360>0)) ) => ( !(Ch(0,0)&(K359>0|K360>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! (Ch(0,G0)&(K359>0|K360>G0))])) ]
2019-10-12 15:52:09,793 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(0,G0)])
 f2:!(!Ch(0,0))=>(exists(K365:Int,K366:Int)[ (Ch(K365,K366)&turn(p1)&K365>=0&K365<xlen()&K366>=0&K366<ylen())&((( !(Ch(0,0)&(K365>0|K366>0)) ) => ( !(Ch(0,0)&(K365>0|K366>0))&(!turn(p1)) ))&!(exists(G0:_S1)[! (!turn(G0))&(Ch(1,1)&(K365>1|K366>1))])) ])
2019-10-12 15:52:09,846 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(0,G0)])
 f2:!(!Ch(0,0))=>(exists(K365:Int,K366:Int)[ (Ch(K365,K366)&turn(p1)&K365>=0&K365<xlen()&K366>=0&K366<ylen())&((( !(Ch(0,0)&(K365>0|K366>0)) ) => ( !(Ch(0,0)&(K365>0|K366>0))&(!turn(p1)) ))&!(exists(G0:_S1)[! (!turn(G0))&(Ch(1,1)&(K365>1|K366>1))])) ])
2019-10-12 15:52:09,892 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:_S1)[! turn(G0)&Ch(1,1)])
 f2:forall(K363:Int,K364:Int)[ Ch(K363,K364)&turn(p2)&K363>=0&K363<xlen()&K364>=0&K364<ylen()=>((( !(Ch(0,0)&(K363>0|K364>0)) ) => ( !(Ch(0,0)&(K363>0|K364>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! (Ch(0,G0)&(K363>0|K364>G0))])) ]
2019-10-12 15:52:11,929 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(G0,1)])
 f2:!(!Ch(0,0))=>(exists(K369:Int,K370:Int)[ (Ch(K369,K370)&turn(p1)&K369>=0&K369<xlen()&K370>=0&K370<ylen())&((( !(Ch(0,0)&(K369>0|K370>0)) ) => ( !(Ch(0,0)&(K369>0|K370>0))&(!turn(p1)) ))&!(exists(G0:_S1)[! (!turn(G0))&(Ch(1,1)&(K369>1|K370>1))])&!((Ch(0,1)&(K369>0|K370>1))&! (Ch(1,0)&(K369>1|K370>0)))) ])
2019-10-12 15:52:11,988 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(G0,1)])
 f2:!(!Ch(0,0))=>(exists(K369:Int,K370:Int)[ (Ch(K369,K370)&turn(p1)&K369>=0&K369<xlen()&K370>=0&K370<ylen())&((( !(Ch(0,0)&(K369>0|K370>0)) ) => ( !(Ch(0,0)&(K369>0|K370>0))&(!turn(p1)) ))&!(exists(G0:_S1)[! (!turn(G0))&(Ch(1,1)&(K369>1|K370>1))])&!((Ch(0,1)&(K369>0|K370>1))&! (Ch(1,0)&(K369>1|K370>0)))) ])
2019-10-12 15:52:12,027 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:_S1)[! turn(G0)&Ch(1,1)])&!(Ch(0,1)&! Ch(1,0))
 f2:forall(K367:Int,K368:Int)[ Ch(K367,K368)&turn(p2)&K367>=0&K367<xlen()&K368>=0&K368<ylen()=>((( !(Ch(0,0)&(K367>0|K368>0)) ) => ( !(Ch(0,0)&(K367>0|K368>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! (Ch(G0,1)&(K367>G0|K368>1))])) ]
2019-10-12 15:52:14,770 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! ylen() = G0&turn(p2)])
 f2:!(!Ch(0,0))=>(exists(K373:Int,K374:Int)[ (Ch(K373,K374)&turn(p1)&K373>=0&K373<xlen()&K374>=0&K374<ylen())&((( !(Ch(0,0)&(K373>0|K374>0)) ) => ( !(Ch(0,0)&(K373>0|K374>0))&(!turn(p1)) ))&!(exists(G0:_S1)[! (!turn(G0))&(Ch(1,1)&(K373>1|K374>1))])&!((Ch(0,1)&(K373>0|K374>1))&! (Ch(1,0)&(K373>1|K374>0)))) ])
2019-10-12 15:52:14,813 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:_S1)[! turn(G0)&Ch(1,1)])&!(Ch(0,1)&! Ch(1,0))
 f2:forall(K371:Int,K372:Int)[ Ch(K371,K372)&turn(p2)&K371>=0&K371<xlen()&K372>=0&K372<ylen()=>((( !(Ch(0,0)&(K371>0|K372>0)) ) => ( !(Ch(0,0)&(K371>0|K372>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! (ylen()=G0)&(!turn(p2))])) ]
2019-10-12 15:52:20,657 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K377:Int,K378:Int)[ (Ch(K377,K378)&turn(p1)&K377>=0&K377<xlen()&K378>=0&K378<ylen())&(( !(Ch(0,0)&(K377>0|K378>0)) ) => ( !(Ch(0,0)&(K377>0|K378>0))&(!turn(p1)) )) ])
2019-10-12 15:52:20,708 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K375:Int,K376:Int)[ Ch(K375,K376)&turn(p2)&K375>=0&K375<xlen()&K376>=0&K376<ylen()=>(( !(Ch(0,0)&(K375>0|K376>0)) ) => ( !(Ch(0,0)&(K375>0|K376>0))&(!turn(p1)) )) ]
2019-10-12 15:52:20,903 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&! xlen() > X1])
 f2:!(!Ch(0,0))=>(exists(K382:Int,K383:Int)[ (Ch(K382,K383)&turn(p1)&K382>=0&K382<xlen()&K383>=0&K383<ylen())&(( !(Ch(0,0)&(K382>0|K383>0)) ) => ( !(Ch(0,0)&(K382>0|K383>0))&(!turn(p1)) )) ])
2019-10-12 15:52:20,936 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K379:Int,K380:Int)[ Ch(K379,K380)&turn(p2)&K379>=0&K379<xlen()&K380>=0&K380<ylen()=>((( !(Ch(0,0)&(K379>0|K380>0)) ) => ( !(Ch(0,0)&(K379>0|K380>0))&(!turn(p1)) ))&!(exists(X1:Int)[ exists(K381:Int)[ (xlen()=K381)&(X1>=0&! K381 > X1)] ])) ]
2019-10-12 15:52:21,361 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&! xlen() > X1])
 f2:!(!Ch(0,0))=>(exists(K387:Int,K388:Int)[ (Ch(K387,K388)&turn(p1)&K387>=0&K387<xlen()&K388>=0&K388<ylen())&((( !(Ch(0,0)&(K387>0|K388>0)) ) => ( !(Ch(0,0)&(K387>0|K388>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&! (xlen()=X1)])) ])
2019-10-12 15:52:21,393 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&! xlen() = X1])
 f2:forall(K384:Int,K385:Int)[ Ch(K384,K385)&turn(p2)&K384>=0&K384<xlen()&K385>=0&K385<ylen()=>((( !(Ch(0,0)&(K384>0|K385>0)) ) => ( !(Ch(0,0)&(K384>0|K385>0))&(!turn(p1)) ))&!(exists(X1:Int)[ exists(K386:Int)[ (xlen()=K386)&(X1>=0&! K386 > X1)] ])) ]
2019-10-12 15:52:21,424 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&! xlen() > X1])
2019-10-12 15:52:22,352 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() > G0&! Ch(G0,G0)])
 f2:!(!Ch(0,0))=>(exists(K392:Int,K393:Int)[ (Ch(K392,K393)&turn(p1)&K392>=0&K392<xlen()&K393>=0&K393<ylen())&((( !(Ch(0,0)&(K392>0|K393>0)) ) => ( !(Ch(0,0)&(K392>0|K393>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! (Ch(G0,1)&(K392>G0|K393>1))])) ])
2019-10-12 15:52:22,402 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() > G0&! Ch(G0,G0)])
 f2:!(!Ch(0,0))=>(exists(K392:Int,K393:Int)[ (Ch(K392,K393)&turn(p1)&K392>=0&K392<xlen()&K393>=0&K393<ylen())&((( !(Ch(0,0)&(K392>0|K393>0)) ) => ( !(Ch(0,0)&(K392>0|K393>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! (Ch(G0,1)&(K392>G0|K393>1))])) ])
2019-10-12 15:52:22,443 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! Ch(G0,1)])
 f2:forall(K389:Int,K390:Int)[ Ch(K389,K390)&turn(p2)&K389>=0&K389<xlen()&K390>=0&K390<ylen()=>((( !(Ch(0,0)&(K389>0|K390>0)) ) => ( !(Ch(0,0)&(K389>0|K390>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K391:Int)[ (xlen()=K391)&(G0>=0& K391 > G0&! (Ch(G0,G0)&(K389>G0|K390>G0)))] ])) ]
2019-10-12 15:52:22,491 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 >= 1&! Ch(G0,1)])
 f2:forall(K389:Int,K390:Int)[ Ch(K389,K390)&turn(p2)&K389>=0&K389<xlen()&K390>=0&K390<ylen()=>((( !(Ch(0,0)&(K389>0|K390>0)) ) => ( !(Ch(0,0)&(K389>0|K390>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K391:Int)[ (xlen()=K391)&(G0>=0& K391 > G0&! (Ch(G0,G0)&(K389>G0|K390>G0)))] ])) ]
2019-10-12 15:52:23,187 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() > G0&! Ch(G0,G0)])
 f2:!(!Ch(0,0))=>(exists(K397:Int,K398:Int)[ (Ch(K397,K398)&turn(p1)&K397>=0&K397<xlen()&K398>=0&K398<ylen())&((( !(Ch(0,0)&(K397>0|K398>0)) ) => ( !(Ch(0,0)&(K397>0|K398>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(1,G0)&(K397>1|K398>G0))])) ])
2019-10-12 15:52:23,251 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() > G0&! Ch(G0,G0)])
 f2:!(!Ch(0,0))=>(exists(K397:Int,K398:Int)[ (Ch(K397,K398)&turn(p1)&K397>=0&K397<xlen()&K398>=0&K398<ylen())&((( !(Ch(0,0)&(K397>0|K398>0)) ) => ( !(Ch(0,0)&(K397>0|K398>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(1,G0)&(K397>1|K398>G0))])) ])
2019-10-12 15:52:23,294 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(1,G0)])
 f2:forall(K394:Int,K395:Int)[ Ch(K394,K395)&turn(p2)&K394>=0&K394<xlen()&K395>=0&K395<ylen()=>((( !(Ch(0,0)&(K394>0|K395>0)) ) => ( !(Ch(0,0)&(K394>0|K395>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K396:Int)[ (xlen()=K396)&(G0>=0& K396 > G0&! (Ch(G0,G0)&(K394>G0|K395>G0)))] ])) ]
2019-10-12 15:52:23,343 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(1,G0)])
 f2:forall(K394:Int,K395:Int)[ Ch(K394,K395)&turn(p2)&K394>=0&K394<xlen()&K395>=0&K395<ylen()=>((( !(Ch(0,0)&(K394>0|K395>0)) ) => ( !(Ch(0,0)&(K394>0|K395>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K396:Int)[ (xlen()=K396)&(G0>=0& K396 > G0&! (Ch(G0,G0)&(K394>G0|K395>G0)))] ])) ]
2019-10-12 15:52:25,132 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() > G0&! Ch(G0,G0)])&!(! Ch(0,1))
 f2:!(!Ch(0,0))=>(exists(K402:Int,K403:Int)[ (Ch(K402,K403)&turn(p1)&K402>=0&K402<xlen()&K403>=0&K403<ylen())&((( !(Ch(0,0)&(K402>0|K403>0)) ) => ( !(Ch(0,0)&(K402>0|K403>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(1,G0)&(K402>1|K403>G0))])&!((Ch(1,0)&(K402>1|K403>0))&! (Ch(0,1)&(K402>0|K403>1)))) ])
2019-10-12 15:52:25,184 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() > G0&! Ch(G0,G0)])&!(! Ch(0,1))
 f2:!(!Ch(0,0))=>(exists(K402:Int,K403:Int)[ (Ch(K402,K403)&turn(p1)&K402>=0&K402<xlen()&K403>=0&K403<ylen())&((( !(Ch(0,0)&(K402>0|K403>0)) ) => ( !(Ch(0,0)&(K402>0|K403>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(1,G0)&(K402>1|K403>G0))])&!((Ch(1,0)&(K402>1|K403>0))&! (Ch(0,1)&(K402>0|K403>1)))) ])
2019-10-12 15:52:25,229 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(1,G0)])&!(Ch(1,0)&! Ch(0,1))
 f2:forall(K399:Int,K400:Int)[ Ch(K399,K400)&turn(p2)&K399>=0&K399<xlen()&K400>=0&K400<ylen()=>((( !(Ch(0,0)&(K399>0|K400>0)) ) => ( !(Ch(0,0)&(K399>0|K400>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K401:Int)[ (xlen()=K401)&(G0>=0& K401 > G0&! (Ch(G0,G0)&(K399>G0|K400>G0)))] ])&!(! (Ch(0,1)&(K399>0|K400>1)))) ]
2019-10-12 15:52:25,281 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(1,G0)])&!(Ch(1,0)&! Ch(0,1))
 f2:forall(K399:Int,K400:Int)[ Ch(K399,K400)&turn(p2)&K399>=0&K399<xlen()&K400>=0&K400<ylen()=>((( !(Ch(0,0)&(K399>0|K400>0)) ) => ( !(Ch(0,0)&(K399>0|K400>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K401:Int)[ (xlen()=K401)&(G0>=0& K401 > G0&! (Ch(G0,G0)&(K399>G0|K400>G0)))] ])&!(! (Ch(0,1)&(K399>0|K400>1)))) ]
2019-10-12 15:52:28,726 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() > G0&! Ch(G0,G0)])&!(! Ch(0,1))&!(! Ch(1,0))
 f2:!(!Ch(0,0))=>(exists(K407:Int,K408:Int)[ (Ch(K407,K408)&turn(p1)&K407>=0&K407<xlen()&K408>=0&K408<ylen())&((( !(Ch(0,0)&(K407>0|K408>0)) ) => ( !(Ch(0,0)&(K407>0|K408>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(1,G0)&(K407>1|K408>G0))])&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K407>G0|K408>G1))&! (Ch(G1,G0)&(K407>G1|K408>G0))])) ])
2019-10-12 15:52:28,949 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&xlen() > G0&! Ch(G0,G0)])&!(! Ch(0,1))&!(! Ch(1,0))
 f2:!(!Ch(0,0))=>(exists(K407:Int,K408:Int)[ (Ch(K407,K408)&turn(p1)&K407>=0&K407<xlen()&K408>=0&K408<ylen())&((( !(Ch(0,0)&(K407>0|K408>0)) ) => ( !(Ch(0,0)&(K407>0|K408>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(1,G0)&(K407>1|K408>G0))])&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K407>G0|K408>G1))&! (Ch(G1,G0)&(K407>G1|K408>G0))])) ])
2019-10-12 15:52:28,991 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(1,G0)])&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,G0)])
 f2:forall(K404:Int,K405:Int)[ Ch(K404,K405)&turn(p2)&K404>=0&K404<xlen()&K405>=0&K405<ylen()=>((( !(Ch(0,0)&(K404>0|K405>0)) ) => ( !(Ch(0,0)&(K404>0|K405>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K406:Int)[ (xlen()=K406)&(G0>=0& K406 > G0&! (Ch(G0,G0)&(K404>G0|K405>G0)))] ])&!(! (Ch(0,1)&(K404>0|K405>1)))&!(! (Ch(1,0)&(K404>1|K405>0)))) ]
2019-10-12 15:52:29,830 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&Ch(0,G0)&! Ch(1,G0)])&!(Ch(1,1)&! Ch(0,1))&!(exists(G0:Int)[G0>=0&Ch(0,G0)&! Ch(1,G0)])
 f2:!(!Ch(0,0))=>(exists(K411:Int,K412:Int)[ (Ch(K411,K412)&turn(p1)&K411>=0&K411<xlen()&K412>=0&K412<ylen())&((( !(Ch(0,0)&(K411>0|K412>0)) ) => ( !(Ch(0,0)&(K411>0|K412>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(1,G0)&(K411>1|K412>G0))])&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K411>G0|K412>G1))&! (Ch(G1,G0)&(K411>G1|K412>G0))])) ])
2019-10-12 15:52:29,883 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(1,G0)])&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,G0)])
 f2:forall(K409:Int,K410:Int)[ Ch(K409,K410)&turn(p2)&K409>=0&K409<xlen()&K410>=0&K410<ylen()=>((( !(Ch(0,0)&(K409>0|K410>0)) ) => ( !(Ch(0,0)&(K409>0|K410>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K409>0|K410>G0))&! (Ch(1,G0)&(K409>1|K410>G0))])&!((Ch(1,1)&(K409>1|K410>1))&! (Ch(0,1)&(K409>0|K410>1)))&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K409>0|K410>G0))&! (Ch(1,G0)&(K409>1|K410>G0))])) ]
2019-10-12 15:52:30,459 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(Ch(1,1)&! Ch(0,1))&!(exists(G0:Int)[G0>=0&! xlen() > G0&! turn(p1)])&!(Ch(1,1)&! Ch(1,0))
 f2:!(!Ch(0,0))=>(exists(K416:Int,K417:Int)[ (Ch(K416,K417)&turn(p1)&K416>=0&K416<xlen()&K417>=0&K417<ylen())&((( !(Ch(0,0)&(K416>0|K417>0)) ) => ( !(Ch(0,0)&(K416>0|K417>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 > 0&(Ch(1,G0)&(K416>1|K417>G0))])&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&(Ch(G0,G1)&(K416>G0|K417>G1))&! (Ch(G1,G0)&(K416>G1|K417>G0))])) ])
2019-10-12 15:52:30,505 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 > 0&Ch(1,G0)])&!(exists(G0:Int,G1:Int)[G0>=0&G1>=0&Ch(G0,G1)&! Ch(G1,G0)])
 f2:forall(K413:Int,K414:Int)[ Ch(K413,K414)&turn(p2)&K413>=0&K413<xlen()&K414>=0&K414<ylen()=>((( !(Ch(0,0)&(K413>0|K414>0)) ) => ( !(Ch(0,0)&(K413>0|K414>0))&(!turn(p1)) ))&!((Ch(1,1)&(K413>1|K414>1))&! (Ch(0,1)&(K413>0|K414>1)))&!(exists(G0:Int)[ exists(K415:Int)[ (xlen()=K415)&(G0>=0&! K415 > G0&! (!turn(p1)))] ])&!((Ch(1,1)&(K413>1|K414>1))&! (Ch(1,0)&(K413>1|K414>0)))) ]
2019-10-12 15:52:32,257 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K420:Int,K421:Int)[ (Ch(K420,K421)&turn(p1)&K420>=0&K420<xlen()&K421>=0&K421<ylen())&(( !(Ch(0,0)&(K420>0|K421>0)) ) => ( !(Ch(0,0)&(K420>0|K421>0))&(!turn(p1)) )) ])
2019-10-12 15:52:32,299 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K418:Int,K419:Int)[ Ch(K418,K419)&turn(p2)&K418>=0&K418<xlen()&K419>=0&K419<ylen()=>(( !(Ch(0,0)&(K418>0|K419>0)) ) => ( !(Ch(0,0)&(K418>0|K419>0))&(!turn(p1)) )) ]
2019-10-12 15:52:32,477 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&! ylen() > X1])
 f2:!(!Ch(0,0))=>(exists(K425:Int,K426:Int)[ (Ch(K425,K426)&turn(p1)&K425>=0&K425<xlen()&K426>=0&K426<ylen())&(( !(Ch(0,0)&(K425>0|K426>0)) ) => ( !(Ch(0,0)&(K425>0|K426>0))&(!turn(p1)) )) ])
2019-10-12 15:52:32,507 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K422:Int,K423:Int)[ Ch(K422,K423)&turn(p2)&K422>=0&K422<xlen()&K423>=0&K423<ylen()=>((( !(Ch(0,0)&(K422>0|K423>0)) ) => ( !(Ch(0,0)&(K422>0|K423>0))&(!turn(p1)) ))&!(exists(X1:Int)[ exists(K424:Int)[ (ylen()=K424)&(X1>=0&! K424 > X1)] ])) ]
2019-10-12 15:52:32,889 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&! ylen() > X1])
 f2:!(!Ch(0,0))=>(exists(K430:Int,K431:Int)[ (Ch(K430,K431)&turn(p1)&K430>=0&K430<xlen()&K431>=0&K431<ylen())&((( !(Ch(0,0)&(K430>0|K431>0)) ) => ( !(Ch(0,0)&(K430>0|K431>0))&(!turn(p1)) ))&!(exists(X1:Int)[X1>=0&! (ylen()=X1)])) ])
2019-10-12 15:52:32,922 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&! ylen() = X1])
 f2:forall(K427:Int,K428:Int)[ Ch(K427,K428)&turn(p2)&K427>=0&K427<xlen()&K428>=0&K428<ylen()=>((( !(Ch(0,0)&(K427>0|K428>0)) ) => ( !(Ch(0,0)&(K427>0|K428>0))&(!turn(p1)) ))&!(exists(X1:Int)[ exists(K429:Int)[ (ylen()=K429)&(X1>=0&! K429 > X1)] ])) ]
2019-10-12 15:52:32,951 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&! ylen() > X1])
2019-10-12 15:52:33,790 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! Ch(G0,1)])
 f2:!(!Ch(0,0))=>(exists(K434:Int,K435:Int)[ (Ch(K434,K435)&turn(p1)&K434>=0&K434<xlen()&K435>=0&K435<ylen())&((( !(Ch(0,0)&(K434>0|K435>0)) ) => ( !(Ch(0,0)&(K434>0|K435>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! (Ch(0,G0)&(K434>0|K435>G0))])) ])
2019-10-12 15:52:33,843 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 1&! Ch(0,G0)])
 f2:forall(K432:Int,K433:Int)[ Ch(K432,K433)&turn(p2)&K432>=0&K432<xlen()&K433>=0&K433<ylen()=>((( !(Ch(0,0)&(K432>0|K433>0)) ) => ( !(Ch(0,0)&(K432>0|K433>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(G0,1)&(K432>G0|K433>1))])) ]
2019-10-12 15:52:34,465 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! Ch(G0,1)])
 f2:!(!Ch(0,0))=>(exists(K438:Int,K439:Int)[ (Ch(K438,K439)&turn(p1)&K438>=0&K438<xlen()&K439>=0&K439<ylen())&((( !(Ch(0,0)&(K438>0|K439>0)) ) => ( !(Ch(0,0)&(K438>0|K439>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&(Ch(G0,1)&(K438>G0|K439>1))])) ])
2019-10-12 15:52:34,507 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&Ch(G0,1)])
 f2:forall(K436:Int,K437:Int)[ Ch(K436,K437)&turn(p2)&K436>=0&K436<xlen()&K437>=0&K437<ylen()=>((( !(Ch(0,0)&(K436>0|K437>0)) ) => ( !(Ch(0,0)&(K436>0|K437>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(G0,1)&(K436>G0|K437>1))])) ]
2019-10-12 15:52:36,447 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! Ch(G0,1)])&!(! Ch(1,1))
 f2:!(!Ch(0,0))=>(exists(K442:Int,K443:Int)[ (Ch(K442,K443)&turn(p1)&K442>=0&K442<xlen()&K443>=0&K443<ylen())&((( !(Ch(0,0)&(K442>0|K443>0)) ) => ( !(Ch(0,0)&(K442>0|K443>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&(Ch(G0,1)&(K442>G0|K443>1))])&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K442>0|K443>G0))&! (Ch(G0,0)&(K442>G0|K443>0))])) ])
2019-10-12 15:52:36,494 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&Ch(G0,1)])&!(exists(G0:Int)[G0>=0&Ch(0,G0)&! Ch(G0,0)])
 f2:forall(K440:Int,K441:Int)[ Ch(K440,K441)&turn(p2)&K440>=0&K440<xlen()&K441>=0&K441<ylen()=>((( !(Ch(0,0)&(K440>0|K441>0)) ) => ( !(Ch(0,0)&(K440>0|K441>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(G0,1)&(K440>G0|K441>1))])&!(! (Ch(1,1)&(K440>1|K441>1)))) ]
2019-10-12 15:52:36,534 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&Ch(G0,1)])&!(exists(G0:Int)[G0>=0&Ch(0,G0)&! Ch(G0,0)])
 f2:forall(K440:Int,K441:Int)[ Ch(K440,K441)&turn(p2)&K440>=0&K440<xlen()&K441>=0&K441<ylen()=>((( !(Ch(0,0)&(K440>0|K441>0)) ) => ( !(Ch(0,0)&(K440>0|K441>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&! G0 > 0&! (Ch(G0,1)&(K440>G0|K441>1))])&!(! (Ch(1,1)&(K440>1|K441>1)))) ]
2019-10-12 15:52:41,041 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() > G0&! Ch(G0,0)])
 f2:!(!Ch(0,0))=>(exists(K447:Int,K448:Int)[ (Ch(K447,K448)&turn(p1)&K447>=0&K447<xlen()&K448>=0&K448<ylen())&((( !(Ch(0,0)&(K447>0|K448>0)) ) => ( !(Ch(0,0)&(K447>0|K448>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&(Ch(G0,1)&(K447>G0|K448>1))])&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K447>0|K448>G0))&! (Ch(G0,0)&(K447>G0|K448>0))])&!(exists(G0:Int)[G0>=0&(Ch(G0,0)&(K447>G0|K448>0))&! (Ch(0,G0)&(K447>0|K448>G0))])) ])
2019-10-12 15:52:41,108 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&ylen() > G0&! Ch(G0,0)])
 f2:!(!Ch(0,0))=>(exists(K447:Int,K448:Int)[ (Ch(K447,K448)&turn(p1)&K447>=0&K447<xlen()&K448>=0&K448<ylen())&((( !(Ch(0,0)&(K447>0|K448>0)) ) => ( !(Ch(0,0)&(K447>0|K448>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&(Ch(G0,1)&(K447>G0|K448>1))])&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K447>0|K448>G0))&! (Ch(G0,0)&(K447>G0|K448>0))])&!(exists(G0:Int)[G0>=0&(Ch(G0,0)&(K447>G0|K448>0))&! (Ch(0,G0)&(K447>0|K448>G0))])) ])
2019-10-12 15:52:41,176 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&Ch(G0,1)])&!(exists(G0:Int)[G0>=0&Ch(0,G0)&! Ch(G0,0)])&!(exists(G0:Int)[G0>=0&Ch(G0,0)&! Ch(0,G0)])
 f2:forall(K444:Int,K445:Int)[ Ch(K444,K445)&turn(p2)&K444>=0&K444<xlen()&K445>=0&K445<ylen()=>((( !(Ch(0,0)&(K444>0|K445>0)) ) => ( !(Ch(0,0)&(K444>0|K445>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K446:Int)[ (ylen()=K446)&(G0>=0& K446 > G0&! (Ch(G0,0)&(K444>G0|K445>0)))] ])) ]
2019-10-12 15:52:41,214 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&Ch(G0,1)])&!(exists(G0:Int)[G0>=0&Ch(0,G0)&! Ch(G0,0)])&!(exists(G0:Int)[G0>=0&Ch(G0,0)&! Ch(0,G0)])
 f2:forall(K444:Int,K445:Int)[ Ch(K444,K445)&turn(p2)&K444>=0&K444<xlen()&K445>=0&K445<ylen()=>((( !(Ch(0,0)&(K444>0|K445>0)) ) => ( !(Ch(0,0)&(K444>0|K445>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K446:Int)[ (ylen()=K446)&(G0>=0& K446 > G0&! (Ch(G0,0)&(K444>G0|K445>0)))] ])) ]
2019-10-12 15:52:45,246 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! ylen() > G0&turn(p2)])
 f2:!(!Ch(0,0))=>(exists(K452:Int,K453:Int)[ (Ch(K452,K453)&turn(p1)&K452>=0&K452<xlen()&K453>=0&K453<ylen())&((( !(Ch(0,0)&(K452>0|K453>0)) ) => ( !(Ch(0,0)&(K452>0|K453>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&(Ch(G0,1)&(K452>G0|K453>1))])&!(exists(G0:Int)[G0>=0&(Ch(0,G0)&(K452>0|K453>G0))&! (Ch(G0,0)&(K452>G0|K453>0))])&!(exists(G0:Int)[G0>=0&(Ch(G0,0)&(K452>G0|K453>0))&! (Ch(0,G0)&(K452>0|K453>G0))])) ])
2019-10-12 15:52:45,288 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&Ch(G0,1)])&!(exists(G0:Int)[G0>=0&Ch(0,G0)&! Ch(G0,0)])&!(exists(G0:Int)[G0>=0&Ch(G0,0)&! Ch(0,G0)])
 f2:forall(K449:Int,K450:Int)[ Ch(K449,K450)&turn(p2)&K449>=0&K449<xlen()&K450>=0&K450<ylen()=>((( !(Ch(0,0)&(K449>0|K450>0)) ) => ( !(Ch(0,0)&(K449>0|K450>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K451:Int)[ (ylen()=K451)&(G0>=0&! K451 > G0&(!turn(p2)))] ])) ]
2019-10-12 15:52:48,704 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K456:Int,K457:Int)[ (Ch(K456,K457)&turn(p1)&K456>=0&K456<xlen()&K457>=0&K457<ylen())&(( !(Ch(0,0)&(K456>0|K457>0)) ) => ( !(Ch(0,0)&(K456>0|K457>0))&(!turn(p1)) )) ])
2019-10-12 15:52:48,743 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K454:Int,K455:Int)[ Ch(K454,K455)&turn(p2)&K454>=0&K454<xlen()&K455>=0&K455<ylen()=>(( !(Ch(0,0)&(K454>0|K455>0)) ) => ( !(Ch(0,0)&(K454>0|K455>0))&(!turn(p1)) )) ]
2019-10-12 15:52:48,893 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(! xlen() = 1)
 f2:!(!Ch(0,0))=>(exists(K460:Int,K461:Int)[ (Ch(K460,K461)&turn(p1)&K460>=0&K460<xlen()&K461>=0&K461<ylen())&(( !(Ch(0,0)&(K460>0|K461>0)) ) => ( !(Ch(0,0)&(K460>0|K461>0))&(!turn(p1)) )) ])
2019-10-12 15:52:48,921 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K458:Int,K459:Int)[ Ch(K458,K459)&turn(p2)&K458>=0&K458<xlen()&K459>=0&K459<ylen()=>((( !(Ch(0,0)&(K458>0|K459>0)) ) => ( !(Ch(0,0)&(K458>0|K459>0))&(!turn(p1)) ))&!(! (xlen()=1))) ]
2019-10-12 15:52:49,281 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(! xlen() = 1)
 f2:!(!Ch(0,0))=>(exists(K464:Int,K465:Int)[ (Ch(K464,K465)&turn(p1)&K464>=0&K464<xlen()&K465>=0&K465<ylen())&((( !(Ch(0,0)&(K464>0|K465>0)) ) => ( !(Ch(0,0)&(K464>0|K465>0))&(!turn(p1)) ))&!(exists(X1:Int)[ exists(K466:Int)[ (xlen()=K466)&(X1>=0&! K466 > X1)] ])) ])
2019-10-12 15:52:49,312 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&! xlen() > X1])
 f2:forall(K462:Int,K463:Int)[ Ch(K462,K463)&turn(p2)&K462>=0&K462<xlen()&K463>=0&K463<ylen()=>((( !(Ch(0,0)&(K462>0|K463>0)) ) => ( !(Ch(0,0)&(K462>0|K463>0))&(!turn(p1)) ))&!(! (xlen()=1))) ]
2019-10-12 15:52:49,342 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(! xlen() = 1)
2019-10-12 15:52:50,206 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(! Ch(0,1)&! xlen() = 1)
 f2:!(!Ch(0,0))=>(exists(K469:Int,K470:Int)[ (Ch(K469,K470)&turn(p1)&K469>=0&K469<xlen()&K470>=0&K470<ylen())&((( !(Ch(0,0)&(K469>0|K470>0)) ) => ( !(Ch(0,0)&(K469>0|K470>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K471:Int)[ (xlen()=K471)&(G0>=0&! K471 > G0&! (Ch(1,0)&(K469>1|K470>0)))] ])) ])
2019-10-12 15:52:50,253 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! xlen() > G0&! Ch(1,0)])
 f2:forall(K467:Int,K468:Int)[ Ch(K467,K468)&turn(p2)&K467>=0&K467<xlen()&K468>=0&K468<ylen()=>((( !(Ch(0,0)&(K467>0|K468>0)) ) => ( !(Ch(0,0)&(K467>0|K468>0))&(!turn(p1)) ))&!(! (Ch(0,1)&(K467>0|K468>1))&! (xlen()=1))) ]
2019-10-12 15:52:50,758 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(! turn(p1)&! xlen() = 1)
 f2:!(!Ch(0,0))=>(exists(K474:Int,K475:Int)[ (Ch(K474,K475)&turn(p1)&K474>=0&K474<xlen()&K475>=0&K475<ylen())&((( !(Ch(0,0)&(K474>0|K475>0)) ) => ( !(Ch(0,0)&(K474>0|K475>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K476:Int)[ (xlen()=K476)&(G0>=0&! K476 > G0&! (Ch(1,0)&(K474>1|K475>0)))] ])) ])
2019-10-12 15:52:50,795 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! xlen() > G0&! Ch(1,0)])
 f2:forall(K472:Int,K473:Int)[ Ch(K472,K473)&turn(p2)&K472>=0&K472<xlen()&K473>=0&K473<ylen()=>((( !(Ch(0,0)&(K472>0|K473>0)) ) => ( !(Ch(0,0)&(K472>0|K473>0))&(!turn(p1)) ))&!(! (!turn(p1))&! (xlen()=1))) ]
2019-10-12 15:52:52,291 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:!(!Ch(0,0))=>(exists(K479:Int,K480:Int)[ (Ch(K479,K480)&turn(p1)&K479>=0&K479<xlen()&K480>=0&K480<ylen())&(( !(Ch(0,0)&(K479>0|K480>0)) ) => ( !(Ch(0,0)&(K479>0|K480>0))&(!turn(p1)) )) ])
2019-10-12 15:52:52,337 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K477:Int,K478:Int)[ Ch(K477,K478)&turn(p2)&K477>=0&K477<xlen()&K478>=0&K478<ylen()=>(( !(Ch(0,0)&(K477>0|K478>0)) ) => ( !(Ch(0,0)&(K477>0|K478>0))&(!turn(p1)) )) ]
2019-10-12 15:52:52,513 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(! xlen() = 0)
 f2:!(!Ch(0,0))=>(exists(K483:Int,K484:Int)[ (Ch(K483,K484)&turn(p1)&K483>=0&K483<xlen()&K484>=0&K484<ylen())&(( !(Ch(0,0)&(K483>0|K484>0)) ) => ( !(Ch(0,0)&(K483>0|K484>0))&(!turn(p1)) )) ])
2019-10-12 15:52:52,544 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) )
 f2:forall(K481:Int,K482:Int)[ Ch(K481,K482)&turn(p2)&K481>=0&K481<xlen()&K482>=0&K482<ylen()=>((( !(Ch(0,0)&(K481>0|K482>0)) ) => ( !(Ch(0,0)&(K481>0|K482>0))&(!turn(p1)) ))&!(! (xlen()=0))) ]
2019-10-12 15:52:52,934 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(! xlen() = 0)
 f2:!(!Ch(0,0))=>(exists(K487:Int,K488:Int)[ (Ch(K487,K488)&turn(p1)&K487>=0&K487<xlen()&K488>=0&K488<ylen())&((( !(Ch(0,0)&(K487>0|K488>0)) ) => ( !(Ch(0,0)&(K487>0|K488>0))&(!turn(p1)) ))&!(exists(X1:Int)[ exists(K489:Int)[ (ylen()=K489)&(X1>=0&! K489 > X1)] ])) ])
2019-10-12 15:52:52,966 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(X1:Int)[X1>=0&! ylen() > X1])
 f2:forall(K485:Int,K486:Int)[ Ch(K485,K486)&turn(p2)&K485>=0&K485<xlen()&K486>=0&K486<ylen()=>((( !(Ch(0,0)&(K485>0|K486>0)) ) => ( !(Ch(0,0)&(K485>0|K486>0))&(!turn(p1)) ))&!(! (xlen()=0))) ]
2019-10-12 15:52:52,993 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:forall(K16:Int,K17:Int)[K16>=0&K16<xlen()&K17>=0&K17<ylen()=>Ch(K16,K17)]&xlen()>1&ylen()=xlen()&turn(p1)&!turn(p2)
 f2:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(! xlen() = 0)
2019-10-12 15:52:53,946 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])
 f2:!(!Ch(0,0))=>(exists(K492:Int,K493:Int)[ (Ch(K492,K493)&turn(p1)&K492>=0&K492<xlen()&K493>=0&K493<ylen())&((( !(Ch(0,0)&(K492>0|K493>0)) ) => ( !(Ch(0,0)&(K492>0|K493>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K494:Int)[ (ylen()=K494)&(G0>=0&! K494 > G0&! (Ch(0,1)&(K492>0|K493>1)))] ])) ])
2019-10-12 15:52:54,001 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])
 f2:!(!Ch(0,0))=>(exists(K492:Int,K493:Int)[ (Ch(K492,K493)&turn(p1)&K492>=0&K492<xlen()&K493>=0&K493<ylen())&((( !(Ch(0,0)&(K492>0|K493>0)) ) => ( !(Ch(0,0)&(K492>0|K493>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K494:Int)[ (ylen()=K494)&(G0>=0&! K494 > G0&! (Ch(0,1)&(K492>0|K493>1)))] ])) ])
2019-10-12 15:52:54,039 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! ylen() > G0&! Ch(0,1)])
 f2:forall(K490:Int,K491:Int)[ Ch(K490,K491)&turn(p2)&K490>=0&K490<xlen()&K491>=0&K491<ylen()=>((( !(Ch(0,0)&(K490>0|K491>0)) ) => ( !(Ch(0,0)&(K490>0|K491>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! (Ch(0,G0)&(K490>0|K491>G0))])) ]
2019-10-12 15:52:56,060 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])&!(! Ch(1,1))
 f2:!(!Ch(0,0))=>(exists(K497:Int,K498:Int)[ (Ch(K497,K498)&turn(p1)&K497>=0&K497<xlen()&K498>=0&K498<ylen())&((( !(Ch(0,0)&(K497>0|K498>0)) ) => ( !(Ch(0,0)&(K497>0|K498>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K499:Int)[ (ylen()=K499)&(G0>=0&! K499 > G0&! (Ch(0,1)&(K497>0|K498>1)))] ])&!((Ch(1,1)&(K497>1|K498>1)))) ])
2019-10-12 15:52:56,115 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! ylen() > G0&! Ch(0,1)])&!(Ch(1,1))
 f2:forall(K495:Int,K496:Int)[ Ch(K495,K496)&turn(p2)&K495>=0&K495<xlen()&K496>=0&K496<ylen()=>((( !(Ch(0,0)&(K495>0|K496>0)) ) => ( !(Ch(0,0)&(K495>0|K496>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! (Ch(0,G0)&(K495>0|K496>G0))])&!(! (Ch(1,1)&(K495>1|K496>1)))) ]
2019-10-12 15:52:58,535 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! Ch(0,G0)])&!(! Ch(1,1))&!(! Ch(1,0))
 f2:!(!Ch(0,0))=>(exists(K502:Int,K503:Int)[ (Ch(K502,K503)&turn(p1)&K502>=0&K502<xlen()&K503>=0&K503<ylen())&((( !(Ch(0,0)&(K502>0|K503>0)) ) => ( !(Ch(0,0)&(K502>0|K503>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K504:Int)[ (ylen()=K504)&(G0>=0&! K504 > G0&! (Ch(0,1)&(K502>0|K503>1)))] ])&!((Ch(1,1)&(K502>1|K503>1)))&!(! (Ch(1,0)&(K502>1|K503>0)))) ])
2019-10-12 15:52:58,587 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! ylen() > G0&! Ch(0,1)])&!(Ch(1,1))&!(! Ch(1,0))
 f2:forall(K500:Int,K501:Int)[ Ch(K500,K501)&turn(p2)&K500>=0&K500<xlen()&K501>=0&K501<ylen()=>((( !(Ch(0,0)&(K500>0|K501>0)) ) => ( !(Ch(0,0)&(K500>0|K501>0))&(!turn(p1)) ))&!(exists(G0:Int)[G0>=0&G0 = 1&! (Ch(0,G0)&(K500>0|K501>G0))])&!(! (Ch(1,1)&(K500>1|K501>1)))&!(! (Ch(1,0)&(K500>1|K501>0)))) ]
2019-10-12 15:52:59,399 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(turn(p2)&! xlen() = 0)&!(Ch(0,1)&turn(p2))&!(exists(G0:Int)[G0>=0&Ch(1,G0)&! Ch(G0,0)])
 f2:!(!Ch(0,0))=>(exists(K507:Int,K508:Int)[ (Ch(K507,K508)&turn(p1)&K507>=0&K507<xlen()&K508>=0&K508<ylen())&((( !(Ch(0,0)&(K507>0|K508>0)) ) => ( !(Ch(0,0)&(K507>0|K508>0))&(!turn(p1)) ))&!(exists(G0:Int)[ exists(K509:Int)[ (ylen()=K509)&(G0>=0&! K509 > G0&! (Ch(0,1)&(K507>0|K508>1)))] ])&!((Ch(1,1)&(K507>1|K508>1)))&!(! (Ch(1,0)&(K507>1|K508>0)))) ])
2019-10-12 15:52:59,441 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! ylen() > G0&! Ch(0,1)])&!(Ch(1,1))&!(! Ch(1,0))
 f2:forall(K505:Int,K506:Int)[ Ch(K505,K506)&turn(p2)&K505>=0&K505<xlen()&K506>=0&K506<ylen()=>((( !(Ch(0,0)&(K505>0|K506>0)) ) => ( !(Ch(0,0)&(K505>0|K506>0))&(!turn(p1)) ))&!((!turn(p2))&! (xlen()=0))&!((Ch(0,1)&(K505>0|K506>1))&(!turn(p2)))&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K505>1|K506>G0))&! (Ch(G0,0)&(K505>G0|K506>0))])) ]
2019-10-12 15:52:59,503 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! ylen() > G0&! Ch(0,1)])&!(Ch(1,1))&!(! Ch(1,0))
 f2:forall(K505:Int,K506:Int)[ Ch(K505,K506)&turn(p2)&K505>=0&K505<xlen()&K506>=0&K506<ylen()=>((( !(Ch(0,0)&(K505>0|K506>0)) ) => ( !(Ch(0,0)&(K505>0|K506>0))&(!turn(p1)) ))&!((!turn(p2))&! (xlen()=0))&!((Ch(0,1)&(K505>0|K506>1))&(!turn(p2)))&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K505>1|K506>G0))&! (Ch(G0,0)&(K505>G0|K506>0))])) ]
2019-10-12 15:52:59,535 -- z3prover.py -- [function:imply][line:49] -- DEBUG: #checking imply:
 f1:(( !Ch(0,0) ) => ( !Ch(0,0)&turn(p1) ))&!(exists(G0:Int)[G0>=0&! ylen() > G0&! Ch(0,1)])&!(Ch(1,1))&!(! Ch(1,0))
 f2:forall(K505:Int,K506:Int)[ Ch(K505,K506)&turn(p2)&K505>=0&K505<xlen()&K506>=0&K506<ylen()=>((( !(Ch(0,0)&(K505>0|K506>0)) ) => ( !(Ch(0,0)&(K505>0|K506>0))&(!turn(p1)) ))&!((!turn(p2))&! (xlen()=0))&!((Ch(0,1)&(K505>0|K506>1))&(!turn(p2)))&!(exists(G0:Int)[G0>=0&(Ch(1,G0)&(K505>1|K506>G0))&! (Ch(G0,0)&(K505>G0|K506>0))])) ]
