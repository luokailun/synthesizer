



M = ({'_S1': ['p2', 'p1'], 'Int': ['1', '0', '3', '2', '4'], 'Bool': ['True', 'False']}, {'turn(p1)': 'False', 'numStone()': '0', 'turn(p2)': 'True'})

C = !exists(X1:Int)[numStone() > X1]


QAQ: C is actually equivalent to False (C \equiv False);  but we cannot use model M to detect this? Because in M we assume the Int sort only has objects 0-4 and we have M \models C (but negative number will make that false).

SOLVE: (1) add additional predicates: we require that X1>=0 since we only focus on the case natural number
	   (2) add math checking about predicates by expanding the Int domain to 0-10 ??? (give up)



--------------------------------------------------------------------------------------------------------------------------------

too slow and predicate problem

has constructed 


--------------------------------------------------------------------------------------------------------------------------------

too much conjuncts!


1. detect free variables ??

2. first combine one predicate (detect those fails to combine), then use the failure information to guide further combination ??
	
	When filtering a predicate:
	(1) use P model?  No, because even this predicate include the P model, its conjunction may exclude it.
		(when a predicate exclude the P model, so its conjunction do) (So the set of P model will gradually decrease)
	(2) use N model?  Yes, but how to do it??


3. first generate conjuncts of the same length, then generate longer conjuncts??


--------------------------------------------------------------------------------------------------------------------------------

P2(FIX): generate small model fails 

P3(FIX): math grounding check fails sometimes because it's limited to a fixed number. 

p6(FIX?): restart 

p5(FIX?): backtrack

P0(FIX): still too slow !!!! (cache??)

P1(FIX): refine a conjunct should first check whether M+ \models it


P4:(FIX) the types of models: 
	--- reachable states? (do not care) 
	---- illegal states?? ( can not Finally reach goal ?? some states are illegal but goal achievable?? )

p5: +updates will generate two same conjuncts??


--------------------------------------------------------------------------------------------------------------------------------


two much P updates ???

P1(FIX): Restart may be too weak???

P2(??? Useful??): Consider more powerful template???

P3(FIX): Checking whether states are reachable ???  (Init ->F state)



Reachable problem 

Checking E model: ({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'Ch(1,0)': 'True', 'Ch(2,1)': 'False', 'turn(p2)': 'False', 'Ch(2,3)': 'False', 'Ch(1,4)': 'False', 'Ch(3,1)': 'False', 'ylen()': '4', 'Ch(3,3)': 'False', 'Ch(1,2)': 'True', 'Ch(0,2)': 'True', 'Ch(0,0)': 'True', 'Ch(4,2)': 'False', 'Ch(4,3)': 'False', 'Ch(4,1)': 'False', 'Ch(4,4)': 'False', 'Ch(3,4)': 'False', 'Ch(1,1)': 'True', 'Ch(2,0)': 'True', 'Ch(2,2)': 'False', 'turn(p1)': 'True', 'Ch(2,4)': 'False', 'Ch(3,0)': 'False', 'Ch(0,4)': 'False', 'Ch(3,2)': 'False', 'Ch(1,3)': 'True', 'Ch(0,3)': 'True', 'xlen()': '4', 'Ch(4,0)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})

OOOO
OOOO
O###
####
-------

**** Win! Include it by next state

after progression: 

State q2: P models [({'_S1': ['p2', 'p1'], 'Int': ['0', '1', '2', '3', '4'], 'Bool': ['True', 'False']}, {'Ch(1,0)': 'True', 'Ch(2,1)': 'False', 'turn(p2)': 'True', 'Ch(2,3)': 'False', 'Ch(1,4)': 'False', 'Ch(3,1)': 'False', 'Ch(3,3)': 'False', 'ylen()': '4', 'Ch(1,2)': 'False', 'Ch(0,2)': 'False', 'Ch(0,0)': 'True', 'Ch(4,2)': 'False', 'Ch(4,3)': 'False', 'Ch(4,1)': 'False', 'Ch(4,4)': 'False', 'Ch(3,4)': 'False', 'Ch(1,1)': 'True', 'Ch(2,0)': 'True', 'Ch(2,2)': 'False', 'turn(p1)': 'False', 'Ch(2,4)': 'False', 'Ch(3,0)': 'False', 'Ch(0,4)': 'False', 'Ch(3,2)': 'False', 'Ch(1,3)': 'False', 'Ch(0,3)': 'False', 'xlen()': '4', 'Ch(4,0)': 'False', 'Ch(0,1)': 'True'}, {'Ch\\(\\d+,\\d+\\)': 'False'})]

OO##
OO##
O###
####
-------


--------------------------------------------------------------------------------------------------------------------------------


new version! 

strategy model 






