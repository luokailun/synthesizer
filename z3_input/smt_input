(set-option :timeout 10000)(declare-sort _S1)(declare-fun Ch(Int Int) Bool)
(declare-fun turn(_S1) Bool)
(declare-fun xlen() Int)
(declare-fun ylen() Int)
(declare-fun lasty() Int)
(declare-fun lastx() Int)(declare-const p2 _S1)
(declare-const p1 _S1)
(declare-const True Bool)
(declare-const False Bool) (assert (not    (=> (and (=> (not (Ch 1 1)) (and (not (Ch 1 1)) (turn p1))) (not (= xlen 1))) (forall ((K94 _S1) (K95 Int) (K96 Int)) (=> (and (Ch K95 K96) (turn K94)) (exists ((K91 _S1) (K92 Int) (K93 Int)) (and (and (and (Ch K92 K93) (or (> K95 K92) (> K96 K93))) (not (turn K91))) (and (=> (not (and (and (Ch 1 1) (or (> K95 1) (> K96 1))) (or (> K92 1) (> K93 1)))) (and (not (and (and (Ch 1 1) (or (> K95 1) (> K96 1))) (or (> K92 1) (> K93 1)))) (not (not (turn p1))))) (not (= xlen _eat))))))))  ))
(check-sat)
(get-model)