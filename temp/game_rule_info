('SSA', 'numStone=Y,take(P,X)', 'numStone=Y+X')
('SSA', 'turn(P),pi(A)', '!turn(P)')
('End', '', 'numStone=0')
('Win', 'pi(P)', 'numStone=0&!(turn(P))')
('SSA', 'turn(P),pi(A)', '!turn(P)')
('Poss', 'take(P,X)', 'numStone>=X&(X=1|X=2|X=3)&turn(P)')
('Init', '', '!(numStone%4=0)&numStone>0')
('Init', '', 'turn(p1)&!turn(p2)')
('Basic', '', 'forall(P)[(P=p1|P=p2)&!(p1=p2)]')


('SSA', 'numStone()=K1,take(K2,K3)', 'numStone()=K1+K3')
('SSA', 'turn(K4),pi(K5)', '!turn(K4)')
('End', '', 'numStone()=0')
('Win', 'pi(K6)', 'numStone()=0&!(turn(K6))')
('SSA', 'turn(K7),pi(K8)', '!turn(K7)')
('Poss', 'take(K9,K10)', 'numStone()>=K10&(K10=1|K10=2|K10=3)&turn(K9)')
('Init', '', '!(numStone()%4=0)&numStone()>0')
('Init', '', 'turn(p1)&!turn(p2)')
('Basic', '', 'forall(K11:_S1)[(K11=p1|K11=p2)&!(p1=p2)]')

feature pattern for regression:
(['take_K9_K10_'], ['K9', 'K10'], 'take_(.+?)_(.+?)_')
(['numStone__K1', 'take_K2_K3_'], ['K1', 'K2', 'K3'], 'numStone__(.+?)_take_(.+?)_(.+?)_')
(['turn_K4_', 'pi_K5_'], ['K4', 'K5'], 'turn_(.+?)__(.+?)_')
(['turn_K7_', 'pi_K8_'], ['K7', 'K8'], 'turn_(.+?)__(.+?)_')
(['pi_K6_'], ['K6'], '(.+?)_')

 actions:['take']
 fluents:['turn', 'numStone']
 0arity-fluents:['numStone']
 predicates:['turn']
 functional fluents:['numStone']

 sort for constants:{'_S1': ['p2', 'p1'], 'Int': ['1', '0', '3', '2', '4'], 'Bool': ['True', 'False']}
 sort for functions:{'turn': ['_S1', 'Bool'], 'take': ['_S1', 'Int', 'Bool'], 'numStone': ['Int']}
 sort for predicates:{'turn': ['_S1']}